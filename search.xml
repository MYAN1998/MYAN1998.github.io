<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024年终总结</title>
      <link href="/posts/3205620321/"/>
      <url>/posts/3205620321/</url>
      
        <content type="html"><![CDATA[<p>迟到的2024年终总结，2025年第一天发烧，呕吐，腹泻，直接在家躺了一天；吃完退烧药，烧退了，后面又烧起来，简直痛苦死了；我妈说我不听话，因为她让我去医院，我硬是在家吃药躺了一天，首先我当时浑身疼没有力气起床洗漱去医院，其次我没有在上海去过医院看病的经历，我有一种未知的恐惧；后面，在1月3号我退烧但是还有些胃疼的情况下，去了一趟医院，被医生开了一堆奇奇怪怪的胃药；</p><h2 id="关于工作"><a href="#关于工作" class="headerlink" title="关于工作"></a>关于工作</h2><p>今年跳槽了，没想到会那么早跳槽，恰好有个机遇吧；和前同事还是有联系的，我羡慕他们，他们羡慕我，大家都在互相羡慕；2024年的前十个月我觉得我还是很开心的，解决问题带来的快乐，哈哈哈哈，没想到吧，有人竟然觉得工作是开心的，我前十个月确实还是蛮开心的，可能感受到自己在进步吧，我本来也很喜欢这些东西；后面就越来越觉得没劲，抵触上班，不知道自己在追求什么；但是工作中，有结交一些朋友，大部分同事人都是蛮好的；</p><p>我总是问陈世超，终其一生我们在追求什么；他总说追求活着；</p><h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><p>2024年也没有系统的去学习过什么东西，2025年开始有计划的学习叭；关于学东西，总被雁姐说卷，其实我只是学着玩，不然没办法对抗我这虚无的人生；</p><h2 id="关于读书"><a href="#关于读书" class="headerlink" title="关于读书"></a>关于读书</h2><p>2024年就读了两本书，一本是石雷鹏老师的《永远不要停下前进的脚步》，另外一本是罗翔老师的《法治的细节》；</p><p>《永远不要停下前进的脚步》，这本书读起来并不费劲，像是和作者面对面交流，交流的东西也是很接地气的那种，所以读起来很轻松。对书中写到的<strong>很多时候，犹豫不决，下不了决心，首先是因为怀疑自己能力不足，其次是因为没有勇气面对不确定的世界</strong>这句话，产生了强烈的共鸣；</p><p>《法治的细节》，只是通读了一遍，有一些法学专有名词，我依旧不是很明白；下面记录下我觉得这本书中超级棒的句子：</p><blockquote><p>1.人是目的，不是纯粹的手段                                                               2.看的见不用去相信，看不见的才用去相信</p><p>3.人类的理性是有限的，我们无法推导出百分之百绝对合理的结论  4.法律永远是一种平衡的艺术</p><p>5.抽象的关爱与具体的帮扶之间的距离也许比天到地都远                 6.未经省察的人生没有价值</p><p>7.承认自己的无知，乃是开启智慧的大门                                            8.真正的爱是要用时间、真心、责任，用你的牺牲去守护的</p><p>9.一切有意义的知识，最终都是为了行动                                            10.海量的朋友带给人的可能也是没有朋友的孤独感</p><p>11.抽象的人永远无法代替具体的人，愿我们能够走出这种习以为常的伪善，在每个岗位中勤勉度日，不负所托</p><p>12.不悲伤、不犹豫、不彷徨</p></blockquote><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>12月份，我爸来了一次上海，我带他做了一次体检，带他在上海转了转；没有待很久，我爸回家之后的那天晚上，没有办法描述当时的心情，总之非常难过，我真的希望能留在父母身边，然后就我们仨还有叮当旺仔这么过一辈子；</p><p>朱书记找了我一次(蛮开心书记能记得我的)，发给我关于校友会的活动，但是我没回去参加，因为工作比较忙；其实也不完全是因为工作忙，还有就是回徐州的路上路过宿迁，二过家门而不入，太难过了；2025年必须得回去一次见见老师们；</p><p><img src="https://imgs.myan.run/i/2025/01/04/12e1mt5-2.webp" alt="e3edb15868f649ac22b320800308375b"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>希望2025年，能够找到让我快乐的事情，希望大家健康快乐，最重要的是我父母还有我的小狗都能平安健康快乐。</p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAN报文</title>
      <link href="/posts/1212402093/"/>
      <url>/posts/1212402093/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直都不会根据CANDBC的LAYOUT写结构体，每次接到需要修改结构体的需求，都是应付先把任务完成；这件事一直是我的一个心病，因为我根本不懂原理，非常难受。趁着这次客户的DBC原始数据是Intel模式，把这些知识搞清楚。</p><h2 id="大小端"><a href="#大小端" class="headerlink" title="大小端"></a>大小端</h2><p>在计算机科学和技术中，大小端是指在存储和传输数据时字节序列的顺序；</p><p>计算机中的所有数据都以二进制位的形式进行存储，并且每8个二进制位组成一个字节；因此，一段数据可以看作是由若干个字节组成的；而字节序列则是由多个字节组成的二进制数据，在存储和传输数据时，字节序列的排列方式会影响到程序的正确性、可读性以及跨平台兼容性等问题；</p><p>大端模式是指将高序位字节存储在起始地址，而小端模式则是指将低序位字节存储在起始地址；对于一个四字节整数0x12345678，大小端的存储方式如下所示；</p><div class="table-container"><table><thead><tr><th>地址</th><th>0x1</th><th>0x2</th><th>0x3</th><th>0x4</th></tr></thead><tbody><tr><td>大端模式</td><td>0x12</td><td>0x34</td><td>0x56</td><td>0x78</td></tr><tr><td>小端模式</td><td>0x78</td><td>0x56</td><td>0x34</td><td>0x12</td></tr></tbody></table></div><p>在大端模式下，高字节存储在低地址，低字节存储在高地址；在小端模式下，低字节存储在低地址，高字节存储在高地址；</p><h2 id="位域"><a href="#位域" class="headerlink" title="位域"></a>位域</h2><p>C 语言的位域是一种特殊的结构体成员，允许我们按位对成员进行定义，指定其占用的位数；位域总是从低位开始，高位结束；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint8_t</span> bytes[<span class="number">8</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint8_t</span>  CAN_BrakeMode  ;</span><br><span class="line"><span class="type">uint16_t</span> Front_BrakeForceReq;</span><br><span class="line"><span class="type">uint16_t</span> Back_BrakeForceReq; </span><br><span class="line"><span class="type">uint8_t</span>  CAN_Touchpoint ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">uint8_t</span> CAN_Prefill   :<span class="number">4</span>;</span><br><span class="line">   <span class="type">uint8_t</span> CAN_ParkingMode   :<span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint8_t</span>  CAN_Parking;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;CAN_HMI;</span><br></pre></td></tr></table></figure><p>如上面代码所示，<code>CAN_Prefill</code>占据八位中的低四位，<code>CAN_ParkingMode</code>占据八位中的高四位；</p><h2 id="CAN报文位序与字节序"><a href="#CAN报文位序与字节序" class="headerlink" title="CAN报文位序与字节序"></a>CAN报文位序与字节序</h2><p>CAN报文的位序为大端模式，即高位存储在bit7，低位存储在bit0；而CAN报文的字节序可以分为Intel模式(小端)和Motorola(大端)两种模式；CAN传输的顺序是Byte0-Byte7，bit7-bit0，这个传输顺序应该是CAN2.0的标准(为什么是应该，因为我自己没看CAN2.0标准，网上这么说的)；</p><h3 id="Intel模式"><a href="#Intel模式" class="headerlink" title="Intel模式"></a>Intel模式</h3><p>Intel模式是小端模式，在跨字节时，低位存储在低字节的低位，高位存储在高字节的高位；对于一个数据0x3E8按照英特尔模式存储，存储数据的顺序如下图所示(存入下图蓝色占据10个bit的变量中)，0x3E8的二进制为001111101000；如果将存储方式的数据拼凑成我们正常的书写顺序，需要将Byte3的bit1和bit0移至Byte2的bit7前面，即是0X3E8的二进制；</p><p><img src="https://imgs.myan.run/i/2024/08/10/11d07zt-2.webp" alt="image-20240810225914841"></p><p>因此当通过上图的变量向MCU传输0x3E8数据时，CAN传输的数据为0xE803(CAN传输顺序决定如此)；由于我使用的是NXP MC9S12ZVM芯片，是大端存储，因此，MCU在接收到这个数据时，需要对数据进行处理；下面是接收这个CAN信号时的结构体，LOW的数据为0xE8，High的数据为0x03，要将这两个数据拼凑成0x3E8，应该这么处理<code>Pressure=(uint16_t)((((uint16_t)CAN_HMI.High)&amp;0x03)&lt;&lt;8 + ((uint16_t)CAN_HMI.Low)</code>，这样才是我们需要的数据；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint8_t</span> bytes[<span class="number">8</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint16_t</span>  rr1;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">uint8_t</span> LOW   :<span class="number">8</span>;</span><br><span class="line">   <span class="type">uint8_t</span> High  :<span class="number">8</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint16_t</span>  rr2;</span><br><span class="line">        <span class="type">uint16_t</span>  rr3;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;CAN_HMI_t;</span><br><span class="line">CAN_HMI_t CAN_HMI;</span><br></pre></td></tr></table></figure><p>在我对此一无所知的时候，我试图寻找一种通过位域的方式能直接读取Intel模式的数据，而不需要对数据进行任何处理，当然均以失败告终；当跨字节时，将Intel模式的数据拼凑成我们正常书写的习惯的方法为将高字节的数据移至低字节高位的前面即可；</p><h3 id="Motorola模式"><a href="#Motorola模式" class="headerlink" title="Motorola模式"></a>Motorola模式</h3><p>Motorola模式是大端模式，在跨字节时，低位存储在高字节的低位，高位存储在低字节的高位；对于一个数据0x3E8按照英特尔模式存储(存入下图蓝色占据10个bit的变量中)，存储数据的顺序如下图所示，0x3E8的二进制为001111101000；如果存储方式的数据拼凑成我们正常的书写顺序，需要将Byte2的bit7-bit5移至Byte1的bit0后面，其实Motorola模式的数据很符合书写习惯；</p><p><img src="https://imgs.myan.run/i/2024/08/10/12w0255-2.webp" alt="image-20240810235151498"></p><p>由于我使用的是NXP MC9S12ZVM芯片，是大端存储，CAN的位序为大端模式，Motorola模式又将字节序定义为大端模式，因此可以直接通过位域的方式获取数据；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">uint8_t</span> bytes[<span class="number">8</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">uint8_t</span> TEST1   :<span class="number">5</span>;</span><br><span class="line">   <span class="type">uint8_t</span> TEST2   :<span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="type">uint16_t</span> LOW   :<span class="number">5</span>;</span><br><span class="line">   <span class="type">uint16_t</span> PRESSURE   :<span class="number">10</span>;</span><br><span class="line">   <span class="type">uint16_t</span> High  :<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">uint8_t</span>      rr1;</span><br><span class="line"><span class="type">uint16_t</span>  rr2;</span><br><span class="line">        <span class="type">uint16_t</span>  rr3;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;CAN_HMI_t;</span><br><span class="line">CAN_HMI_t CAN_HMI;</span><br></pre></td></tr></table></figure><p>因此直接<code>CAN_HMI.</code>PRESSURE的数据即是我们需要的数据；</p><h2 id="CAN报文的数据处理"><a href="#CAN报文的数据处理" class="headerlink" title="CAN报文的数据处理"></a>CAN报文的数据处理</h2><p>我们经常会对CAN报文的数据进行加减乘除运算，那么做完加减乘除运算后的数据在传入MCU后会变成怎么样的数据呢，以下图的数据为例；</p><p><img src="https://imgs.myan.run/i/2024/08/11/b1d07-2.webp" alt="68caf985ef67efc56da49842f16d35d"></p><p> 通过TSMaster将上图的变量设置为1时，MCU接收到的数据为20，即将<code>(1-(-5)/0.3)=20</code></p><h2 id="Simulink"><a href="#Simulink" class="headerlink" title="Simulink"></a>Simulink</h2><p>如果实在是不想自己写位域，可以通过MATLAB的Simulink模块自动生成；</p>]]></content>
      
      
      <categories>
          
          <category> 汽车电子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CAN协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>告别</title>
      <link href="/posts/2227046661/"/>
      <url>/posts/2227046661/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="4d63c719f8f99c91a49460a9e2622a4a2b1ad4e665449805ea0bb7407e89078b">7a62b715975494b3f39b582cff78fdaad737051d472f5f1e61efea2a13b76480fc848fe87b393957d2af642d8093b7ef5a5960d333d61d8cf628d58bc795e9382e3ae3315408033234dafa594773bcaea868946123dc2e13d948f91f5607ad10797346222473c7553225cd5ab7f20079cdd5447c9ae9804759668a4eff86fc6042287633220be8fb4bc22c469db7d55987c6e0957e1686d02d56df08f6575d423e017c06972b4fb4fd69c4f02c572e76802a6062579f7ccfa72b584c14a29865159cefc0f5543b21b657a3bd6f402d20124d4a2966aaa42089a3defb2949610bc40ac76fe403ccc9d362d96a3761ee1fe3d6646f7e1b71bbd244dfdc13ba7f9d5c4bc710e180ca565bdcafef7f83a8af97b9edc13b4da7bfaf50e2d6d885a56da215508c922c02a7dd4e3ad188de6615fa1a51ca70e470269688c1d467a5b0f2aeaf75a57722f5c2dcfa8cedde9cebe384a883e0c065024bd6afa759f98c1020139c369889b4335177765130d2a20fe11bf83c51cc27b86be7cdab7ada532f0d7d709d99b4ca56f18c27efff3852fd92745a2cb74afa5c72fcdab72c84dde5ad4182ff7c505303172214ba7b882a7c781d6ce3355b270fc816ce82f31a755a5af806e143229e280d9c192dbb0d7ca1661703397c3de3ace474dc876ff74f7c07d224ef08c6b9ac77bdfe7731c5093590ef0922ab2c1c778528e2a26d172f3c40f1f7b2a648389b534983d1035fb2b039034f8c6fb760af81ae480e37a87d30f7faa363af23f65bbe99b6cf9561ef29582f0c9ab9413c6a7f74bcffe65a1245d70e067b081076f13fb077cdea2d20ad8ae654797fccda00e691e1449e1409b0ce6e4b84519d7f353f638e5e02e08e47849d037e164468d07156056dad558a3ab03e7381720d278060e3cefa0ae3f98a1f3d3dad77fce7b7e8755f154dfc689e021110ed97ccf5de83d8f4276356dc03893330a80544b9d57dc2749ecd48889eedec756a2b5a8e7efdbde5271cab0140e6fc8a32b91443c5931de5e2defc3e512c838a7eadb4be7b67a8bfe5f55034baf1aea3450fa091cf460f258576795db0b49e4d4dd5fccf09c8160204ac16ac2454f3023501452dae5a186add55677b20a96734007b51554114b1eef528195e415d76f07a7df2cd24aff28df29fff8e5d9c558ce3d8d7d7262f8d6fbb682e3895097f7d2cf2f0725cd38cf4d71d8e4cd647ecaed02145d40f19b1648e166fa948ce3ec3b7e72116c039e28852594f75fce88a8f2ca7131b5a40a3786273c803fad02df22115f6cfe745e64af1a5873837f191e2e98afc3300b0c1202a8eea2ab63f58c2c31ca059e6ff35ef641cdf9aa1e0b73f43b26e707767d528cec36e44969c341991fad0a12a903a555bf27a652b9699ef70eae2e4a19d45d0c8f607aa064be80bce2a962fa50d245df62049fa0eab765aa9cc6c8bbd1792d52e88d3b2dad346b789ea5992179422b8982561086c1a051ba5ae8330905ce795abcf5d0bda5763fc8cb53b2b47ab47a6c239335cbabc0e2ac20725c315bed56b83a1286e1af7b7dff1c860ec335a190771fea0bc37c6eb6c6e4e5a982ea1f5fd4fcf860c86bb52feb4c19d67de79096a394d3d4e01424b826d74065eff0abf16c3b1e946963baa656b4aaf9e68e3a3dcc2c0d050f624558e98f22b062cf1bd89f2b5852d4d26cdb70648cf2670f3313857754d7fe2792a3a7dfbadecc3542fa7cac2cb19f48905f0b39b23b8a147fd14877aff1ffc28337c23fa727140ec9e22fa97ff8b64ad424d8cd1fbe33f4976cabee359717881367f657fa12742df35c733da5479d060ef1987fb495b5e8c87233b66e4854e7ef5e0aa8c38ec37d4278c67fa7ff1069cb5e1b3e97d6a7933dfb720ee4d3d532d93b50713664f0e8f36bcb09f6ff8dea2f3417440d65c72eabd165b54e76f1f5a85081d2819e65a6b6f32af8157eb61e41203f9906ea05b2e975346b05229d2857fca30226c10324972f9adef9ead7a41e6adb365cda35c6d7c7095cbc33d9c5b6bf8d8af3ffebd0150dd528b83f6ed147f402782b8bbb7004c14b3ccb93dc5fae471f1d2f5b03590d70ab5d6137973677c360c1fb4ed4d3c1fef094a3af9f346d542aa9e8d4e8e1ced31aeb6078eeb0385d925b4f9ce033be1fd59dc4c5e88bcd6a53d58fb0c5e5b667d39dabb73f726c7f333cfcc1947c849df6a0f89d6ef1a1fb83d13b7212623c10d61e951cd866e54f11ea8c060d1f2a58eb9c6a1763458e5e885cfa2c5208bc4657cea4f53e9ab786a04012c04e3cfe6fee2a81e52c757c6fa562335ce4fe5abe440020716643bada438233d482b5839bb100514b72f21c3ab7be32699b2d96b380b17badbd3394d76f835ae79b660df43c050d5f44016b073aea85c3cf70d45627b666b853b6286eb488dc86ea7cff8343c8787b155b25cf6f8dd49a31670d6bd4901ea3512ea553c97e9d0b8e923a916c5f6fdd3b4e188c1003e1f350a8ff6bfae48bc829f8d2d31e90e2bac64bbc58453da36ac11ead133cfacb8f54414ce41f768a6f4079e486077c7ab120281b3329e908abeff6af058a33d367b8fd3d905a0ab7b29453491b3c28ee85fd530d117fd7e771c79c2c5b6330f0e336051ccb2c97476e453011d9ccf5c354580d51742b788ea8c8ffec8dcd58fdafe5e8ce22cc453a37bcd9a58c776398f2c25ec06ae7f8a2b27edcddb3b5d42c879cd612fe568a88c83c6c7242e0288bf9d1caf73e8fd18c4bca24d336c8b2bbca356adb3b0de44f922c03309ad8454dfa881af6eb59040a4ecfc93e053a047e99da9b1e366ca5b0c750c9bf465b2a4d58e0f2b474a1748105c8ebfcc6efdfb7bf2610033e1a346785cc5bcfe5e8db591a20bf8d52d076cb749f931d1705bf2d97e866c66fbe35563cb934df9a1b850900d00fc72f865493fa7979125e80fd64d38b93353d2049b373d11fea6de02191d44e6150ec65a1ef9a3671e682e01b4f2fd9f2426b228f5057d2276d998f29e918c9e496c1bd43bb62c54ebbfeaa71adf9b79bc5b4146cceb5adbfcc1765e9a09dee464a0e74c3eb0304f1dea038ea4f7db327c786d980d7b5a5f29e547e3cb615927db466a1d5e57b75b9b81c9a9cb01ecad1fd5c804d833cfbe3190a0f05f52de2f6d6a20e5735cef4cb5827c16f8eb6481f2b80cb0d857111d4f73aa07aae8cf7d6507de502b892f616411bd67db376730336268936775b3b4e443370dacd342a90e4f7b1b82969d7e8097575ccc8d903a09199563c725a4f307476e3486093fa16779d8cebb94102aa4bc6ee8b9d6e96d4b22b0078365f2d5f72e092eb90f558acb68521a0de75b49fa4f7d13b43be9a91e32c905a1d09abffb47ea4c096d89b04b954f949372189e7d8734d3983eeacaf80a8076b15395531d8b337f1fa97c0fdbdde3635e7c319deac156c30121069fb7543480c1fcdd36ef37a3151b4115a5066fb66275757b1c2468f58a6faf010e3225f884574a6fc86708ab5ab1c8744fa0edb2c04012c43bbdf5ab3ef83c624e34a70f192c35c8c650fe2d35e33eddd0565f6c892763f7680f722648e4875dac009692b3924cdb588156c26f264108038a2e15ba3f488b25ed4a1439165aaba23df1e18e10c248de3b4efaacde70e5d7a86d611e1f983f7437636327d4fdcf45174649bd2e4be6f12ec6e78af58e02f4a07028bfbd2505ed7836f25bffe41af3f196cab09c7c59b6dfd4d6b916229039e101150405c7737012a55a67f1ef1723388761676e43c215f970378fced2dca7ad286307c3cc989a3b1e9ede10a102693c223a9b0ee9bcead30977ba8ea08613fc711d595c0166cd4d51016f8ef9fb62ce9ffa883794fc3e82fddfc90f6edd642a9346a0212d415c60c4f55bbd5adfcf5440ac1e26da741c05ba8d710b3ef31f947ac26a98ad46b3091827ddd189f7fc893ce4c3e5adb260c5211c7626782ebf42782c42fa09564302c4fd24076c1ac4a20b850dd5ebef6ca67e55fecb69d7b788086a01dc0edacf1b676e163462fc5364fcbad2a926e216603c2a003ef2475c9f40fd55f48fd93927e1e406be218ad291c7886a8287f0b070c77a4439e881f7e38b18bc5bf6842552fe37551a67d9d27208adf904035c84709a41befc0e98f9f8f621e4f10429f66154cfcbe18ee54a445b2ed20d2776f9f75c14f3ea0c675161b6b774a8b277cef7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑选购</title>
      <link href="/posts/3324644704/"/>
      <url>/posts/3324644704/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的电脑<code>联想拯救者y700</code>是2017年上大学买的，i5六代处理器，128G固态+1T机械硬盘，8G内存，显卡是GTX960，2G的显存；</p><p>2018年末的时候，因为被360升级系统，导致我更换过一次8G内存条和1T的机械硬盘(数据全丢了)，但是由于在保修期内，所以是免费更换的，这一点联想还是不错的；另外，我自己加装了一个8G内存，所以现在的内存是16G；电脑的其他硬件都没有更换过，但是电脑被我拆过清灰N次，重装过N次系统，还安装过苹果的MacOS系统，跟着我真的是被折腾死；</p><p>我突然想换电脑，是因为我最近发现我电脑打开的时候会咯吱咯吱响，我做结构的同事说可能是<code>转轴</code>坏了，但是我不敢拆更换转轴，因为要把电脑大卸八块，以我目前的水平和勇气不敢拆，所以我就在转轴那里涂了一点润滑脂，咯吱咯吱声音有所改善。</p><p>我同学建议我把1T的机械硬盘更换成1T的固态硬盘，但是我电脑里的数据太多了，非常折腾，不如一步到位，而且我电脑已经六年半了，在我高频率的使用下，的确可以换了；</p><h2 id="电脑选型"><a href="#电脑选型" class="headerlink" title="电脑选型"></a>电脑选型</h2><p>首先我纠结的是操作系统，是选苹果的MacOS还是Windows，因为我有iPhone和iPad所以其实我还是挺想换MacOS的；但是在我的仔细思考下，依旧选择Windows；首先我要嵌入式开发，我用的软件MacOS上没有，其次Mac自家的处理器使用的是ARM架构，可能导致很多软件即使有但兼容性极差，体验感不是很好，再者我不剪辑视频，不需要高质量的显示屏和优秀的色彩管理技术；</p><p>其次我纠结的是独立显卡，我到底需不需要独立显卡这是一个问题；我分析了一下，我玩的游戏并不需要独立显卡，其次我应该也不太会跑那种大模型机器学习，再者我应该不会有3D建模和剪辑视频的需求；还有一点我希望我的电脑最起码32G内存，但是市面上带独立显卡的笔记本一般都是游戏本，基本上都是16G内存，虽然可以自己加装内存，但是新电脑我不想那么快拆机，而且还涉及保修的问题；</p><p>在我三番五次纠结挣扎下，打算618的时候买联想小新PRO16(如果不出意外的话)；</p><p>很多朋友买电脑的时候都会找我推荐一下，下面我写下买电脑的时候需要看哪些配置，如果有不严谨的地方，欢迎指正；</p><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>首先放一张我电脑CPU的信息，如何查看CPU信息，右键此电脑，属性即可；</p><p><img src="https://imgs.myan.run/i/2024/05/12/10twn5a-2.webp" alt=""></p><h4 id="CPU主频"><a href="#CPU主频" class="headerlink" title="CPU主频"></a>CPU主频</h4><p>CPU主频，也称为时钟速率，是衡量CPU执行指令速度的指标，表示CPU每秒钟能够进行的周期性操作次数。高主频意味着CPU可以在单位时间内执行更多的操作，从而提高计算处理速度。主频的提高直接关联到计算能力的增强，使得处理复杂任务和多任务操作更为高效。主频越高，CPU在运行时消耗的电力越多，产生的热量也越大，要求更高效的散热解决方案以保持系统稳定。我电脑的主频是2.3GHz；</p><h4 id="CPU型号"><a href="#CPU型号" class="headerlink" title="CPU型号"></a>CPU型号</h4><p>这边介绍下x86架构的英特尔（Intel）处理器和AMD处理器</p><h5 id="英特尔（Intel）处理器"><a href="#英特尔（Intel）处理器" class="headerlink" title="英特尔（Intel）处理器"></a>英特尔（Intel）处理器</h5><p>我电脑是英特尔酷睿i5六代处理器，如何看出的，下面是英特尔处理器的命名规则</p><p><img src="https://imgs.myan.run/i/2024/05/12/10vxh64-2.webp" alt="image-20240512223040612"></p><p><strong>酷睿</strong>代表英特尔品牌下面向普通消费者的一个CPU系列，一般划分为Core（酷睿）、Pentium（奔腾）、Celeron（赛扬）、Xeon（至强）、Atom（凌动）等</p><p><strong>i5</strong>代表这款CPU定位中端，在其下面还有i3，在其上面还有i7和i9；同一代中，数字越大，性能越强，即在12代处理器中i9&gt;i7&gt;i5&gt;i3；但是不同代数之间，性能不能直接相比</p><p><strong>12</strong>代表这款CPU的代数，数字越大越新，上文图片可以看出来我的处理器是六代</p><p><strong>600</strong>这三位数字代表<strong>Intel SKU型号划分</strong>，一般来说数字越大说明隶属的Core系列越高级，同级别下比较，数字越大频率越高，即上文提到的CPU主频越高，性能越高</p><p><strong>K</strong>带K的表示不锁频，可以配合Z系列主板进行超频操作</p><p><strong>F</strong>带F的表示不带集成显卡，必须配合独立显卡使用</p><p>除了图片中的情况，还会遇到其他的<strong>后缀</strong></p><ul><li><strong>K：</strong>表示支持超频且内置核显的CPU型号</li><li><strong>F：</strong>表示无内置核显</li><li><strong>KF：</strong>表示支持超频且无内置核显的CPU型号</li><li><strong>T：</strong>表示低功耗版，相同型号下功耗更低，性能也差一些</li><li><strong>X/XE：</strong>表示至尊旗舰级</li><li><strong>KS：</strong>可以理解为官方超频版，提升了主频的版本</li><li><strong>U：</strong>低电压，性能弱些但功耗低，通常出现在<strong>轻薄本</strong>中</li><li><strong>H：</strong>标压，性能强，通常出现在<strong>游戏本</strong>中，例如我的就是标压</li><li><strong>Y：</strong>超低电压，性能很弱功耗非常低，通常出现在轻薄本中</li><li><strong>HK：</strong>一般使用在intel高端发烧级CPU上，可超频</li><li><strong>G：</strong>G1、G4以及G7等，G后面的数字表示核显性能强弱，数字越大代表核显性能越强，通常数字小于4的是集成的普通超高清(UHD)核显，大于等于4的是集成的高性能锐炬(Iris)核显</li><li><strong>HQ：</strong>标准电压，Q板载四核，早期的老后缀</li><li><strong>MQ：</strong>标准电压，Q插拔四核，早期的老后缀</li><li><strong>M：</strong>早期后缀M就是移动端CPU，只是为了与台式机区别开</li></ul><h5 id="AMD-处理器："><a href="#AMD-处理器：" class="headerlink" title="AMD 处理器："></a>AMD 处理器：</h5><p>下面是AMD的命名规则</p><p><img src="https://imgs.myan.run/i/2024/05/12/113fvr1-2.webp" alt="image-20240512224301939"></p><p><strong>锐龙</strong>代表AMD品牌下面向普通消费者的一个CPU系列，按照系列划分，有Ryzen（锐龙）、Ryzen Pro（锐龙Pro）、Ryzen Threadripper（锐龙线程撕裂者）、EPYC（霄龙）</p><p><strong>R5</strong>代表这款CPU定位中端，在其下面还有R3，在其上面还有R7和R9；同一代中，数字越大，性能越强，即在5代处理器中R9&gt;R7&gt;R5&gt;R3；但是不同代数之间，性能不能直接相比</p><p><strong>5</strong>代表这款CPU的代数，数字越大越新</p><p><strong>600</strong>这三位数字代表<strong>AMD SKU型号划分</strong>，数字越大，频率越高</p><p><strong>X</strong>带X的表示支持XFR技术，自适应动态扩频，除了睿频以外，还能够让CPU做工在高于睿频频率的工作状态，而频率的最大值受到散热器散热效果而变化，简单来说就是，散热器越强，频率越高</p><p>除了图片中的情况，还会遇到其他的<strong>后缀</strong></p><ul><li><strong>G：</strong>表示属于APU，内置强大的核显</li><li><strong>X</strong>带X的表示支持XFR技术，自适应动态扩频，除了睿频以外，还能够让CPU做工在高于睿频频率的工作状态，而频率的最大值受到散热器散热效果而变化，简单来说就是，散热器越强，频率越高</li><li><strong>XT：</strong>相当于X的加强版，也可以说是特挑体质版，相同型号下XT比X性能略有提升</li><li><strong>U：</strong>低电压，性能弱些但功耗低，通常出现在轻薄本中</li><li><strong>H：</strong>标压，性能强，通常出现在游戏本中</li><li><strong>HX：</strong>一般使用在AMD高端发烧级CPU上，至尊版</li><li><strong>HS：</strong>相当于H功耗略低，通常出现在轻薄全能本，性能较强</li></ul><h4 id="最高睿频与超频"><a href="#最高睿频与超频" class="headerlink" title="最高睿频与超频"></a>最高睿频与超频</h4><p>最高睿频：早期的CPU是支持超频的，玩家可以自己调整主板上的电压设置，来升压，控制超频，如果超频的过程中不小心把电压升多了，CPU会直接烧毁</p><p>睿频：后来避免上述情况的发生，当CPU过载时，官方自动帮我们超频，CPU最高超频到5GHz，这就是睿频</p><h4 id="核心数量"><a href="#核心数量" class="headerlink" title="核心数量"></a>核心数量</h4><p>核心数：核心越多，性能越强，能够同时处理的任务就越多</p><p>其实每个核心都在处理多个任务，每个任务都是切换执行的，CPU运行处理速度很快，只是感觉所有任务都在同时运行；例如4核CPU，如果运行着8个任务，其实只有4个任务在同时运行，每两个任务在一个CPU核心上切换执行</p><h4 id="线程数量"><a href="#线程数量" class="headerlink" title="线程数量"></a>线程数量</h4><p>线程数量，8核心，16线程，这是CPU的超线程技术</p><p>CPU超线程技术是一种通过在单个物理CPU核心上模拟多个逻辑处理器核心的技术；这意味着一个物理核心可以同时执行多个线程，从而提高处理器的多任务处理能力和性能，注意这里是线程</p><p>可以不去理解线程，进程，任务之间的区别，一般增加 CPU 线程数可能会提高性能，但并不总是如此，需要根据具体的应用场景和硬件条件来权衡</p><h4 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h4><p>性能越好的CPU，三级缓存越大，缓存的意思就是CPU在计算过程中产生的<strong>中间结果数据、后续需要参与计算的数据</strong>等等需要临时数据所保存的位置</p><p>三级缓存（包括L1一级缓存、L2二级缓存、L3三级缓存）都是集成在CPU内的缓存，它们的作用都是作为CPU与主内存之间的高速数据缓冲区，L1最靠近CPU核心；L2其次；L3再次；<strong>运行速度</strong>方面：L1最快、L2次快、L3最慢；<strong>容量大小</strong>方面：L1最小、L2较大、L3最大；CPU找数据的顺序为L1→L2→L3→内存</p><p>Intel的CPU核心的缓存是多核共享的，而AMD的缓存是单核独享的</p><p>核心数与线程数量以及三级缓存可以在任务管理器中查看，如下图</p><p><img src="https://imgs.myan.run/i/2024/05/12/127j9ux-2.webp" alt=""></p><h4 id="内存参数"><a href="#内存参数" class="headerlink" title="内存参数"></a>内存参数</h4><p>假设支持的最大内存128GB，则内存最大不能超过128GB</p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>内存的代数：内存主频和CPU主频一样，用来表示内存的速度，它代表着该内存所能达到的最高工作频率</p><ul><li><p>DDR：133MHZ、266MHz等频率</p></li><li><p>DDR2： 533MHZ、800MHZ等频率</p></li><li><p>DDR3： 1066MHz、1333、1600等频率</p></li><li><p>DDR4： 2400Mhz、2933Mhz、4300MHZ等频率</p></li><li><p>DDR5： 6400MHz等频率</p></li></ul><h5 id="加内存或者说升级内存的注意问题"><a href="#加内存或者说升级内存的注意问题" class="headerlink" title="加内存或者说升级内存的注意问题"></a>加内存或者说升级内存的注意问题</h5><p>买同品牌同型号同频率的、最好还是同电压的；如何知道自己的内存型号：拆机直接看、安装鲁大师软件进行硬件检测；有的内存是焊在主板上的，那是没办法更换的；我电脑加装的内存条是8GDDR4</p><h5 id="内存颗粒"><a href="#内存颗粒" class="headerlink" title="内存颗粒"></a>内存颗粒</h5><p>其实就是内存中的芯片，内存的存储能力就靠它；4G的内存，如果有8个内存颗粒，那么每个内存颗粒的空间大小为4*1024/8=512MB</p><h5 id="内存双通道技术"><a href="#内存双通道技术" class="headerlink" title="内存双通道技术"></a>内存双通道技术</h5><p>当我们有两根内存时，就可以使用到双通道技术，一块数据可以分两部分写入到两个内存中，速度更快，效率更高</p><h5 id="MYAN的建议"><a href="#MYAN的建议" class="headerlink" title="MYAN的建议"></a>MYAN的建议</h5><p>现在市面上基本都是16G的内存，我要求我电脑最起码32G，是因为我要写代码，其他小伙伴其实16G是足够用的，但是就是担心以后软件变得越来越臃肿，特别占内存，可能16G不够用，所以买电脑的时候要考虑，后期能否自己加装内存条</p><h3 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h3><p>硬盘分为机械硬盘和固态硬盘，下面介绍下区别：</p><p><strong>工作原理</strong>：</p><ul><li>机械硬盘：机械硬盘使用旋转的磁盘（盘片）和移动的读写头来存储和读取数据。数据通过磁性记录在盘片上，读写头在盘片上移动来定位和读取数据</li><li>固态硬盘：固态硬盘使用闪存存储器来存储数据，其中包括 NAND 闪存芯片；数据以电子方式存储在芯片中，没有机械运动部件</li></ul><p><strong>速度</strong>：</p><ul><li>机械硬盘：由于其机械结构的限制，机械硬盘的读写速度相对较慢；通常，机械硬盘的平均读取速度为每秒几十到几百 MB</li><li>固态硬盘：固态硬盘没有移动部件，因此具有更快的读写速度；通常，固态硬盘的读取速度可以达到每秒几百到几千 MB</li></ul><p><strong>耐用性</strong>：</p><ul><li>机械硬盘：由于其机械结构，机械硬盘对物理冲击和震动比较敏感，容易受损；此外，机械硬盘的读写头接触盘片时会产生磨损</li><li>固态硬盘：固态硬盘没有移动部件，因此比机械硬盘更耐用，对震动和冲击的抵抗能力更强，也不容易受到磁头磨损的影响</li></ul><p><strong>功耗和噪音</strong>：</p><ul><li>机械硬盘：由于机械硬盘需要旋转盘片和移动读写头，因此功耗较高，且会产生一定的噪音</li><li>固态硬盘：固态硬盘不包含移动部件，因此功耗较低，并且没有机械运动产生的噪音</li></ul><p><strong>价格</strong>：</p><ul><li>机械硬盘：机械硬盘的价格相对较低，是成本较低的存储解决方案</li><li>固态硬盘：固态硬盘的价格相对较高，但随着技术的发展和市场竞争的加剧，价格逐渐趋于合理</li></ul><p><strong>硬盘接口</strong>：SATA、mSATA、SATA Express、M.2 （具体分为：B-key &amp; M-key）、PCIe、U.2、SAS接口(服务器使用)</p><p><strong>硬盘总线</strong>：SATA、PCIe、SAS(服务器使用)</p><p><strong>硬盘协议</strong>：IDE（淘汰）、AHCI、NVMe、SCSI</p><h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3><p>显卡用于图像处理，渲染图像；显卡分为独立显卡和核心显卡</p><p>独立显卡：</p><ul><li>独立显卡是一种独立的图形处理器，通常由AMD或NVIDIA等厂商生产</li><li>独立显卡有自己的显存和图形处理单元，可以独立于CPU进行图形处理和渲染</li><li>独立显卡通常性能更强大，适用于对图形性能有较高要求的任务，如游戏、视频编辑和3D渲染等</li><li>独立显卡通常价格较高，功耗也较大，需要额外的供电和散热系统来支持</li></ul><p>核心显卡：</p><ul><li>核心显卡是集成在CPU或主板芯片组中的图形处理器，例如Intel的集成显卡</li><li>核心显卡与CPU共享系统内存，没有独立的显存，但能够利用系统内存来进行图形处理</li><li>核心显卡通常性能较弱，适用于一般办公、网页浏览、多媒体播放等日常任务</li><li>核心显卡价格较低，功耗也较小，适合于轻度使用和笔记本电脑等轻薄型设备</li></ul><h5 id="显存"><a href="#显存" class="headerlink" title="显存"></a>显存</h5><p>与计算机内存相似，显存负责存储待处理的图形信息，以支持图像处理、视频观看等操作；例如我的GTX960显卡的显存为2G</p><ul><li><strong>显存容量</strong>：随着图形处理需求的增加，显存容量也在不断扩大，常见的有4GB、8GB、12GB、24GB等规格</li><li><strong>显存频率</strong>：显存工作频率，以MHz（兆赫兹）为单位，反映显存处理数据的速度。频率越高，处理速度越快</li><li><strong>显存位宽</strong>：指一次能传输的数据量的宽度，类似于公路车道宽度。位宽越大，一次能处理的数据量就越多，显著提高显卡性能。常见位宽包括64位、128位、192位、256位、512位等</li><li><strong>显存带宽</strong>：显存带宽=显存频率×显存位宽/8。位宽和频率共同决定显存的数据传输能力</li></ul><h5 id="帧率（FPS）"><a href="#帧率（FPS）" class="headerlink" title="帧率（FPS）"></a>帧率（FPS）</h5><p>每秒显示帧数，是衡量视觉流畅度的重要指标；肉眼观感流畅的最低标准为每秒24帧；然而，现代电影通常不低于每秒30帧，而游戏和高性能显示器可能支持60帧、90帧、120帧等更高帧率；显卡输出90FPS，但显示器仅支持60FPS，将导致30帧丢失，也会影响观看体验</p><h5 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h5><ul><li><strong>1080p</strong>：1920×1080分辨率，是数字电影成像技术与计算机技术结合的产物</li><li><strong>2K</strong>：2560×1440分辨率</li><li><strong>4K</strong>：4096×2160分辨率，以及非标准的3840×1920分辨率也被归类为4K</li><li><strong>影响</strong>：分辨率越高，图像文件大小越大，对显存容量的要求也随之增加</li></ul><h5 id="其他重要组件"><a href="#其他重要组件" class="headerlink" title="其他重要组件"></a>其他重要组件</h5><ul><li><strong>CUDA核心</strong>：显卡内的处理器核心，数量越多，处理能力越强</li><li><strong>显卡接口</strong>：包括VGA、HDMI、DVI、DP等，不同接口支持不同类型的视频输出</li></ul><p>选择显卡时，应综合考虑显存容量、频率、位宽等因素，以及支持的最大分辨率和帧率，以满足特定图形处理需求</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>618我打算买的电脑是联想小新PRO16，32G内存(DDR5，板载内存不支持加装和替换，双通道，5200MHz)，1T固态(M2接口，传输总线为PCIe4.0，数据协议NVMe)，CPU是i913代标压处理器(频率2.6GHz，睿频可达5.4GHz，14核心20线程)，无独立显卡只有核显；</p>]]></content>
      
      
      <categories>
          
          <category> 电脑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电脑选购 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年终总结</title>
      <link href="/posts/3261260857/"/>
      <url>/posts/3261260857/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="9397008b66dc69dcde2f1a58f81dcf12fb88c53f794232ce7c948baf22430110">7a62b715975494b3f39b582cff78fdaa4700579ba1adc5694d1060aa0ef8b5ccdb4a1de252b85ca716a85da92e940918e4c3051ce077f53a193c3b08fdfedbddd63ec25e7b2706870677855f3f097b974a4d978623d18128e691b97ed8187806df9470d3db94a95d1214bea72ad21f001f4fa870bb416c4cc2bf7893fd383b2711d06c0213a18762be0b98d0d109a24e3325c52b722481888af4e553aaed9f2b17df7f4b1d2c460a5eeb31251ed4b69453bd880950dd7e51b844a057d10403c7b5a2958b4fd8834179b39362d912ddd14c5c1774ee8bc7a0fbfdf00b7c8d0485685306abd901f7a7a4db27f7a1bfc540dc0d86b2f87bd7d781c189948b3eae1f50b2aa9e8882dd6dfcd19c3c852b8cfaff67eb0b788edc6a20f03f30e0b6604e435ad244cd9cf242ce7b449ba80f1b49a956f774b8feb65875fff59c6241568124434b897b90795a445b19b0293430911f12e8727840765423e33413bae528401f77693d481f0b5f74f5a70b5b6b5af5385fea6aa11149bce7f1541274180c8eca14e73e496ff9765de3839012ac1727a6f3eee93b5a085f9b3f23adb0aa78a1b8834176da1301990598119ce5f3892041bddd5ed5590bd3e8d5f87794566f6d205260d54633ea2c570599b0285ea0f4be65577265657feb69fd2681dbc525b5d9bd94728807a55bca1deb369b6f49a9164c587cb7fd8afb70582742072835ae57b378f2e5cf0f002e5d2ea102407e0e20c942d6b042a66ebfadc9fb8fb545b950b39478e290e975ce839f05d1bc870922d3b37521d1e708cbc221de84477760b56a98046e306d58f0e0cb37c4ded485094865b1d2402366277b568063812cf43771a449bb962da07df5ba3156214b94692becd11e855eee3c658cc86e40092973a95f56afedd4652344aa96d7a06377054a4cee92835c488dd5eab58b7c896a2ea085d723c725acd66c327f4e9412ddb7fd49ab92a91c0d5d48560c828ca29a5ef2f8fe5bef35825975d01fa7317e75ece98611f1cfdf5fdfc8294097e5b81f41cea68bd31ded8be685c189fcd966f8b77578ae71a6bcb93024ff2280f3e7c3614670459e4354f742c680cb8f28a59b212d0ac444da997c9e43dd7333a62b94e7f065fbe3134bff1ba0f4f87a53e58bf418b806de6ff5f98fac1adc4eb46729fa8a19a7197335396ce2efc3bc2861830ded48d3e8eb8e909891d110c22b1fdfe85d8fdbf08531f040f623f1748425e4656b258f88daab6378fcf79548f6f2a495a66607fff9a4ef2ecdc780c6faf72369e42bfd6b88890d4bf5dc549d82770468e9003e0def63ce6769b6967cd6b2d9d27a399b68b31a2bdb8549e0d8dd887eb2e73b8b7b3085a3037799f760e6869a15a76fdc545ea983671823a8be57e5ffc802665940b9937e3277391d9184e700af3f427b6561feea86b63da6769b7088727ebcbb582031da1bc36905b1ccf294ddcaf843604a5ff2343e721f3b02f75139ca2e8e081f4d911f1875289791a7dd655fb3b278ebb9a88c6665de762095cb174c9b697bb85baae0b3ae4fc68528ede24cd44a6c2dde3f879ec1040a6c54798dcb630bfe1b6b49d51bfd87fd2091f752aba0d2abe4c92aae21ed53e59135ccbb17bc6c381516231f3b2fe7a4e3c198b11026c8b2d4cf06ba965f294186f04aa966b83369456ec9e55a425f2d7a0124553ef2f5f6da208e7150d79da5a8d2722c3fcb79cf69d3b7fcd9e9b0f665d4f9db35ffb816da0bdacec6806a4706e42d3d65551d1d19efad2ce978d860a4ff813da63d16d46c39c1df6a186b1e9bded39b5733cf1c1d3bab2a3d38602ea55fb5cc09fc1e15c7b1fdfdd720f40034aa9cacc3197064c5e509f5d6fd5bd6583a1477153983b508619e4133a01391401038753464f876d4629ebecd8097538d07ceb7820f0d14fb2887e8b19cd3e9184e65fa01d1c96ef27e94b5eebb088dd0c62b7fff104b41bb5e3a376a2ef05f9b247f57fbee3155787990b5779c8acc6d39d0242ebec4686549793e9b4a64c4d21e2419f482e525f04a91026c8a5956f3dd445848cb028fbf8f727a5a5d135916ba3138f8199eccfae20bf5d7ecff4052c39caf50b688e7c8b8ba220e92487f05408e1850ef58972b5276d642832031155c1462e1a91510a1149f6899a4ab9630bf02fc8b57ce5a932b4524f5ba8a1930647852aae48b7fe47d3466545658cd01f958f728dcf6d843cfb2549b905c29166d2c4123f0437232747016c3bf25a9b52e74839ea986bf935f7b90d99b2691c90e2b012608a049d6b7e4bf927e5a70bb5e7a62f61e1dcbabc518c9d8bfc029c9b2c71f3d64a38766e78fa146a81c9c290ecaa49a4585303d8d6fc0e138842a207e9a967f6eac4bd586c9b43e90ebeabb40c25641dbe7a7a4b4084060dfb2c9035c12e8aeb6baba0a5a9e071ab7d8bb044530a5002bc19c558f8973dd9eb4fbd02a4b8df345ade3931abebf4bd0c45a031cd0e4937b026610e9672d929a2bdb1b61ccf9112cb46cb26d12fe81ee31ad0a7308f0d838a09a4a3918fe02b040e46a7139c126329f86ed2f90a400411d22fb84b45954114b89202ccf662cfd43eaad7cc106c120ce2be10c0378acf47c005d31dec969b6c77996a4f63b890cfce53c6e3c7da6b955762a88d035659297c26d2b6970f15e51adfdf052a4bdd671ed9b51ccc6c6d2c21fa88e1e326e10ce944f54fbf9fc59e983d0d020a47445bc585a5818a9a581c66efa7b05b964c8629130ede2a6f066182573f06872c50ad64fd275d3919a40180732e33b17f0a3d17d7ef1f971e5d783f01a0eac6a6b60c2e4f9a5d7e99507087c308114ef5a8435a23285285adedc4c3787fb4d78babcf6411fb80be646c93a597fa046dfcb64f4474e64c181bb9fff536a42d87d73d223fc73684918f2ab3b8abac2f67b44a5ccaada8fe529f902d744017789f15eeca9d6c09afaaca1eab2330d820c8bd77492b37531f0c6a6ba0af6fda27f7dda1351912d1b315513d022cd570b6f19aac9c7a8fd6d81d94d96b18e01a3dd1ef8aabd0f8fe88a0534d86dc10713f53117cd4ad7679a4eab3a19b65fea1ab20d13d80fecccb747846214bbe19609433406e27830581d7759ac0cbda118e1169034a1c5ee499510216c4aa0e96fb48582e0a2960d801f62c55a55b046f91344c875569e407ed3e8595fa29eca0b4eeee99401433363d8c8e23f684d5933943bb6d51ac039bb48ad031bdebe8b15e776b5dc607fd85d0bddfffa476bfb83dd930f482f06d44a72fa404d443c67bc1a5e184b1ac14f6ac9bbb3fe0c5d5819f17ce8da62f8f36f57c647643e5aa873122444121b84657583dfe85fe809d1e37ac48d0befcc1ae0366f16f2443be025eec2629fed3e277697a7bd133607e0ac0ceff9ed7f37e3dbb9e2e14f1563adde1daa3c20e17315cd220def2137d5657fa5592b3f0a5ac24e2c46ecce103609b5811767862f0ab5cd39375596d360f028c1eed5387695ac2d442b18fab9df358e7ccbb097e462d7c46c3f353f259edcfc84be2527023b3d90c8cbd94adb3764de95edf8aca6e8573a80900fe8d2026f7b16b955b1f7c9657ffa328cc3d1e0ed922dfca55df8642551ea466e27f47ee6fee8bd759d1d38fde80da1799a8b875f496c2ab1751aab52a8f53c4887882334166b03bbb95c4cec2748150e3f9c93b1a554c6e6f9b0fb3ed1abd7cb02b95b4d4d4444c99d4ec72c909ae6275b5fbc446176e49358d2ee3e4a43a6f670709e1678acc29171d5b8f0a39624d20fb6871309268653b11682a62f18f3e4cb78f95a1eb49fc4b35bb06cb3df9d7ea1b7fc58d514ce12a677097ef6e284087faf3f05ba0358537654f0fb36d42c091b6b35cbc0ae55415f9c609285d27619f28c0d4d1c28cbd743faaf4891487e0557894758af0ae4c8584eafaa3ff4e5094bf18f940afb79573ff48fda060f196e0ca9300423d441c4273991d4bb2e0ed567dd25b459001b180ecac465b2b2d5760739f69c04cf8b99142e37496e057f956fb1e0e0518dde79be9b19d127720f0aa7d24005544242f12f6ac85d68ecf3b7a822164fee6aadae6038cb2091b1cf6ee91f81cdaf66a338a850f2c47ac4438f36b584ceffbce473e293d68596db0da7eb5c5361706f7ced8864e145aa740cdc13534ea22fa2e1461644925e36e63522f70c8eba4737268facfd09f514169e03c172f725e93b50927c44f609aef6fd5fbd626e176bb3b464054fde548b100220c189236c7ac456a5d2743e1b5d718b8d490038f432803fcd6221812f8a541568d2639c72b69be9b0dc1dc554a9a005cf6e4ba422d4fc5c01ccc61d4c0870bba594dfe153aa7ec77af1764140c5189ebe32ee4899bf2733444866c15617189c70a735c5419f12564f2d8c0ed84922d4d824970157ef410bf5033ce1357141539ca691f631c05f29dd79faed3e50986776999a09749ff80bce62fc8a4b1ee122358230a61e4d881d7f30ec1a3ffe2dcee08d8473e0edbfd0582e248848b845c4545f6f534d66cf33675aa2572ef9c07d94d0cb671b40cc0ca6cb928c2507153b084dd27f606ca51471fafe7723de7d66cd353ccb6e1cd0d1f9b1a0ca4b22336ac96065e56473316f534e93d140993a9b9c7c37480a3d7234442dee8a1da837ce155a97cfe4c2b9ca32316daf62b17a259f89c7caa1e6578431b2aa67b10b56eb6e08282a3935cfe133c196c3c66df75416afb078920a9184afe74ae636f005e716e8614229d7c68ab270ecc75ba1be199bd9d38ae3ca354e241874db2234c8aa38a4c861183df92b2bdfe3df8d7d383ae2be2d25d5f459d2d890f0d4cd17764e5eb32a3de83cfe2b20e19a673b3bfe7c7c781a059876624928e3a76fb2bc0246a804fc658ae516180705a4b80787491c22a2391a0828bc71f9cb842921122687e7a3b7936b6f22a2ced6dbe5b6bc0227e6f78e47fa9f3dfef171edae96c6a0cf2ff0b1f1726d14364ad89c226e7f2a2ac40cc012f723bfd5a17594745c9cfe1892f9138dd6aa425c88fd28563da5d872cd2e4aef9059eb185a8e7aa22753788fb46f4e77696f4210d5e5b396149f2baac8699b881f7ba60d178a0872495242da111b933ec1ca4e0bd948fdd4d2f8a0bd280cbf4d5191d3cb96e6ed918cdf5820aa04bcf547795a41e2c0d80118d45d34fa04033cceed29451a237c150c272042763e68640fc7ffc148712c21b8a10f955b0ad0b569d560c7ad74875541d1344d96b659614423f4adb47c0801349079781b9ff73ec6161822701f1197fa6ea20e264f8006fe697933b199eab71e09fd0d1f5d440ddc4ed231461cbef9abc4cf426d374576cda0a3fc462167c6665b59e9205c44cbee86f06f70328e90cfa49d898efac1789dfb988707506723c6b60df74d697f58e3953a04d33a6cad6c01e0ad79db369a1befa7317b1534750933876ba9cc7cc51786d18ddc7171f97d194372fe0eed951f324f3525bbf59b8a3f003c09721746ef26114075641efe1ee6517286492469ca1bf69a527bc90a314f89d9b16cbbac20709b61915510be1192760882f4fe57fb5a2b652d1ef50b028f7d41a1811f018813ddea1124c2e1eb819531ee3741ca60737560ee8b86a681622816f6afb17d0ed86bfd8acb2c4b226b097125c6ef8fcb18ae28526e738c4182a43c0b26e94c44ad5d6a9f9e3483fbf06ae7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCP协议基础</title>
      <link href="/posts/1635299896/"/>
      <url>/posts/1635299896/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文参考了以下两篇大佬的文章</p><div class="tag link"><a class="link-card" title="fzxhub教程贴" href="https://docs.fzxhub.com/"><div class="left"><img src="https://docs.fzxhub.com/assets/logo64x64.svg"/></div><div class="right"><p class="text">fzxhub教程贴</p><p class="url">https://docs.fzxhub.com/</p></div></a></div><div class="tag link"><a class="link-card" title="小猫爪教程贴" href="https://blog.csdn.net/Oushuwen/article/details/132408765"><div class="left"><img src="https://img-home.csdnimg.cn/images/20201124032511.png"/></div><div class="right"><p class="text">小猫爪教程贴</p><p class="url">https://blog.csdn.net/Oushuwen/article/details/132408765</p></div></a></div><h2 id="标定协议原理"><a href="#标定协议原理" class="headerlink" title="标定协议原理"></a>标定协议原理</h2><h3 id="为什么需要标定协议"><a href="#为什么需要标定协议" class="headerlink" title="为什么需要标定协议"></a>为什么需要标定协议</h3><p>现在一款汽车、机械臂。要有灵魂动起来，主要有机械运动部分、电子控制硬件部分、电子控制软件部分。软件部分又分为软件、和参数。比如车型A，区分高、中、低三个配置，但是其实不管是硬件还是内部代码基本都一样，不一样的是一些车型参数或者配置字。通过标定就能实现车型配置的切换，体现不一样的系统性能</p><p>标定协议是汽车控制在编写程序后，部分功能实现的部分参数是需要在实车上才能确定的，当然在实车上调试过程中也需要监测一些数据才能进行调试工作</p><p>在一些需要调试较少的系统中，可以一边调试一边优化参数重新下载程序。对于汽车这样复杂系统就变得不可能。因此诞生一种标定系统。程序工程师将程序编写架构搭建好，在编程过程中需要预知那些参数需要标定(实时修改)，那些变量需要观测(实时查看)。系统程序搭建好后，标定工程师即可在实车上实时查看、调试控制器。因此诞生一种标定协议</p><h3 id="标定协议的底层实现"><a href="#标定协议的底层实现" class="headerlink" title="标定协议的底层实现"></a>标定协议的底层实现</h3><p>汽车控制器程序本质运行在SOC(系统级芯片)上，为了性能和稳定性是无GUI的。因此需要将标定工程师手中的PC作为标定的输入和输出。标定中需要实时和友好的标定软件(电脑端软件)通信。在汽车中广泛存在CAN控制器域网。自然首要选择它作为标定的通信通道</p><p>汽车控制器的SOC使用C语言。C代码中的参数值可以在RAM(初始值本质在ROM)中，或者ROM中。我们需要标定的参数如果当变量保存在RAM中，则修改后掉电就会恢复为初始值；如果存储在ROM，则不能对其进行修改</p><p>因此大佬们想了一个办法，标定的参数在SOC上存储两份，RAM、ROM中各一份。当汽车控制器上电是将ROM标定区的数据搬移到RAM标定区，程序运行时使用RAM标定区的参数，标定过程中就能实时修改RAM标定参数，当标定参数确定以后，将RAM标定区数据拷贝到ROM标定区，这样下次上电则是最新的标定参数</p><p><img src="https://imgs.myan.run/i/2023/12/25/x7pzhk-2.webp" alt="theory"></p><p>当然仅仅只支持标定软件监测的参数(观测量)直接是定义在RAM中的变量，用来实时存储程序运行的部分参数并支持发送给标定软件即可，也不关心存放在ROM的初始值</p><h3 id="标定协议规范"><a href="#标定协议规范" class="headerlink" title="标定协议规范"></a>标定协议规范</h3><h4 id="ASAP标准"><a href="#ASAP标准" class="headerlink" title="ASAP标准"></a>ASAP标准</h4><p>ASAP是几家德国汽车制造商联手一些著名的汽车电子设备制造商于1991年成立了ASAP标准组织， ASAP的英文全称是The working group for thestandardization of applicationsystems(应用系统标准化工作小组)，它的目标是使在汽车电子设备研发过程中相关的测试，标定，诊断方法及工具能够兼容并互换</p><p>ASAP3是应用系统，即测试，标定，诊断系统(MCD Measurement， Calibration， Diagnosis System)到自动化系统的接口规范。这里的自动化系统可以是一个测量仪器的指示装置或汽车的燃油测量装置等</p><p>ASAP2又称为ASAP描述文件，是控制单元内部数据描述文件的规范。 ASAP2文件用来具体描述电子控制单元内部的数据信息，包括数据存储的规范，数字量到物理量的转换规范等</p><p>ASAP1是控制单元到MCD系统的接口规范，ASAP1规范又细分为ASAP1b与ASAP1a。ASAP1b接口下包括一个符合ASAP标准的驱动程序，硬件接口及电子控制单元。因此ASAP1b接口规范保证了MCD与ECU之间的通信，不受所选通信媒介及不同ECU供应商的限制。其中ASAP1a是到ECU端的数据通信的物理及逻辑接口规范，包括通过CAN总线对ECU进行标定的协议规范</p><h4 id="ASAM标准组织及其规范"><a href="#ASAM标准组织及其规范" class="headerlink" title="ASAM标准组织及其规范"></a>ASAM标准组织及其规范</h4><p>1998年ASAM小组成立，其英文全称是Association for Standardization of Automation and Measuring System(自动化及测量系统标准化小组)。ASAM标准是ASAP标准的扩展和衍生，在新的ASAM标准中，ASAP标准 变名为ASAM MCD(ASAM Measurement, Calibration and Diagnosis)，原来的ASAP1、ASAP2、ASPA3规范在新的标准下分别为ASAM-MCD 1MC、ASAMMCD 2MC、ASAM-MCD 3MC</p><p><img src="https://imgs.myan.run/i/2023/12/25/x7to3x-2.webp" alt="total"></p><h2 id="XCP协议剖析"><a href="#XCP协议剖析" class="headerlink" title="XCP协议剖析"></a>XCP协议剖析</h2><h3 id="XCP协议背景"><a href="#XCP协议背景" class="headerlink" title="XCP协议背景"></a>XCP协议背景</h3><p>CCP协议是基于CAN的标定协议，随着发展标定不再满足于CAN通信，因此发展出XCP来支持CAN、USB、TCP/IP、UDP/IP。它与CCP具有渊源</p><p>XCP提供以下基本功能：</p><ul><li>同步数据采集</li><li>同步数据激励</li><li>在线内存校准(读/写访问)</li><li>校准数据页面初始化和切换</li><li><p>用于ECU开发的FLASH编程</p><p>XCP提供以下可选的功能：</p></li><li><p>各种传输层(CAN、以太网、USB、…)</p></li><li>快通信模块</li><li>交错通信模块</li><li>动态数据传输配置</li><li>时间戳数据传输</li><li>数据传输同步</li><li>数据传输的优先级</li><li>原子位修改</li><li>按位数据刺激</li></ul><p>与CCP2.1相比，XCP改进了以下功能</p><ul><li>兼容性和规范</li><li>效率和吞吐量</li><li>开机数据传输</li><li>数据页面冻结</li><li>自动配置</li><li>闪存编程</li></ul><p>XCP根据以下原则设计的：</p><ul><li>最小的从资源消耗（RAM、ROM、运行时资源）</li><li>高效的通信</li><li>简单的从设备实现</li></ul><h3 id="XCP消息帧结构说明"><a href="#XCP消息帧结构说明" class="headerlink" title="XCP消息帧结构说明"></a>XCP消息帧结构说明</h3><p>所有XCP通信都作为称为XCP数据包的数据对象传输。 有2种基本的数据包类型：</p><p>1.用于传输通用控制命令的数据包：CTO</p><ul><li><p>用于执行协议命令（CMD）</p></li><li><p>传输命令响应（RES）</p></li><li><p>错误（ERR）数据包</p></li><li><p>事件（EV）数据包</p></li><li><p>服务请求数据包（SERV）</p></li></ul><p>2.用于传输同步数据的数据包：DTO</p><ul><li>DTO（数据传输对象）用于传输同步数据采集数据（DAQ）和传输同步数据刺激数据（STIM）</li></ul><p><img src="https://imgs.myan.run/i/2023/12/25/x84ruo-2.webp" alt="flow"></p><h3 id="XCP协议的帧格式"><a href="#XCP协议的帧格式" class="headerlink" title="XCP协议的帧格式"></a>XCP协议的帧格式</h3><p><img src="https://imgs.myan.run/i/2023/12/25/x86hs0-2.webp" alt="format"></p><p>1.XCP帧格式由头部、数据包、尾部组成，头部尾部根据协议在不同通信方式上有所区别</p><p>2.XCP数据包包含协议的通用部分，独立于使用的传输层</p><p>3.XCP数据包由标识字段、可选时间戳字段、数据字段组成</p><p>4.CAN上的XCP来说，XCP Header和XCP Tail是不需要的</p><h4 id="头部尾部"><a href="#头部尾部" class="headerlink" title="头部尾部"></a>头部尾部</h4><p>头部尾部根据协议在不同通信方式上有所区别</p><h4 id="标识字段"><a href="#标识字段" class="headerlink" title="标识字段"></a>标识字段</h4><p>XCP数据包基本上总是以标识字段开头，该字段作为第一个字节包含数据包标识符（PID）</p><h5 id="主设备到从设备的标识字段"><a href="#主设备到从设备的标识字段" class="headerlink" title="主设备到从设备的标识字段"></a>主设备到从设备的标识字段</h5><p><img src="https://imgs.myan.run/i/2023/12/25/x88z60-2.webp" alt="pidms"></p><p>Master-&gt;Slave （上位机到下位机）总共0xFF条</p><ul><li>名称   PID范围 </li><li>CMD  0xC0~0xFF  指的是上位机下发给下位机的一些命令，比如连接命令FF，解锁，获取状态、下位机交互的命令</li><li>STIM  0x00~0xBF  可以理解为一种上位机向下位机大量发数据的一种方式，相当于反向的DAQ(数据采集)</li></ul><h5 id="从设备到主设备的标识字段"><a href="#从设备到主设备的标识字段" class="headerlink" title="从设备到主设备的标识字段"></a>从设备到主设备的标识字段</h5><p><img src="https://imgs.myan.run/i/2023/12/25/x8alh6-2.webp" alt="pidsm"></p><p>Slave -&gt;Master（下位机到上位机）总共0xFF条</p><ul><li>名称                PID范围</li><li>Response       0xFF  肯定应答，指的下位机答复上位机的命令</li><li>Error               0xFE  否定应答上位机的命令</li><li>Event              0xFD  事件，指下位机发生某事件时通知上位机</li><li>Service           0xFC  指下位机在某些情况下，需要上位机执行一些动作，你可以理解为请求上位机服务</li><li>DAQ                0x00~0xFB  //ODT的序号 很显然，就是下位机上传数据给上位机</li></ul><h4 id="数据段"><a href="#数据段" class="headerlink" title="数据段"></a>数据段</h4><p>1.对于CTO数据包，数据字段包含不同类型的CTO数据包的特定参数</p><p>2.对于DTO数据包，数据字段包含用于同步获取和激励的数据</p><h5 id="CTO"><a href="#CTO" class="headerlink" title="CTO"></a>CTO</h5><p>CTO（Command Transfer Object）用于传输通用控制命令</p><p><img src="https://imgs.myan.run/i/2023/12/25/x8cchw-2.webp" alt="cto"></p><p>1.识别字段仅由PID组成，其中包含CTO数据包代码。时间戳字段不可用</p><p>2.数据字段包含不同类型的CTO数据包的特定参数</p><h6 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h6><p>CMD（Command Packet）的PID包含0xC0 &lt;= CMD &lt;= 0xFF范围内的代码。所有可能的命令代码都在命令代码（CMD）定义</p><p><img src="https://imgs.myan.run/i/2023/12/25/x8g0oo-2.webp" alt="cmd"></p><h6 id="RES"><a href="#RES" class="headerlink" title="RES"></a>RES</h6><p>RES（Command Response packet）PID包含命令正响应包代码RES = 0xFF。如果命令成功执行，RES将作为CMD的回复发送</p><p><img src="https://imgs.myan.run/i/2023/12/25/x8q46w-2.webp" alt="res"></p><h6 id="ERR"><a href="#ERR" class="headerlink" title="ERR"></a>ERR</h6><p>ERR（Error packet）的PID包含数据包代码ERR = 0xFE。如果命令未成功执行，ERR将作为CMD的响应发送。第二个字节包含错误代码。后续定义了错误代码</p><p><img src="https://imgs.myan.run/i/2023/12/25/x8rpqo-2.webp" alt="err"></p><h6 id="EV"><a href="#EV" class="headerlink" title="EV"></a>EV</h6><p>EV（Event packet）的PID包含数据包代码EV = 0xFD。如果从设备想要报告异步事件包，则发送EV。第二个字节包含事件代码。后续定义了事件代码。实现是可选的。从设备发送到主设备的事件数据包无被确认回复，因此不能保证传输</p><p><img src="https://imgs.myan.run/i/2023/12/25/x8tf58-2.webp" alt="ev"></p><h6 id="SERV"><a href="#SERV" class="headerlink" title="SERV"></a>SERV</h6><p>SERV（Service Request packet）的PID包含请求包代码SERV = 0xFC。SERV要求主设备执行一些操作。第二个字节包含服务请求代码。可能的服务请求代码在后续定义</p><p><img src="https://imgs.myan.run/i/2023/12/25/x8uy2n-2.webp" alt="serv"></p><h5 id="DTO"><a href="#DTO" class="headerlink" title="DTO"></a>DTO</h5><p><img src="https://imgs.myan.run/i/2023/12/25/x8whv9-2.webp" alt="dto"></p><p>DTO用于传输同步数据采集数据（DAQ）和传输同步数据刺激数据（STIM）</p><p>Identification Field：可以根据PID来判断帧的DTO类型，其中包含的信息为Absolute ODT Number或者Relative ODT Number，长度固定一个字节；当采用Absolute ODT Number时，每个ODT的编号在A2L文件中都是固定的，依次递增；当采用Relative ODT Number时，每个ODT仅代表当前DAQ LIST内的ODT编号。同时增加Absolute DAQ list Number进行区分。若XCP有字节对齐要求，则需添加一个FILL来进行字节对齐</p><p>Timestamp：在主从结点间的通信中，如果因为加入网关而造成时间差，又或者因为使用无线通信，使得通信时间出现波动的情况下，同步测量中的测量时间对于主结点来说是“不确定”的。为了防止这种情况，要使用“带时间戳的DAQ”。在从结点侧，包含测量时间的时间戳的DAQ，通过DTO报文传送给主结点。而收到这个报文的主结点，可以读出所添加的时间戳来知道正确的测量时间。主节点可通过SET_DAQ_LIST_MODE命令来开启和关闭TS，如果从节点的TIMESTAMP_FIXED flag为1（主节点可通过GET_DAQ_RESOLUTION_INFO获取），则代表主节点不可以设置TS，TS的长度可以是1，2，4字节</p><h6 id="DAQ"><a href="#DAQ" class="headerlink" title="DAQ"></a>DAQ</h6><p>ECU向上位机发送数据，实现数据采集</p><p>PID包含0x00 &lt;= DAQ &lt;= 0xFB范围内的（绝对或相对）ODT数。ODT编号是指对象描述符表（ODT），该表描述了剩余数据字节中包含哪些数据采集元素</p><p><img src="https://imgs.myan.run/i/2023/12/25/x8ychn-2.webp" alt="daq"></p><p>每个ODT即是一帧CAN报文；应用中希望一个周期内采集非常多的数据（超过一帧），那么就需要把多个ODT组合起来，这种组合在XCP中称为DAQ LIST；ODT由ODTENTRY组成；ODTENTRY里存放的是数据地址与长度；DAQLIST里的ODT数量由slave决定；由于一个ODT即一个CAN报文，那么ODT里的所有ODTENTRY的数据地址加起来不能超过7</p><h6 id="STIM"><a href="#STIM" class="headerlink" title="STIM"></a>STIM</h6><p>上位机向ECU发送数据，实现数据的刷新，用于数据标定时，上位机向下位机修改参数</p><p>PID包含0x00 &lt;= STIM &lt;= 0xBF范围内的（绝对或相对）ODT编号。ODT编号是指相应的对象描述符表（ODT），该表描述了剩余数据字节中包含哪些数据刺激元素</p><p><img src="https://imgs.myan.run/i/2023/12/25/x90l29-2.webp" alt="stim"></p><h5 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h5><h6 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h6><p><img src="https://imgs.myan.run/i/2023/12/25/x9bt03-2.webp" alt="errcode"></p><h6 id="事件代码"><a href="#事件代码" class="headerlink" title="事件代码"></a>事件代码</h6><p>下表中的事件数据包代码可以作为PID = 0xFD的异步数据包发送。实现是可选的。从设备发送到主设备的事件数据包不被确认，因此不能保证传输</p><p><img src="https://imgs.myan.run/i/2023/12/25/x9dmz9-2.webp" alt="evcode"></p><h6 id="服务代码"><a href="#服务代码" class="headerlink" title="服务代码"></a>服务代码</h6><p>下表中的服务请求数据包代码可以作为PID = 0xFC的异步数据包发送。对于从设备来说，实现是可选的，但对于主设备来说是强制性的。从设备发送到主设备的服务请求包不被确认，因此不能保证传输</p><p><img src="https://imgs.myan.run/i/2023/12/25/x9fdne-2.webp" alt="servcode"></p><h5 id="命令代码"><a href="#命令代码" class="headerlink" title="命令代码"></a>命令代码</h5><h6 id="CMD-STD-标准命令"><a href="#CMD-STD-标准命令" class="headerlink" title="CMD-STD(标准命令)"></a>CMD-STD(标准命令)</h6><p><img src="https://imgs.myan.run/i/2023/12/25/x9gma4-2.webp" alt="cmdstd"></p><h6 id="CMD-CAL-标定命令"><a href="#CMD-CAL-标定命令" class="headerlink" title="CMD-CAL(标定命令)"></a>CMD-CAL(标定命令)</h6><p><img src="https://imgs.myan.run/i/2023/12/25/x9iumb-2.webp" alt="cmdcal"></p><h6 id="CMD-PAG-页切换命令"><a href="#CMD-PAG-页切换命令" class="headerlink" title="CMD-PAG(页切换命令)"></a>CMD-PAG(页切换命令)</h6><p><img src="https://imgs.myan.run/i/2023/12/25/x9jzse-2.webp" alt="cmdpag"></p><h6 id="CMD-DAQ-数据采集命令"><a href="#CMD-DAQ-数据采集命令" class="headerlink" title="CMD-DAQ(数据采集命令)"></a>CMD-DAQ(数据采集命令)</h6><p><img src="https://imgs.myan.run/i/2023/12/25/yzdihb-2.webp" alt="cmddaq"></p><h6 id="CMD-PGM（储编程命令）"><a href="#CMD-PGM（储编程命令）" class="headerlink" title="CMD-PGM（储编程命令）"></a>CMD-PGM（储编程命令）</h6><p><img src="https://imgs.myan.run/i/2023/12/25/x9lupz-2.webp" alt="cmdpgm"></p><h3 id="网络和传输方式"><a href="#网络和传输方式" class="headerlink" title="网络和传输方式"></a>网络和传输方式</h3><p>在网络上，只要能区分“从主结点发送到从结点”和“从从结点发送到主结点”，这两种类型的通信，就能够使用XCP。在“XCP on CAN”的情况下，是通过用两个CAN ID，“从主结点发送到从结点的ID”和“从结点发送到主结点的ID”进行区分。在网络上使用区分的通信并传输一些内容时，XCP使用了三种传输模式</p><p><img src="https://imgs.myan.run/i/2023/12/25/x9nb1e-2.webp" alt="transport"></p><p><strong>标准传输模式</strong>：<br>在标准通信模型中，对从机的每个请求都有一个响应。除了 XCP 在 CAN 上，不允许多个从机对主机的命令做出响应。因此，每条 XCP 消息总是可以追溯到一个唯一的从机。这种模式是通信中的标准情况</p><p><strong>块传输模式</strong>：<br>块传输模式是可选的，可以节省大量数据传输(例如上传或下载操作)的时间。尽管如此，在这种模式下，性能问题必须朝着从机的方向考虑。因此，必须保持两个命令之间的最小时间，命令总数必须限制在最大值的上限</p><p><strong>交错传输模式</strong>：<br>交错模式也是出于性能原因而提供的，在典型通讯模式中，主机在收到上一条指令的回复前不会发送下一条指令，为提高通讯的效率，交错通讯模型可以不等待回复直接再发送下一条指令。但是这种方法也是可选的，并且与块传输模式相反，它在实践中没有相关性</p><h3 id="XCP测量"><a href="#XCP测量" class="headerlink" title="XCP测量"></a>XCP测量</h3><p>按测量方式可分为异步测量与同步测量</p><h4 id="异步测量-Poling"><a href="#异步测量-Poling" class="headerlink" title="异步测量(Poling)"></a>异步测量(Poling)</h4><p>Poling不是基于DTO，而是基于CTO，对需要采集的变量进行挨个轮询；主站可以使用SHORT_UPLOAD命令从从站请求测量参数的值。这称为轮询；这是最简单的测量情况：在已接收并执行SHORT_UPLOAD命令时发送测量参数的测量值</p><p>异步测量是使用主结点发送的命令，通过指定的XCP地址来提取从结点的ECU内部的数据，并通过从结点的应答将该数据传送给主结点，如此循环往复来实现的</p><h5 id="Poling模式特点"><a href="#Poling模式特点" class="headerlink" title="Poling模式特点"></a>Poling模式特点</h5><p>1.Poling模式下的时间戳机制不能使用</p><p>2.不同测量值时间上没有一致性</p><p>3.包含2条报文（上位机请求和Slave响应），影响总线负载率</p><h4 id="DAQ测量"><a href="#DAQ测量" class="headerlink" title="DAQ测量"></a>DAQ测量</h4><p><img src="https://imgs.myan.run/i/2023/12/25/x9xgfo-2.webp" alt="DAQ_Measure"></p><p>为了使测量与ECU的控制相匹配，有必要由ECU确定测量时机，并在数据取出来后由从结点发送到主结点。这种数据通信是通过DTO来完成的</p><p>主结点在进行同步测量之前，通过命令指定要取出的数据的XCP地址，从结点在等到同步测量开始命令后，使用DTO发送到主结点。因此，在同步测量的情况下，不是通过命令和应答的组合，而是通过测量周期或事件（用来触发DAQ-list的事件在XCP中被称为Event channels），由从结点发送DTO报文到主结点</p><p>每个事件周期（Event）可对应多个DAQLIST，一个DAQ包括多个ODT List，一个ODT包括多个变量</p><h4 id="DAQ基本原理"><a href="#DAQ基本原理" class="headerlink" title="DAQ基本原理"></a>DAQ基本原理</h4><h5 id="静态DAQ"><a href="#静态DAQ" class="headerlink" title="静态DAQ"></a>静态DAQ</h5><p>静态DAQ LIST:DAQ LIST和ODT表在ECU中是被永久固定的；通过A2L文件，上位机能够获取DAQList中的信息</p><h5 id="动态DAQ"><a href="#动态DAQ" class="headerlink" title="动态DAQ"></a>动态DAQ</h5><p><strong>动态DAQ分配过程</strong></p><p>动态DAQ列表配置使用FREE<em>DAQ、ALLOC_DAQ、ALLOC_ODT和ALLOC_ODT_ENTRY命令依次完成。这些命令允许在上述限制范围内动态分配多个DAQ列表、多个ODT到DAQ列表以及多个ODT LIST到ODT。如果没有足够的内存来分配请求的对象，这些命令会得到一个ERR_MEMORY</em>溢出作为负响应。如果发生错误内存溢出，则完整的DAQ列表配置无效<br><img src="https://imgs.myan.run/i/2023/12/25/x9z4fv-2.webp" alt="DAQ_ALLOT"></p><h3 id="XCP标定"><a href="#XCP标定" class="headerlink" title="XCP标定"></a>XCP标定</h3><p>参考页（Reference Page）：可以理解为定义的逻辑地址对应Flash上的一块地址，参考页的属性在标定过程是可读不可写<br>工作页（Working Page）：可以理解为定义的逻辑地址对应RAM上的一块地址，工作页的属性是可读可写<br>激活页（Activiting Page）：就是指选择激活的一个页，比如激活工作页或者激活参考页等</p><p>标定过程：激活参考页（仅可读），读取当前的参数，比如PID中的比例因子 P，然后切换激活页，激活工作页（可读可写），可以在工作页在线修改参数，来获得较好标定值，最后，需要将优化后的P参数写入到原来参考页上，这样就完成了一个参数的标定</p><p><img src="https://imgs.myan.run/i/2023/12/25/xa5bif-2.webp" alt="calibration_page"></p><h4 id="地址映射"><a href="#地址映射" class="headerlink" title="地址映射"></a>地址映射</h4><h5 id="硬件映射"><a href="#硬件映射" class="headerlink" title="硬件映射"></a>硬件映射</h5><p>有些芯片是支持硬件地址映射的，比如英飞凌TC系列，其工作方式比较简单，就是在切换激活的工作页时，通过操作寄存器完成地址映射</p><p>如当寄存器Reg1 = 0时，激活页是参考页，逻辑地址0x000~0x200 对应的Flash中的0x100~0x300<br>切换激活页为工作页时，寄存器Reg1=1，对应逻辑地址0x000~0x200 对应Ram中的0x000~0x200</p><h5 id="软件方式-OFFSET偏移"><a href="#软件方式-OFFSET偏移" class="headerlink" title="软件方式(OFFSET偏移)"></a>软件方式(OFFSET偏移)</h5><p>通过加入一个offset偏移量来实现，还是以上面的例子为例：</p><p>激活页-&gt;参考页<br>逻辑地址 0x000~0x200 -&gt; Offset=0x100 Flash地址0x100~0x300=(逻辑地址+Offset)<br>激活页-&gt;工作页<br>逻辑地址 0x000~0x200 -&gt; Offset=0x000 Flash地址0x000~0x200=(逻辑地址+Offset)</p><h5 id="TC3xx系列Overlay"><a href="#TC3xx系列Overlay" class="headerlink" title="TC3xx系列Overlay"></a>TC3xx系列Overlay</h5><p>将数据访问从原始目标内存（“目标Flash地址”）重定向到Overlay内存（“重定向地址”）的原理如下所示：<br>数据访问Overlay使用Overlay范围（“Overlay Blocks”）定义。每个Overlay Block定义一个地址空间的连续范围，访问被重定向到该范围。每个Overlay Block都配置有以下内容参数：</p><ul><li>Overlay Block目标Base地址-要重定向的目标地址范围的起始地址</li><li>Overlay Block大小-要重定向的地址范围的大小</li><li>Overlay Block重定向Base地址-重定向的起始地址</li></ul><p>在AURIX TM中，每个TriCore实例最多可使用32个Overlay范围。Overlay内存Block的大小可以是2nx32字节，n=0到12。这使Block大小的范围从32字节到128 KB；每个Overlay Block有3个相关寄存器，用于独立配置这些参数。Overlay参数的配置如下所示：</p><ul><li>目标Base地址在OTARx寄存器中进行配置</li><li>OverlayBlock大小用OMAKX寄存器进行配置</li><li>重定向Base地址使用RABRx寄存器进行配置</li></ul><h2 id="A2L文件解析"><a href="#A2L文件解析" class="headerlink" title="A2L文件解析"></a>A2L文件解析</h2><h3 id="A2L文件说明"><a href="#A2L文件说明" class="headerlink" title="A2L文件说明"></a>A2L文件说明</h3><p>A2L 文件包括：设备参数信息、接口数据信息和 ECU 参数信息</p><p>1.设备参数信息： 描述了 ECU 的基本信息和 ECU 数据单元的一些公共属性<br>2.接口数据信息： 描述了标定系统与 ECU 通信时所需配置的接口信息<br>3.ECU 参数信息：描述了内部数据单元的详细内容</p><h3 id="A2L格式"><a href="#A2L格式" class="headerlink" title="A2L格式"></a>A2L格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">/begin PROJECT /* 表示一个项目 */</span><br><span class="line"></span><br><span class="line">    /begin HEADER  /* 描述项目信息：项目编号、项目版本、厂家名称等 */ </span><br><span class="line">    /end HEADER</span><br><span class="line"></span><br><span class="line">    /begin MODLUE  /* 描述ECU信息：一个ECU一个MODULE块 */</span><br><span class="line"></span><br><span class="line">         /begin A2ML /*描述接口：包括传输命令、DAQ、传输层 */</span><br><span class="line">         /end  A2ML </span><br><span class="line"></span><br><span class="line">         /begin MOD_PAR /* 内存的分段分页管理 */</span><br><span class="line">         /end   MOD_PAR </span><br><span class="line"></span><br><span class="line">         /begin MOD_COMMON /* 一般性描述信息：数据的对齐方式等 */</span><br><span class="line">         /end   MOD_COMMON</span><br><span class="line"></span><br><span class="line">         /begin IF_DATA /* 接口具体的参数 */</span><br><span class="line">         /end   IF_DATA</span><br><span class="line"></span><br><span class="line">         /begin CHARACTERISTIC /* 标定变量：名称、地址、长度、计算公式、精度、最大最小值等 */</span><br><span class="line">         /end   CHARACTERISTIC</span><br><span class="line"></span><br><span class="line">         /begin AXIS_PTS /* 标定变量：二维三维数据时使用 */</span><br><span class="line">         /end AXIS_PTS</span><br><span class="line"></span><br><span class="line">         /begin MEASUREMENT /* 观测变量：名称、地址、长度、计算公式、精度、最大最小值等 */</span><br><span class="line">         /end MEASUREMENT</span><br><span class="line"></span><br><span class="line">         /begin COMPU_METHOD /* 定义计算公式 */</span><br><span class="line">         /end COMPU_METHOD</span><br><span class="line"></span><br><span class="line">         /begin COMPU_TAB /* 定义原始值和物理值的映射关系 */</span><br><span class="line">         /end COMPU_TAB</span><br><span class="line"></span><br><span class="line">         /begin RECORD_LAYOUT /* 定义标定变量的物理存储结构 */</span><br><span class="line">         /end RECORD_LAYOUT</span><br><span class="line"></span><br><span class="line">    /end MODLUE</span><br><span class="line"></span><br><span class="line">/end PROJECT</span><br></pre></td></tr></table></figure><h4 id="PROJECT"><a href="#PROJECT" class="headerlink" title="PROJECT"></a>PROJECT</h4><p>一个A2L文件只能有一个PROJECT，而PROJECT中至少要有一个Module，A2L文件的注释和C语言的注释方式是一样的，支持 /* 和 // 两种方式</p><h4 id="HEADER"><a href="#HEADER" class="headerlink" title="HEADER"></a>HEADER</h4><p>这个部分主要包含项目编号、项目版本等信息，可以没有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/begin HEADER &quot;&quot;</span><br><span class="line">  VERSION   &quot;1.0.0.0&quot;</span><br><span class="line">  PROJECT_NO AUTOSAR_111</span><br><span class="line">/end HEADER</span><br></pre></td></tr></table></figure><h4 id="A2ML"><a href="#A2ML" class="headerlink" title="A2ML"></a>A2ML</h4><p>这个部分主要是描述接口数据格式。例如将XCP协议支持的某种模式全部在该部分定义出来，会在后面的接口具体的参数部分直接使用</p><h4 id="MOD-PAR"><a href="#MOD-PAR" class="headerlink" title="MOD_PAR"></a>MOD_PAR</h4><p>MOD_PAR部分管理控制器数据，最重要的信息是内存的分段分页管理会在标定时用到</p><h4 id="MOD-COMMON"><a href="#MOD-COMMON" class="headerlink" title="MOD_COMMON"></a>MOD_COMMON</h4><p>MOD_COMMON部分主要是数据的对齐方式的描述信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/begin MOD_COMMON  &quot;&quot;</span><br><span class="line">  DEPOSIT          ABSOLUTE</span><br><span class="line">  BYTE_ORDER       MSB_LAST</span><br><span class="line">/end MOD_COMMON</span><br></pre></td></tr></table></figure><h4 id="IF-DATA"><a href="#IF-DATA" class="headerlink" title="IF_DATA"></a>IF_DATA</h4><p>这块是A2L文件的主要内容。Timeout、支持的命令等等。OPTIONAL_CMD就是选择可选。指令，列出控制器支持的指令，必实现的指令不在此处。控制器是一定要实现的</p><p>这块还有DAQ的配置，DAQ类型(动态/静态)、数量，用到的事件等等</p><p>还有CAN的配置信息，ID、波特率、采样设置等等</p><h4 id="CHARACTERISTIC"><a href="#CHARACTERISTIC" class="headerlink" title="CHARACTERISTIC"></a>CHARACTERISTIC</h4><p>标定量部分，包含了被标定的变量的名称、地址、长度、计算公式、精度，最大最小值等信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/begin CHARACTERISTIC</span><br><span class="line"></span><br><span class="line">    CAL_MPC_IsCutOffFrq_f32/*Name 变量名字*/</span><br><span class="line">    &quot;CAL_MPC_IsCutOffFrq_f32&quot;/*Long Identifier（类似Comment）*/</span><br><span class="line">    VALUE/*Type*/</span><br><span class="line">    0x8014305C/*地址*/</span><br><span class="line">    Scalar_FLOAT32_IEEE/*Record Layout*/</span><br><span class="line">    0/*Maximum Difference精度(分辨率)*/</span><br><span class="line">    BSW_A2L_Ident_Float       /*Conversion Method计算公式*/</span><br><span class="line">    -3.4E+38/*Lower Limit最小值*/</span><br><span class="line">    3.4E+38/*Upper Limit最大值*/</span><br><span class="line"></span><br><span class="line">/end CHARACTERISTIC</span><br></pre></td></tr></table></figure><h4 id="MEASUREMENT"><a href="#MEASUREMENT" class="headerlink" title="MEASUREMENT"></a>MEASUREMENT</h4><p>定义观测量，包含了被观测量的名称、地址、长度、计算公式、精度，最大最小值等信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/begin MEASUREMENT</span><br><span class="line"></span><br><span class="line">    VAR_AdcInitSBC_u16/*Name 变量名字*/</span><br><span class="line">    &quot;VAR_AdcInitSBC_u16&quot;/*Long identifier（类似Comment）*/</span><br><span class="line">    UWORD/*Data type 值类型*/</span><br><span class="line">    BSW_A2L_Ident_Int/*Conversion method 计算公式*/</span><br><span class="line">    1/*Resolution 分辨率*/</span><br><span class="line">    100/*Accuracy 准确度*/</span><br><span class="line">    0/*Lower limit 最小值*/</span><br><span class="line">    65535/*Upper limit 最大值*/</span><br><span class="line">    ECU_ADDRESS 0x700094AA/*ECU_Address 地址*/</span><br><span class="line"></span><br><span class="line">/end MEASUREMENT</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">FLOAT32_IEEE：IEEE 754 格式的 32 位浮点数。</span><br><span class="line">FLOAT64_IEEE：IEEE 754 格式的 64 位浮点数。</span><br><span class="line">UBYTE：无符号 8 位整数。</span><br><span class="line">SBYTE：有符号 8 位整数。</span><br><span class="line">UWORD：无符号 16 位整数。</span><br><span class="line">SWORD：有符号 16 位整数。</span><br><span class="line">ULONG：无符号 32 位整数。</span><br><span class="line">SLONG：有符号 32 位整数。</span><br><span class="line">CHAR：字符。</span><br><span class="line">STRING：字符串。</span><br><span class="line">ENUM：枚举类型，通常用于定义属性的可选值。</span><br><span class="line">STRUCT：结构类型，用于组织多个数据元素到一个数据结构中。</span><br><span class="line">ARRAY：数组类型，用于定义相同数据类型的多个元素的集合。</span><br><span class="line">COUNTER：计数器类型，用于描述一个值在时间内的变化。</span><br><span class="line">BOOLEAN：布尔类型，表示真（TRUE）或假（FALSE）。</span><br><span class="line">RECORD：记录类型，通常用于组合不同数据类型的元素。</span><br><span class="line">CURVE：曲线类型，用于描述参数随输入变化的关系。</span><br><span class="line">MAP：地图类型，用于描述两个输入参数和一个输出参数之间的关系。</span><br></pre></td></tr></table></figure><h4 id="COMPU-METHOD"><a href="#COMPU-METHOD" class="headerlink" title="COMPU_METHOD"></a>COMPU_METHOD</h4><p>用于定义计算公式，即原始值和物理值之间的转换关系，将原始值通过相应的计算方法转换成便于用户阅读和使用的物理值</p><h4 id="RECORD-LAYOUT"><a href="#RECORD-LAYOUT" class="headerlink" title="RECORD_LAYOUT"></a>RECORD_LAYOUT</h4><p>用来定义标定变量的物理存储结构</p>]]></content>
      
      
      <categories>
          
          <category> 汽车电子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XCP标定协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCP协议指令</title>
      <link href="/posts/1283829227/"/>
      <url>/posts/1283829227/</url>
      
        <content type="html"><![CDATA[<h2 id="XCP指令详解"><a href="#XCP指令详解" class="headerlink" title="XCP指令详解"></a>XCP指令详解</h2><h3 id="标准-STD-指令"><a href="#标准-STD-指令" class="headerlink" title="标准(STD)指令"></a>标准(STD)指令</h3><h3 id="必实现指令"><a href="#必实现指令" class="headerlink" title="必实现指令"></a>必实现指令</h3><h4 id="0xFF-CONNECT"><a href="#0xFF-CONNECT" class="headerlink" title="0xFF:CONNECT"></a>0xFF:CONNECT</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xe8nkr-2.webp" alt="CONNECT"></p><p>该命令与从设备建立一个连续的、逻辑的、点到点的连接设备。在运行XCP会话期间(已连接)，此命令不影响任何XCP从设备的配置。 从设备在非连接状态时不响应任何其他命令(除了自动检测)</p><p>Mode参数</p><ul><li>Mode=0x00主机可以与从设备启动XCP通信</li><li>Mode=0x01主机可以启动XCP通信同时告诉从机它应该进入一个特殊的(用户自定义的)模式</li></ul><p>RESSOURCE参数</p><ul><li>CAL/PAG、DAQ、STIM、PGM = 1 表示该资源可用，反之不可用</li></ul><p>COMM_MODE参数</p><ul><li><p>ADDRESS_GRANULARITY_1、ADDRESS_GRANULARITY_0</p><ul><li>00： ADDRESS_GRANULARITY=BYTE AG=1字节</li><li>01： ADDRESS_GRANULARITY=WORE AG=2字节</li><li>10： ADDRESS_GRANULARITY=DWORD AG=4字节</li><li>11： ADDRESS_GRANULARITY=保留 AG=保留</li></ul></li><li><p>SLAVE_BLOCK_MODE参数</p><ul><li>1：表示从机块模式可用</li><li>0：表示从机块模式不可用</li></ul></li><li><p>OPTIONAL参数：</p><ul><li>1：表示支持类型的附加信息的通信模式</li><li>0：表示不支持类型的附加信息的通信模式</li></ul></li><li><p>MAX_CTO参数：</p><ul><li>最大CTO大小，单位为字节</li></ul></li><li><p>MAX_DTO参数：</p><ul><li>最大DTO大小，单位为字节</li></ul></li></ul><blockquote><p>注意：MAX_CTO、MAX_CTO必须始终满足下列关系： MAX_CTO mod AG = 0 MAX_DTO mod AG = 0 所有涉及从设备地址范围的长度信息都基于AG(元素)。 如果长度信息指的是数据流(XCP协议)，则它是基于字节</p></blockquote><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">FF 05 41 08 00 08 01 01</span><br><span class="line">05:表示DAQ以及CAL/PAG(标定)可用;STIM、PGM(编程)不可用</span><br><span class="line">41:表示SLAVE_BLOCK_MODE=1,从机可用;ADDRESS_GRANULARITY_1=0,ADDRESS_GRANULARITY_0=0,表示ADDRESS_GRANULARITY=BYTE即AG=1;byteOrder=1,表示MOTOROLA类型</span><br><span class="line">08:表示CTO最大字节为8</span><br><span class="line">0008:表示DTO最大字节为8</span><br><span class="line">01:XCP Protocol Layer Version</span><br><span class="line">01:XCP Transport Layer Version</span><br></pre></td></tr></table></figure><h4 id="0XFE-DISCONNECT"><a href="#0XFE-DISCONNECT" class="headerlink" title="0XFE:DISCONNECT"></a>0XFE:DISCONNECT</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xkph1w-2.webp" alt="DISCONNECT"></p><h4 id="OXFD-GET-STATUS"><a href="#OXFD-GET-STATUS" class="headerlink" title="OXFD:GET_STATUS"></a>OXFD:GET_STATUS</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xkqyag-2.webp" alt="GET_STATUS"></p><p>Session参数：</p><ul><li>STORE_CAL_REQ：STORE_CAL_REQ = 1标志表示保存校准数据到非易失性内存的挂起请求。一旦请求被满足，从设备将重置该位。从设备可以通过传输EV_STORE_CAL来指示</li><li>STORE_DAQ_REQ：STORE_DAQ_REQ = 1标志表示保存DAQ列表设置到非易失性内存的挂起请求。一旦请求被满足，从设备将重置该位。从设备可以通过传输EV_STORE_DAQ来指示</li><li>CLEAR_DAQ_REQ：CLEAR_DAQ_REQ = 1标志表示清除所有非易失中DAQ列表的挂起请求。所有ODT表项重置为address = 0, extension = 0, size = 0, bit_offset = FF。会话配置ID重置为0。一旦请求得到满足，从设备将重置该位。从设备可以通过发送信号EV_CLEAR_DAQ来指示。 如果从设备不支持所请求的模式，返回ERR_OUT_OF_RANGE</li><li>DAQ_RUNNING=1：表示至少有一个DAQ列表已经启动并处于状态运行模式</li><li>RESUME=1：表示从机处于RESUME模式</li></ul><p>Protection参数：</p><p>表示当前有哪些CMD是被SEED&amp;KEY锁着的。在XCP中，有一种保护机制叫做SEED&amp;KEY保护机制，按照功能具体分成了CAL/PAG，DAQ，STIM，PGM四类</p><p>每一类都有一套单独的SEED&amp;KEY机制（算法也可以不同），需要单独解锁，只有使用GET_SEED和UNLOCK进行解锁后，然后才能发送其相对应的CMD</p><ul><li>CAL/PAG：CAL/PAG = 1 表示该资源受保护需要解锁才能使用</li><li>DAQ：DAQ = 1 表示该资源受保护需要解锁才能使用</li><li>STIM：STIM = 1 表示该资源受保护需要解锁才能使用</li><li>PGM：PGM = 1 表示该资源受保护需要解锁才能使用</li></ul><blockquote><p>标准命令永远不会被保护</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FF 20 00 00 00 00 00 00</span><br><span class="line">20:源码表示ECU connect</span><br><span class="line">   RESUME=0,DAQ_RUNNING=0,STORE_CAL_REQ=0,STORE_DAQ_REQ=0,CLEAR_DAQ_REQ=0</span><br><span class="line">00:CAL/PAG = 0,DAQ = 0,STIM = 0,PGM = 0,均不受保护,无需解锁 </span><br></pre></td></tr></table></figure><h4 id="0xFC-SYNCH"><a href="#0xFC-SYNCH" class="headerlink" title="0xFC:SYNCH"></a>0xFC:SYNCH</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xkt3b1-2.webp" alt="SYNCH"></p><p>该命令用于同步超时后的命令执行，SYNCH命令将始终有一个带有错误代码的否定响应ERR_CMD_SYNCH。没有其他命令使用此错误代码</p><h3 id="可选指令"><a href="#可选指令" class="headerlink" title="可选指令"></a>可选指令</h3><h4 id="0XFB-GET-COMM-MODE-INFO"><a href="#0XFB-GET-COMM-MODE-INFO" class="headerlink" title="0XFB:GET_COMM_MODE_INFO"></a>0XFB:GET_COMM_MODE_INFO</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xkukwg-2.webp" alt="GET_COMM_MODE_INFO"></p><p>COMM_MODE参数：</p><ul><li>MASTER_BLOCK_MODE参数：表示主设备的块模式是否可用。如果支持主设备块模式则MAX_BS为允许的最大块大小作为连续命令包的数量(DOWNLOAD_NEXT或PROGRAM_NEXT)</li><li>MIN_ST所需的最小值，是一个块的数据包从主设备传输到从设备的分离时间，单位为100微秒</li><li>INTERLEAVED_MODE参数：表示交错模式是否可用。如果存在交错模式QUEUE_SIZE为最大数目。主站可以向从站的接收队列发送连续的命令</li></ul><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FF 00 01 00 FF 01 00 11</span><br><span class="line">00:保留</span><br><span class="line">01:主设备的块模式可用,交错模式不可用</span><br><span class="line">00:保留</span><br><span class="line">FF:MAX_BS为允许的最大块大小256字节作为连续命令包的数量</span><br><span class="line">01:一个块的数据包从主设备传输到从设备的分离时间,单位为100微秒</span><br><span class="line">00:交错模的最大数目</span><br><span class="line">11:XCP驱动版本号</span><br></pre></td></tr></table></figure><h4 id="0xFA-GET-ID"><a href="#0xFA-GET-ID" class="headerlink" title="0xFA:GET_ID"></a>0xFA:GET_ID</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xkw6zq-2.webp" alt="GET_ID"></p><p>Type参数：</p><ul><li>0：ASCII文本</li><li>1：ASAM-MC2文件名，没有路径和扩展</li><li>2：ASAM-MC2文件名，有路径和扩展</li><li>3：ASAM-MC2文件所在的URL路径</li><li>4：ASAM-MC2文件上传</li><li>128-255：自定义</li></ul><p>Length参数：</p><ul><li>指定标识中的字节数。如果length为0，则请求的标识类型不可用</li><li>数据元素是BYTE, WORD或DWORD，取决于AG</li><li>Mode=0时，从设备将MTA (Memory Transfer Address)设置为当前地址。主设备可以使用一个或多个UPLOAD命</li><li>标识字符串是ASCII文本格式，它没有0结尾</li></ul><h4 id="0XF9-SET-REQUEST"><a href="#0XF9-SET-REQUEST" class="headerlink" title="0XF9:SET_REQUEST"></a>0XF9:SET_REQUEST</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xkxur7-2.webp" alt="SET_REQUEST"></p><p>Mode参数：</p><ul><li>STORE_CAL_REQ：标记了将校准数据保存到非易失性内存中的请求。可以通过GET_STATUS获取的STORE_CAL_REQ位，该位将被从机重置当请求已完成。从设备可以通过传输EV_STORE_CAL来指示传输</li><li>STORE_DAQ_REQ：标记了一个保存所有DAQ列表的请求。目标是START_STOP_DAQ_LIST指令选择的非易失性内存。从设备还必须存储非易失性内存中的会话配置id。在保存时，从设备首先必须清除可能已经存在的任何DAQ列表配置。可以通过GET_STATUS获得的STORE_DAQ_REQ位，该位将被从机重置当请求已完成。从设备可以通过传输EV_STORE_DAQ来指示传输</li><li>CLEAR_DAQ_REQ用于清除非易失性内存中的所有DAQ列表。所有ODT条目reset address = 0, extension = 0, size = 0, bit_offset = FF，会话配置ID重置为0。通过GET_STATUS获得的CLEAR_DAQ_REQ位，该位将被从机重置当请求已完成。从设备可以通过传输EV_CLEAR_DAQ来指示</li></ul><blockquote><p>如果从设备不支持所请求的模式，则返回ERR_OUT_OF_RANGE</p></blockquote><h4 id="0xF8-GET-SEED"><a href="#0xF8-GET-SEED" class="headerlink" title="0xF8:GET_SEED"></a>0xF8:GET_SEED</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xl7q67-2.webp" alt="GET_SEED"></p><p>Mode参数：</p><ul><li>Mode=0：第一部分种子获取</li><li>Mode=1：剩余种子获取</li></ul><p>Resource参数：</p><ul><li>Mode=0：Resource=需要解锁的资源</li><li>Mode=1：Resource不关心</li></ul><blockquote><p>主设备必须在定义的顺序中使用GET_SEED(Mode=1)和GET_SEED(Mode= 0)。 如果主设备直接发送GET_SEED(Mode=1)，而不在之前使用GET_SEED(Mode=0)，从服务器返回一个ERR_SEQUENCE为负响应</p></blockquote><p>Resource参数：</p><ul><li>请参阅GET_STATUS(资源保护状态)命令</li></ul><blockquote><p>一个GET_SEED命令只能请求一个资源。如果不止一个资源必须被解锁，(GET_SEED+UNLOCK)序列必须执行多次。主服务器不请求任何资源或请求多个资源，从机将响应ERR_OUT_OF_RANGE</p></blockquote><h4 id="0XF7-UNLOCK"><a href="#0XF7-UNLOCK" class="headerlink" title="0XF7:UNLOCK"></a>0XF7:UNLOCK</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xl97jq-2.webp" alt="UNLOCK"></p><p>使用种子算的密钥来解锁从机的安全保护。种子由之前的GET_SEED序列获得。</p><p> Length参数:</p><ul><li>表示剩余密钥字节数</li><li>主机必须在定义的序列中使用UNLOCK和GET_SEED。如果之前只有一个GET_SEED，主服务器只能发送一个UNLOCK序列</li><li>如果密钥的总长度大于MAX_CTO-2，主服务器必须发送剩余的密钥字节，连续的UNLOCK命令包含剩余的键的长度</li></ul><blockquote><p>如果主服务器不尊重这个序列，从服务器返回ERR_SEQUENCE为负响应。 完成UNLOCK序列后检查密钥。如果钥匙不被接受，将返回ERR_ACCESS_LOCKED。从设备将转到断开连接状态。使用正确的密钥重复UNLOCK序列将会有一个积极的响应，没有其他影响</p></blockquote><p>Example: MAX_CTO = 8 bytes (CAN) Seed = 11 22 33 44<br>TotalLengthOf(seed) = 4 bytes Key = 43 21<br>TotalLengthOf(key) = 2 bytes</p><p><img src="https://imgs.myan.run/i/2023/12/25/xlamz6-2.webp" alt="UNLOCK_Example"></p><p>MAX_CTO = 8 bytes (CAN) Seed = 99 88 77 66 55 44 33 22 11 00 11 22 33 44 55 66 77 88 99<br>TotalLengthOf(seed) = 19 bytes Key = 98 76 54 32 10 01 23 45 67 89<br>TotalLengthOf(key) = 10 bytes</p><p><img src="https://imgs.myan.run/i/2023/12/25/xlc8sy-2.webp" alt="UNLOCK_Example2"></p><h4 id="0xF6-SET-MTA"><a href="#0xF6-SET-MTA" class="headerlink" title="0xF6:SET_MTA"></a>0xF6:SET_MTA</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xle7rb-2.webp" alt="SET_MTA"></p><p>这个命令将内存初始化一个指针(32位地址+ 8位扩展)转移指令</p><blockquote><p>MTA用于命令BUILD_CHECKSUM, UPLOAD, DOWNLOAD，DOWNLOAD_MAX, MODIFY_BITS, PROGRAM_CLEAR，PROGRAM和PROGRAM_MAX</p></blockquote><h4 id="0xF5-UPLOAD"><a href="#0xF5-UPLOAD" class="headerlink" title="0xF5:UPLOAD"></a>0xF5:UPLOAD</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xlff2n-2.webp" alt="UPLOAD"></p><p>从当前MTA开始，将返回指定长度的数据块。MTA将按给定的数据元素数量后递增</p><ul><li>根据AG的不同，必须使用1、2或3个对齐字节来满足对齐要求</li><li>元素是BYTE、WORD或DWORD，取决于AG</li></ul><p>如果从机不支持块传输模式</p><ul><li>则所有上传的数据都以单个响应包方式传输，因此请求中的数据元素数量参数必须在[1..MAX_CTO-1]范围内</li><li>如果数据元素个数大于MAX_CTO-1，返回ERR_OUT_OF_RANGE</li></ul><p>如果支持块传输方式</p><ul><li>则上传的数据在多个响应中传输在同一个请求包上</li><li>对于master，不允许有任何限制最大块大小。因此数据元素的数量(n)可以在此范围内(1 . . 255)</li><li>从设备将发送(n*AG / (MAX_CTO-1)) +1个响应报文。响应包之间的分离时间取决于从设备实现</li></ul><p>Examples: MAX_CTO=8<br>AG=1</p><p><img src="https://imgs.myan.run/i/2023/12/25/xlgxn1-2.webp" alt="UPLOAD_Examples"></p><h4 id="0xF4-SHORT-UPLOAD"><a href="#0xF4-SHORT-UPLOAD" class="headerlink" title="0xF4:SHORT_UPLOAD"></a>0xF4:SHORT_UPLOAD</h4><p>将返回指定长度的数据块，从Address开始。MTA指针为设置为上传数据块后面的第一个数据字节。错误处理和响应结构与UPLOAD命令相同</p><blockquote><p>元素是字节。WORD或DWORD，取决于AG。 此命令不支持块传输，且不能在块传输序列中使用。</p></blockquote><h4 id="0xF3-BUILD-CHECKSUM"><a href="#0xF3-BUILD-CHECKSUM" class="headerlink" title="0xF3:BUILD_CHECKSUM"></a>0xF3:BUILD_CHECKSUM</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xlj0jl-2.webp" alt="BUILD_CHECKSUM"></p><p>返回由MTA和定义的内存块大小的计算校验和结果。MTA将按大小后增量</p><p>Type参数：</p><ul><li>0x01: XCP_ADD_11 将BYTE添加到BYTE校验和中，忽略溢出</li><li>0x02: XCP_ADD_12 将BYTE添加到WORD校验和中，忽略溢出</li><li>0x03: XCP_ADD_14 将BYTE添加到DWORD校验和中，忽略溢出</li><li>0x04: XCP_ADD_22 将WORD添加到WORD校验和中，忽略溢出，块大小必须对2取模</li><li>0x05: XCP_ADD_24 将WORD添加到DWORD校验和中，忽略溢出，块大小必须对2取模</li><li>0x06: XCP_ADD_44 将DWORD添加到DWORD校验和中，忽略溢出，块大小必须对4取模</li><li>0x07: XCP_CRC_16 参见CRC错误检测算法</li><li>0x08: XCP_CRC_16_CITT 参见CRC错误检测算法</li><li>0x09: XCP_CRC_32 参见CRC错误检测算法</li><li>0xFF: XCP_USER_DEFINED 用户自定义算法，在外部计算函数</li></ul><blockquote><p>不管校验和类型是什么，结果总是以DWORD形式给出。 使用校验和类型XCP_USER_DEFINED时，从设备可以指示主设备为了计算校验和，必须使用在外部计算函数(例如win32 DLL, UNIX共享目标文件)，对象获取的名称在此从机的外部函数文件中</p></blockquote><p>如果块大小超过允许的最大值，则返回ERR_OUT_OF_RANGE。最大块大小将在校验和字段中返回</p><p>CRC算法：</p><p><img src="https://imgs.myan.run/i/2023/12/25/xltx6g-2.webp" alt="CRC"></p><h4 id="0xF2-TRANSPORT-LAYER-CMD"><a href="#0xF2-TRANSPORT-LAYER-CMD" class="headerlink" title="0xF2:TRANSPORT_LAYER_CMD"></a>0xF2:TRANSPORT_LAYER_CMD</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xlv925-2.webp" alt="TRANSPORT_LAYER_CMD"></p><p>该命令在传输层规范中定义。它用于执行传输层特定的动作</p><h4 id="0xF1-USER-CMD"><a href="#0xF1-USER-CMD" class="headerlink" title="0xF1:USER_CMD"></a>0xF1:USER_CMD</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xlwauf-2.webp" alt="USER_CMD"></p><p>该命令由用户自定义。它不是必须被用来实现其他功能服务</p><h3 id="标定-CAL-指令"><a href="#标定-CAL-指令" class="headerlink" title="标定(CAL)指令"></a>标定(CAL)指令</h3><h3 id="必实现指令-1"><a href="#必实现指令-1" class="headerlink" title="必实现指令"></a>必实现指令</h3><h4 id="0xF0-DOWNLOAD"><a href="#0xF0-DOWNLOAD" class="headerlink" title="0xF0:DOWNLOAD"></a>0xF0:DOWNLOAD</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xlyb7w-2.webp" alt="DOWNLOAD"></p><blockquote><p>如果AG = DWORD，则必须使用2个对齐字节以满足对齐要求。 元素是BYTE，WORD或DWORD取决于AG</p></blockquote><p>CMD中包含的指定长度(大小)的数据块从MTA开始将被复制到内存，MTA将按数据数量后增加</p><p>如果从机不支持块传输模式</p><ul><li>则下载的所有数据都是单个命令包中传输。因此，数据元素的数量参数请求中的值必须在[1..MAX_CTO-2]范围内。如果数据元素个数大于MAX_CTO-2，则返回ERR_OUT_OF_RANGE</li></ul><p>如果从机支持块传输模式</p><ul><li>则下载的数据将分多个传输命令数据包。对于从设备，可能存在关于最大连续命令包(MAX_BS)。因此数据元素个数(n)的取值范围为[1..min(MAX_BS<em>(MAX_CTO-2)/AG,255)]。主设备必须连续传输(n </em> AG / (MAX_CTO-2)) - 1个DOWNLOAD_NEXT命令包。从设备将只回复最后DOWNLOAD_NEXT命令包。命令包之间的分离时间在CONNECT的响应中指定最大数据包数(MAX_BS, MIN_ST)</li></ul><p>Example: MAX_CTO=8</p><p><img src="https://imgs.myan.run/i/2023/12/25/xlzhgf-2.webp" alt="DOWNLOAD"></p><h3 id="可选实现指令"><a href="#可选实现指令" class="headerlink" title="可选实现指令"></a>可选实现指令</h3><h4 id="0xEF-DOWNLOAD-NEXT"><a href="#0xEF-DOWNLOAD-NEXT" class="headerlink" title="0xEF:DOWNLOAD_NEXT"></a>0xEF:DOWNLOAD_NEXT</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xm0nvl-2.webp" alt="DOWNLOAD_NEXT"></p><blockquote><p>如果AG = DWORD，则必须使用2个对齐字节以满足对齐要求。 元素是BYTE，WORD或DWORD取决于AG</p></blockquote><ul><li>该命令用于为DOWNLOAD传输连续的数据元素命令</li><li>DOWNLOAD_NEXT命令的结构与DOWNLOAD完全相同命令</li><li>Number包含要传输的剩余数量的数据元素</li><li>从设备将使用此信息检测丢失的数据包。如果检测到序列错误，则将返回错误代码ERR_SEQUENCE</li><li>如果数据元素的数量与期望值不匹配，则错误将返回ERR_SEQUENCE。回应将包含预期的数据元素数量</li></ul><p>Example: MAX_CTO=8</p><p><img src="https://imgs.myan.run/i/2023/12/25/xm20u3-2.webp" alt="DOWNLOAD_NEXT_Example"></p><h4 id="0xEE-DOWNLOAD-MAX"><a href="#0xEE-DOWNLOAD-MAX" class="headerlink" title="0xEE:DOWNLOAD_MAX"></a>0xEE:DOWNLOAD_MAX</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xm36wu-2.webp" alt="DOWNLOAD_MAX"></p><blockquote><p>如果AG = WORD/DWORD，则必须使用1/3个对齐字节以满足对齐要求。 元素是BYTE，WORD或DWORD取决于AG。 此命令不支持块传输，并且不能块传输序列中使用</p></blockquote><p>将被下载数据到内存中，从MTA开始。MTA将增加MAX_CTO / AG-1</p><h4 id="0xED-SHORT-DOWNLOAD"><a href="#0xED-SHORT-DOWNLOAD" class="headerlink" title="0xED:SHORT_DOWNLOAD"></a>0xED:SHORT_DOWNLOAD</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xm47m8-2.webp" alt="SHORT_DOWNLOAD"></p><blockquote><p>元素是BYTE，WORD或DWORD取决于AG。 此命令不支持块传输，并且不能块传输序列中使用。 该命令将没有效果(没有数据字节可以传输)，如果MAX_CTO = 8</p></blockquote><p>从Address开始写入指定长度的数据块。MTA指针设置为第一个数据元素。如果是元素个数超过(MAX_CTO-8)/AG，则返回错误码ERR_OUT_OF_RANGE</p><h4 id="0xEC-MODIFY-BITS"><a href="#0xEC-MODIFY-BITS" class="headerlink" title="0xEC:MODIFY_BITS"></a>0xEC:MODIFY_BITS</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xmer72-2.webp" alt="MODIFY_BITS"></p><p>A = ( (A) &amp; ((~((dword)(((word)~MA)&lt;&lt;S))) )^((dword)(MX&lt;&lt;S)) )</p><blockquote><p>MTA不会受到影响</p></blockquote><p>Example:</p><p><img src="https://imgs.myan.run/i/2023/12/25/xmfy8u-2.webp" alt="MODIFY_BITS_Example"></p><h3 id="页面切换-PAG-指令"><a href="#页面切换-PAG-指令" class="headerlink" title="页面切换(PAG)指令"></a>页面切换(PAG)指令</h3><h3 id="必实现指令-2"><a href="#必实现指令-2" class="headerlink" title="必实现指令"></a>必实现指令</h3><h4 id="0xEB-SET-CAL-PAGE"><a href="#0xEB-SET-CAL-PAGE" class="headerlink" title="0xEB:SET_CAL_PAGE"></a>0xEB:SET_CAL_PAGE</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xmh3me-2.webp" alt="SET_CAL_PAGE"></p><p>Mode参数：</p><ul><li>ECU：给定的页面将使用从机的设备应用</li><li>XCP：从设备XCP驱动将访问给定的页面</li><li>ALL：逻辑段号被忽略。该命令适用于所有段</li><li>ECU和XCP标志可以同时设置，也可以单独设置</li><li>如果校准数据页不能设置为给定的模式，则返回ERR_MODE_NOT_VALID</li><li>如果校准数据页不可用，则返回ERR_PAGE_NOT_VALID或ERR_SEGMENT_NOT_VALID</li></ul><h4 id="0xEA-GET-CAL-PAGE"><a href="#0xEA-GET-CAL-PAGE" class="headerlink" title="0xEA:GET_CAL_PAGE"></a>0xEA:GET_CAL_PAGE</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xmidkd-2.webp" alt="GET_CAL_PAGE"></p><p>此命令返回当前激活的逻辑编号指定的访问模式的数据段的校准数据页。模式可以是0x01 (ECU)或0x02 (XCP)。所有其他值无效</p><h3 id="可选实现命令"><a href="#可选实现命令" class="headerlink" title="可选实现命令"></a>可选实现命令</h3><h4 id="0xE9-GET-PAG-PROCESSOR-INFO"><a href="#0xE9-GET-PAG-PROCESSOR-INFO" class="headerlink" title="0xE9:GET_PAG_PROCESSOR_INFO"></a>0xE9:GET_PAG_PROCESSOR_INFO</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xmjzng-2.webp" alt="GET_PAG_PROCESSOR_INFO"></p><p>PROPERTIES参数：</p><ul><li>FREEZE=1：段可以设置为冻结模式。反之不能设置为冻结模式</li></ul><h4 id="0xE8-GET-SEGMENT-INFO"><a href="#0xE8-GET-SEGMENT-INFO" class="headerlink" title="0xE8:GET_SEGMENT_INFO"></a>0xE8:GET_SEGMENT_INFO</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xmlowh-2.webp" alt="GET_SEGMENT_INFO"></p><p>Mode参数：</p><ul><li>0 ：获取此段的基本地址信息</li><li>1 ：获取该分段的标准信息</li><li>2 ：获取这个SEGMENT的地址映射信息</li></ul><p>INFO参数：</p><ul><li>Mode=0：INFO=0：地址</li><li>Mode=0：INFO=1：长度</li><li>Mode=1：INFO参数不关心</li><li>Mode=2：INFO=0：源地址</li><li>Mode=2：INFO=1：目标地址</li><li>Mode=2：INFO=2：地址长度</li></ul><p>INDEX参数：</p><ul><li>Mode=0：INDEX参数不关心</li><li>Mode=1：INDEX参数不关心</li><li>Mode=2：INDEX：MAPPING_INFO所属的地址映射范围标识符</li></ul><p>GET_SEGMENT_INFO返回特定SEGMENT的信息。如果指定的SEGMENT不可用，则返回ERR_OUT_OF_RANGE</p><p>返回指令(Mode = 0)：</p><ul><li>响应包含这个SEGMENT的地址信息</li><li>如果SEGMENT_INFO = 0，该命令将在BASIC_INFO中返回该SEGMENT的地址</li><li>如果SEGMENT_INFO = 1，该命令将在BASIC_INFO中返回该SEGMENT的长度</li></ul><p>返回指令(Mode = 1)：</p><ul><li>响应包含关于这个SEGMENT的标准信息</li><li>MAX_PAGES：表示该SEGMENT可用的page数量</li><li>EXTENSION用于SET_MTA, SHORT_UPLOAD和SHORT_DOWNLOAD访问该SEGMENT内的PAGE时</li><li>MAX_MAPPING：表示该SEGMENT内地址范围的数量应用地址映射</li></ul><p>返回指令(Mode = 2)：</p><ul><li>如果Mode = 2, SEGMENT_INFO表示所请求的映射信息在MAPPING_INDEX的范围</li><li>如果SEGMENT_INFO = 0，该命令将返回MAPPING_INFO中MAPPING_INDEX的源地址</li><li>如果SEGMENT_INFO = 1，该命令将返回MAPPING_INFO中MAPPING_INDEX的目的地址</li><li>如果SEGMENT_INFO = 2，该命令将返回MAPPING_INFO中MAPPING_INDEX的长度</li></ul><h4 id="0xE7-GET-PAGE-INFO"><a href="#0xE7-GET-PAGE-INFO" class="headerlink" title="0xE7:GET_PAGE_INFO"></a>0xE7:GET_PAGE_INFO</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xmmzac-2.webp" alt="GET_PAGE_INFO"></p><p>GET_PAGE_INFO返回特定PAGE的信息。如果指定的PAGE不可用，则返回ERR_OUT_OF_RANGE</p><p>PROPERTIES参数：</p><ul><li>ECU_ACCESS_x：标志表示ECU是否以及如何访问该页</li><li>ECU_ACCESS_WITH_XCP、ECU_ACCESS_WITHOUT_XCP = 00：不允许访问ECU</li><li>ECU_ACCESS_WITH_XCP、ECU_ACCESS_WITHOUT_XCP = 01：没有XCP</li><li><p>ECU_ACCESS_WITH_XCP、ECU_ACCESS_WITHOUT_XCP = 10：只有XCP</p></li><li><p>ECU_ACCESS_WITH_XCP、ECU_ACCESS_WITHOUT_XCP = 11：不关心</p></li><li>XCP_READ_ACCESS_x：标志表示XCP主机可以访问这个页面</li><li>XCP_READ_ACCESS_WITH_ECU、XCP_READ_ACCESS_WITHOUT_ECU = 00：不允许XCP读访问</li><li>XCP_READ_ACCESS_WITH_ECU、XCP_READ_ACCESS_WITHOUT_ECU = 01：没有ECU</li><li>XCP_READ_ACCESS_WITH_ECU、XCP_READ_ACCESS_WITHOUT_ECU = 10：只有ECU</li><li>XCP_READ_ACCESS_WITH_ECU、XCP_READ_ACCESS_WITHOUT_ECU = 11：不关心</li><li>XCP_WRITE_ACCESS_x：标志表示XCP主机可以写入这个页面</li><li>XCP_WRITE_ACCESS_WITH_ECU、XCP_WRITE_ACCESS_WITHOUT_ECU = 00：不允许XCP写访问</li><li>XCP_WRITE_ACCESS_WITH_ECU、XCP_WRITE_ACCESS_WITHOUT_ECU = 01：没有ECU</li><li>XCP_WRITE_ACCESS_WITH_ECU、XCP_WRITE_ACCESS_WITHOUT_ECU = 10：只有ECU</li><li>XCP_WRITE_ACCESS_WITH_ECU、XCP_WRITE_ACCESS_WITHOUT_ECU = 11：不关心</li></ul><h4 id="0xE6-SET-SEGMENT-MODE"><a href="#0xE6-SET-SEGMENT-MODE" class="headerlink" title="0xE6:SET_SEGMENT_MODE"></a>0xE6:SET_SEGMENT_MODE</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xmomtv-2.webp" alt="SET_SEGMENT_MODE"></p><p>如果指定的SEGMENT不可用，则返回ERR_OUT_OF_RANGE</p><p>Mode参数：</p><ul><li>FREEZE=1： 使能冻结模式。反之关闭冻结模式</li></ul><h4 id="0xE5-GET-SEGMENT-MODE"><a href="#0xE5-GET-SEGMENT-MODE" class="headerlink" title="0xE5:GET_SEGMENT_MODE"></a>0xE5:GET_SEGMENT_MODE</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xmq70p-2.webp" alt="GET_SEGMENT_MODE"></p><p>如果指定的SEGMENT不可用，则返回ERR_OUT_OF_RANGE</p><h4 id="0xE4-COPY-CAL-PAGE"><a href="#0xE4-COPY-CAL-PAGE" class="headerlink" title="0xE4:COPY_CAL_PAGE"></a>0xE4:COPY_CAL_PAGE</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xmzqut-2.webp" alt="COPY_CAL_PAGE"></p><ul><li>该命令强制从机将一个校准页复制到另一个校准页。此命令仅在定义了多个校准页时可用</li><li>原则上，任何段的任何页都可以复制到任何段的任何页</li><li>如果校准数据页不能复制到给定的目的地，例如，由于目标是一个flash段，则返回ERR_WRITE_PROTECTED</li><li>如果校准数据页不可用，则返回ERR_PAGE_NOT_VALID或ERR_SEGMENT_NOT_VALID</li></ul><h3 id="数据采集-DAQ-指令-静态"><a href="#数据采集-DAQ-指令-静态" class="headerlink" title="数据采集(DAQ)指令(静态)"></a>数据采集(DAQ)指令(静态)</h3><h3 id="必实现指令-3"><a href="#必实现指令-3" class="headerlink" title="必实现指令"></a>必实现指令</h3><h4 id="0xE3-CLEAR-DAQ-LIST"><a href="#0xE3-CLEAR-DAQ-LIST" class="headerlink" title="0xE3:CLEAR_DAQ_LIST"></a>0xE3:CLEAR_DAQ_LIST</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xn13dw-2.webp" alt="CLEAR_DAQ_LIST"></p><ul><li><p>此命令可用于预定义的和可配置的DAQ列表，因此范围DAQ_LIST_NUMBER是[0,1，..MAX_DAQ-1]</p></li><li><p>如果指定的列表不可用，则返回ERR_OUT_OF_RANGE</p></li><li>CLEAR_DAQ_LIST清除指定的DAQ列表。对于可配置的DAQ列表，所有ODT表项将被重置为address=0, extension=0和size=0(如果有效:bit_offset = 0xFF)</li><li>预定义的和可配置的DAQ列表，此列表上的运行数据传输将停止，所有的DAQ列表状态被重置</li></ul><h4 id="0xE2-SET-DAQ-PTR"><a href="#0xE2-SET-DAQ-PTR" class="headerlink" title="0xE2:SET_DAQ_PTR"></a>0xE2:SET_DAQ_PTR</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xn2azz-2.webp" alt="SET_DAQ_PTR"></p><ul><li>为WRITE_DAQ或READ_DAQ的后续操作来初始化DAQ列表指针</li><li>如果指定的列表不可用，则返回ERR_OUT_OF_RANGE</li><li>ODT_NUMBER是该DAQ列表中的ODT编号</li><li>ODT_ENTRY_NUMBER是这个ODT中的ODT条目号</li></ul><h4 id="0xE1-WRITE-DAQ"><a href="#0xE1-WRITE-DAQ" class="headerlink" title="0xE1:WRITE_DAQ"></a>0xE1:WRITE_DAQ</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xn3oq7-2.webp" alt="WRITE_DAQ"></p><ul><li>将一个ODT条目写入由DAQ列表指针定义的DAQ列表(参见SET_DAQ_PTR)</li><li>WRITE_DAQ仅适用于可配置DAQ列表中的元素。因此在前面的SET_DAQ_PTR中使用的DAQ_LIST_NUMBER必须在这个范围内[MIN_DAQ MIN_DAQ + 1 . . MAX_DAQ-1]。否则从机将返回一个ERR_WRITE_PROTECTED在WRITE_DAQ的负响应中</li><li>BIT_OFFSET字段允许传输表示的数据刺激元素位的状态（数据掩码，表示传输的数据BIT有效位，如果等于FF，则说明忽略掩）。e.g Bit7 -&gt; BIT_MASK = 0x80 -&gt; BIT_OFFSET = 0x07</li><li>当BIT_OFFSET = FF时，该字段可以忽略。WRITE_DAQ适用于正常值大小用AG表示的数据元素</li><li>如果 BIT_OFFSET 从 0x00 到 0x1F，ODTentry 描述了一个代表位状态的元素。在这种情况下，DAQ的大小元素必须总是等于GRANULARITY_ODT_ENTRY_SIZE_x。如果这个元素= 0，位的值为0。元素&gt;0，则元素的值为1</li><li>ODT条目的大小必须满足粒度和最大值的规则。(ref GET_DAQ_RESOLUTION_INFO)</li><li>DAQ列表指针自动递增到下一个ODT条目</li><li>写入ODT的最后一个ODT条目后，DAQ指针的值为未定义的。主机必须确保正确分配DAQ指针到下一个DAQ列表的下一个ODT</li></ul><h4 id="0xE0-SET-DAQ-LIST-MODE"><a href="#0xE0-SET-DAQ-LIST-MODE" class="headerlink" title="0xE0:SET_DAQ_LIST_MODE"></a>0xE0:SET_DAQ_LIST_MODE</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xn52ji-2.webp" alt="SET_DAQ_LIST_MODE"></p><ul><li>此命令可用于预定义的和可配置的DAQ列表，因此范围DAQ_LIST_NUMBER是[0,1，..MAX_DAQ-1]。如果指定的列表不可用，则返回ERR_OUT_OF_RANGE</li></ul><p>Mode参数：</p><ul><li>DIRECTION=0：DAQ设置为数据采集模式(Slave -&gt; Master)</li><li>DIRECTION=1：STIM设置为数据刺激模式(Master -&gt; Slave)</li><li>TIMESTAMP=1：使能时间戳，反之关闭</li><li>PID_OFF =1：发送DTO不含PID，反之包含PID</li><li>TIMESTAMP标志将DAQ列表设置为时间戳模式</li><li>GET_DAQ_RESOLUTION_INFO中的TIMESTAMP_MODE中的TIMESTAMP_FIXED标志表示Master不能通过SET_DAQ_LIST_MODE关闭时间戳。如果主机仍然尝试这样做，从服务器将使用ERR_CMD_SYNTAX答复</li></ul><p>事件通道号指定有效确定的通用信号源数据传输时序</p><p>为了降低期望的传输速率，可以在DAQ列表上应用传输速率预算器。如果不进行缩减，预分频器的值必须等于1。为减少。预标量必须大于1。预分频器的使用仅用于带有direction = DAQ的DAQ列表</p><p>DAQ列表优先级指定处理该DAQ列表时的优先级。priority = FF优先级最高</p><p>如果ECU不支持DAQ列表优先级，则当DAQ列表优先级&gt; 0，将通过返回ERR_OUT_OF_RANGE表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">E0 00 00 00 00 00 01 FF</span><br><span class="line">00：DAQ模式，不使能时间戳，发送DTO时，包含PID</span><br><span class="line">00 00：DAQ标号LIST0</span><br><span class="line">00 00：时间通道号0</span><br><span class="line">01：不分频</span><br><span class="line">FF：优先级最高</span><br></pre></td></tr></table></figure><h4 id="0xDF-GET-DAQ-LIST-MODE"><a href="#0xDF-GET-DAQ-LIST-MODE" class="headerlink" title="0xDF:GET_DAQ_LIST_MODE"></a>0xDF:GET_DAQ_LIST_MODE</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xn6dgm-2.webp" alt="GET_DAQ_LIST_MODE"></p><p>返回指定DAQ列表的当前模式的信息。该命令可以是用于预定义的和可配置的DAQ列表，因此范围为DAQ_LIST_NUMBER是[0,1，..MAX_DAQ-1]。如果指定的列表不可用，则返回ERR_OUT_OF_RANGE</p><p>Mode参数：</p><ul><li>SELECTED=1：已选择DAQ列表。反之未选择DAQ列表</li><li>DIRECTION=0：DAQ数据采集方式已设置</li><li>DIRECTION=1：STIM数据刺激模式已设置</li><li>TIMESTAMP=0：时间戳关闭，反之打开</li><li>PID_OFF = 1：DTO的PID关闭，反之打开</li><li>RUNNING=1：DAQ运行中，反之未运行</li><li>RESUME=1：此DAQ列表是在RESUME模式中使用的配置的一部分</li></ul><p>说明：</p><ul><li>SELECTED标志表示该DAQ列表已被前一个START_STOP_DAQ_LIST(选择)。如果下一个命令是START_STOP_SYNCH，这将启动/停止此DAQ列表。如果下一个命令是SET_REQUEST，这将使DAQ列表成为配置的一部分之后将被清除或存储到非易失性内存中</li><li>DIRECTION标志指示该DAQ列表是否为同步数据配置获得或刺激</li><li>RUNNING标志表示DAQ列表已由主服务器主动启动START_STOP_DAQ_LIST或START_STOP_SYNCH，或者slave在RESUME中mode自动启动DAQ列表。RESUME标志表示此DAQ列表是RESUME中使用的配置的一部分模式</li></ul><h4 id="0xDE-START-STOP-DAQ-LIST"><a href="#0xDE-START-STOP-DAQ-LIST" class="headerlink" title="0xDE:START_STOP_DAQ_LIST"></a>0xDE:START_STOP_DAQ_LIST</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xn7vid-2.webp" alt="START_STOP_DAQ_LIST"></p><p>Mode参数：</p><ul><li>00：停止</li><li>01：启动</li><li>02：选择</li></ul><p>此命令可用于预定义的和可配置的DAQ列表，因此范围DAQ_LIST_NUMBER是[0,1，..MAX_DAQ-1]。如果指定的列表不可用，则返回ERR_OUT_OF_RANGE。 此命令用于启动、停止或准备指定的同步启动DAQ_LIST_NUMBER。mode参数允许启动或停止特定的DAQ列表。选择模式使用提供的参数配置DAQ列表，但不启动指定列表的数据传输。此模式用于同步启动/停止所有配置的DAQ列表(参考START_STOP_SYNCH)或用于RESUME模式(参考SET_REQUEST)。 从设备必须快速在GET_DAQ_LIST_MODE模式中重置SELECTED标志因为START_STOP_SYNCH或SET_REQUEST已被确认。 如果至少有一个DAQ列表已经启动，则从设备处于数据传输模式。GET_STATUS命令将返回DAQ_RUNNING状态</p><ul><li>如果DTO报文的标识字段类型为absolute ODT number，则FIRST_PID为此DAQ列表传输的第一个ODT的DTO包中的绝对ODT号</li><li>任何其他ODT的绝对ODT数可以通过以下方式确定: Absolute_ODT_number(ODT i in DAQ list j) = FIRST_PID(DAQ list j) + relative_ODT_NUMBER(ODT i)</li><li>如果DTO报文标识字段类型为relative ODT number and absolute DAQ list number， FIRST_PID可以忽略</li></ul><h4 id="0xDD-START-STOP-SYNCH"><a href="#0xDD-START-STOP-SYNCH" class="headerlink" title="0xDD:START_STOP_SYNCH"></a>0xDD:START_STOP_SYNCH</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xn975x-2.webp" alt="START_STOP_SYNCH"></p><p>该命令用于同步启停数据的传输采集列表。 所有的DAQ列表或仅到选定的列表(以前配置为START_STOP_DAQ_LIST(选择))。从设备必须重置DAQ表的SELECTED，在成功执行START_STOP_SYNCH后</p><p>Mode参数：</p><ul><li>00：停止所有</li><li>01：启动被选择的</li><li>02：停止被选择的</li></ul><h3 id="可选实现指令-1"><a href="#可选实现指令-1" class="headerlink" title="可选实现指令"></a>可选实现指令</h3><h4 id="0xDC-GET-DAQ-CLOCK"><a href="#0xDC-GET-DAQ-CLOCK" class="headerlink" title="0xDC:GET_DAQ_CLOCK"></a>0xDC:GET_DAQ_CLOCK</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xnalqv-2.webp" alt="GET_DAQ_CLOCK"></p><p>同步空闲的运行数据采集时钟数据采集时钟。这是可选的</p><h4 id="0xDB-READ-DAQ"><a href="#0xDB-READ-DAQ" class="headerlink" title="0xDB:READ_DAQ"></a>0xDB:READ_DAQ</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xnbj4k-2.webp" alt="READ_DAQ"></p><p>读取由DAQ列表指针定义的DAQ列表的一个ODT条目。DAQ表指针在同一个ODT中递增(参见WRITE_DAQ)。 READ_DAQ可以用于预定义的和可配置的DAQ列表中的元素。因此上面SET_DAQ_PTR中使用的DAQ_LIST_NUMBER可以在这个范围内[0,1,…MAX_DAQ-1]</p><blockquote><p>ODT条目的大小必须满足粒度和最大值的规则。(ref GET_DAQ_RESOLUTION_INFO)</p></blockquote><h4 id="0xDA-GET-DAQ-PROCESSOR-INFO"><a href="#0xDA-GET-DAQ-PROCESSOR-INFO" class="headerlink" title="0xDA:GET_DAQ_PROCESSOR_INFO"></a>0xDA:GET_DAQ_PROCESSOR_INFO</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xnlf7h-2.webp" alt="GET_DAQ_PROCESSOR_INFO"></p><p>PROPERTIES参数：</p><ul><li>DAQ_CONFIG_TYPE=0：静态DAQ列表配置</li><li>DAQ_CONFIG_TYPE=1：动态DAQ列表配置</li><li>PRESCALER_SUPPORTED=0：不支持预分频</li><li>PRESCALER_SUPPORTED=1：支持预分频</li><li>RESUME_SUPPORTED=0：DAQ列表不能设置为RESUME模式；(当数据采集列表处于暂停状态时，它将停止对数据的采集。而当将数据采集列表切换到RESUME模式时，它将重新开始对数据的采集)</li><li>RESUME_SUPPORTED=1：DAQ列表能设置为RESUME模式</li><li>BIT_STIM_SUPPORTED=0：不支持按位数据刺激</li><li>BIT_STIM_SUPPORTED=1：支持按位数据刺激</li><li>TIMESTAMP_SUPPORTED=0：不支持时间戳模式</li><li>TIMESTAMP_SUPPORTED=1：支持时间戳模式</li><li>PID_OFF_SUPPORTED=0：标识字段不能关闭</li><li>PID_OFF_SUPPORTED=1：标识字段能关闭</li><li>OVERLOAD_EVENT、OVERLOAD_MSB=00：无过载指示</li><li>OVERLOAD_EVENT、OVERLOAD_MSB=01：PID的MSB过载指示</li><li>OVERLOAD_EVENT、OVERLOAD_MSB=10：事件包的过载指示</li><li><p>OVERLOAD_EVENT、OVERLOAD_MSB=11：不允许出现该状态</p></li><li><p>为指示超限情况，从机可以设置的最大位(MSB)的下一个发送成功的报文的PID。当使用PID的MSB时，ODT的最大数量(绝对或相对)是有限的，并且必须在范围: 0x00&lt;= ODT_NUMBER(DAQ with overrun_msb)&lt;=0x7C</p></li></ul><p>MAX_DAQ：从设备可用的DAQ列表总数，它包括不可配置的预定义DAQ列表(在GET_DAQ_LIST_INFO用PREDEFINE表示)和可配置的DAQ列表；如果DAQ_CONFIG_TYPE=DYNAMIC，则MAX_DAQ=MIN_DAQ+DAQ_COUNT(动态DAQ分配的数量)</p><p>MIN_DAQ：预定义DAQ列表</p><p>MAX_DAQ-MIN_DAQ：可配置的DAQ列表数量</p><p>DAQ_KEY_BYTE参数：</p><p>Type of Optimisation Method：优化类型方法</p><ul><li>Optimisation_Type_3、Optimisation_Type_2、Optimisation_Type_1、Optimisation_Type_0=0000：OM_DEFAULT</li><li>Optimisation_Type_3、Optimisation_Type_2、Optimisation_Type_1、Optimisation_Type_0=0001：OM_ODT_TYPE_16</li><li>Optimisation_Type_3、Optimisation_Type_2、Optimisation_Type_1、Optimisation_Type_0=0010：OM_ODT_TYPE_32</li><li>Optimisation_Type_3、Optimisation_Type_2、Optimisation_Type_1、Optimisation_Type_0=0011：OM_ODT_TYPE_64</li><li>Optimisation_Type_3、Optimisation_Type_2、Optimisation_Type_1、Optimisation_Type_0=0100：OM_ODT_TYPE_ALIGNMENT</li><li>Optimisation_Type_3、Optimisation_Type_2、Optimisation_Type_1、Optimisation_Type_0=0101：OM_MAX_ENTRY_SIZE</li><li>Address_Extension_DAQ、Address_Extension_ODT=00：在同一个ODT中，地址扩展名可以不同</li><li>Address_Extension_DAQ、Address_Extension_ODT=01：一个ODT内的所有条目的地址扩展名必须相同</li><li>Address_Extension_DAQ、Address_Extension_ODT=10：不允许状态</li><li>Address_Extension_DAQ、Address_Extension_ODT=11：一个DAQ内的所有条目的地址扩展必须相同</li><li>Identification_Field_Type_1、Identification_Field_Type_0=00：ODT绝对编号</li><li>Identification_Field_Type_1、Identification_Field_Type_0=01：相对ODT号，绝对DAQ列表号(BYTE)</li><li>Identification_Field_Type_1、Identification_Field_Type_0=10：ODT相对编号，DAQ绝对编号(WORD)</li><li>Identification_Field_Type_1、Identification_Field_Type_0=11：相对ODT编号，绝对DAQ列表编号(WORD，对齐)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FF 01 00 00 00 06 00 00</span><br><span class="line">01：支持动态DAQ列表配置</span><br><span class="line">00 00：可用DAQ总数为0</span><br><span class="line">00 06：可用事件通道总数为6</span><br><span class="line">00：表示从节点的预定义的DAQ-list数量为0</span><br><span class="line">00：表示在同一个ODT中，地址扩展名可以不同；ODT为绝对编号，无优化</span><br></pre></td></tr></table></figure><h4 id="0xD9-GET-DAQ-RESOLUTION-INFO"><a href="#0xD9-GET-DAQ-RESOLUTION-INFO" class="headerlink" title="0xD9:GET_DAQ_RESOLUTION_INFO"></a>0xD9:GET_DAQ_RESOLUTION_INFO</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xnnqw2-2.webp" alt="GET_DAQ_RESOLUTION_INFO"></p><p>ODT粒度大小（数据对齐方式）：GRANULARITY_ODT_ENTRY_SIZE_x的可能值是{1,2,4,8}。对于ODT条目所描述的元素的地址，必须满足以下要求: Address 取余 GRANULARITY_ODT_ENTRY_SIZE_x = 0；对于ODT条目描述的每个元素大小，必须满足以下要求: SizeOf(element described by ODT entry)取余GRANULARITY_ODT_ENTRY_SIZE_x = 0</p><p>最大ODT条目：MAX_ODT_ENTRY_SIZE_x表示ODT条目描述的元素。对于ODT条目描述的每个元素大小，必须满足以下要求: SizeOf(element described by ODT entry) &lt;= MAX_ODT_ENTRY_SIZE_x</p><p>如果从机不支持时间戳模式(GET_DAQ_PROCESSOR_INFO中没有TIMESTAMP_SUPPORTED)、参数TIMESTAMP_MODE和TIMESTAMP_TICKS无效</p><p>如果从设备支持时间戳模式，则TIMESTAMP_MODE和TIMESTAMP_TICKS包含数据采集时钟的分辨率信息。数据采集时钟是一个自由运行的计数器，永远不会被重置或修改</p><p>TIMESTAMP_MODE参数：</p><ul><li>Size_2、Size_1、Size_0=000：时间戳的大小(字节) = 没有</li><li>Size_2、Size_1、Size_0=001：时间戳的大小(字节) = 1</li><li>Size_2、Size_1、Size_0=010：时间戳的大小(字节) = 2</li><li>Size_2、Size_1、Size_0=011：时间戳的大小(字节) = 不允许</li><li>Size_2、Size_1、Size_0=100：时间戳的大小(字节) = 4</li><li>TIMESTAMP_FIXED标志表示Slave总是发送DTO报文(stamped mode)</li><li>Unit_3、Unit_2、Unit_1、Unit_0=0000： DAQ_TIMESTAMP_UNIT_1NS</li><li>Unit_3、Unit_2、Unit_1、Unit_0=0001： DAQ_TIMESTAMP_UNIT_10NS</li><li>Unit_3、Unit_2、Unit_1、Unit_0=0010： DAQ_TIMESTAMP_UNIT_100NS</li><li>Unit_3、Unit_2、Unit_1、Unit_0=0011： DAQ_TIMESTAMP_UNIT_1US</li><li>Unit_3、Unit_2、Unit_1、Unit_0=0100： DAQ_TIMESTAMP_UNIT_10US</li><li>Unit_3、Unit_2、Unit_1、Unit_0=0101： DAQ_TIMESTAMP_UNIT_100US</li><li>Unit_3、Unit_2、Unit_1、Unit_0=0110： DAQ_TIMESTAMP_UNIT_1MS</li><li>Unit_3、Unit_2、Unit_1、Unit_0=0111： DAQ_TIMESTAMP_UNIT_10MS</li><li>Unit_3、Unit_2、Unit_1、Unit_0=1000： DAQ_TIMESTAMP_UNIT_100MS</li><li>Unit_3、Unit_2、Unit_1、Unit_0=1001： DAQ_TIMESTAMP_UNIT_1S</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FF 00 18 00 00 00 00 00 </span><br><span class="line">00：ODT_SIZE_DAQ=1</span><br><span class="line">18：ODT_DAQ描述元素的大小上限为24</span><br><span class="line">00：ODT_SIZE_STIM=1</span><br><span class="line">00：ODT_STIM描述元素的大小上限为0</span><br></pre></td></tr></table></figure><h4 id="0xD8-GET-DAQ-LIST-INFO"><a href="#0xD8-GET-DAQ-LIST-INFO" class="headerlink" title="0xD8:GET_DAQ_LIST_INFO"></a>0xD8:GET_DAQ_LIST_INFO</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xnp6k9-2.webp" alt="GET_DAQ_LIST_INFO"></p><p>GET_DAQ_LIST_INFO返回特定DAQ列表的信息。此命令可用于预定义的和可配置的DAQ列表，因此范围DAQ_LIST_NUMBER是[0,1，..MAX_DAQ-1]。如果指定的列表不可用，则返回ERR_OUT_OF_RANGE</p><p>PROPERTIES参数：</p><ul><li>PREDEFINED=0：可更改DAQ列表配置</li><li>PREDEFINED=1：DAQ列表配置固定</li><li>EVENT_FIXED=0：事件通道可以更改</li><li>EVENT_FIXED=1：事件通道配置固定</li><li>STIM、DAQ=00：不允许</li><li>STIM、DAQ=01：DAQ_LIST_TYPE：仅在DIRECTION = DAQ支持</li><li>STIM、DAQ=10：DAQ_LIST_TYPE：仅在DIRECTION = STIM支持</li><li>STIM、DAQ=11：DAQ_LIST_TYPE：在支持两个方向(但不同时)</li></ul><p>如果静态配置DAQ列表，则MAX_ODT指定该DAQ的odt数量和MAX_ODT_ENTRIES表示每个ODT中ODT表项的个数。 FIXED_EVENT表示用于此DAQ列表的固定事件通道的编号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请求 D8 00 00 00 00 00 00 00</span><br><span class="line">响应 FF 04 00 00 00 00 00 00 </span><br><span class="line">STIM、DAQ=01：DAQ_LIST_TYPE：仅在DIRECTION = DAQ支持</span><br><span class="line">EVENT_FIXED=0：事件通道可以更改</span><br><span class="line">PREDEFINED=0：可更改DAQ列表配置</span><br></pre></td></tr></table></figure><h4 id="0xD7-GET-DAQ-EVENT-INFO"><a href="#0xD7-GET-DAQ-EVENT-INFO" class="headerlink" title="0xD7:GET_DAQ_EVENT_INFO"></a>0xD7:GET_DAQ_EVENT_INFO</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xnqigr-2.webp" alt="GET_DAQ_EVENT_INFO"></p><p>GET_DAQ_EVENT_INFO返回特定事件通道的信息的数字。从0到MAX_EVENT_CHANNEL-1指定事件通道。如果指定如果事件通道不可用，则返回ERR_OUT_OF_RANGE</p><p>PROPERTIES参数：</p><ul><li>STIM 、DAQ=00：不允许</li><li>STIM 、DAQ=01：EVENT_CHANNEL_TYPE：仅支持DIRECTION = DAQ列表</li><li>STIM 、DAQ=10：EVENT_CHANNEL_TYPE：仅支持DIRECTION = STIM列表</li><li>STIM 、DAQ=11：EVENT_CHANNEL_TYPE：两种都支持(同时)</li></ul><p>MAX_DAQ_LIST可分配的最大DAQ列表数量事件通道。MAX_DAQ_LIST = 0x00表示此事件可用，但当前为不可用。MAX_DAQ_LIST = 0xFF表示不受限。 该命令会自动将从MTA (Memory Transfer Address)中上传事件通道名称，使用一个或多个UPLOAD命令。事件通道名称length指定名称中的ASCII字节数。不包含结尾\0。 事件通道时间周期指示从设备处理该事件的采样周期事件通道。有关事件通道时间单位的定义，请参阅时间戳单位。 事件通道优先级指定此事件通道的优先级从机处理不同的事件通道。这个优先级是一个固定的属性 ，因此是只读的。事件通道与事件通道priority = FF优先级最高</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">请求 D7 00 00 05 00 00 00 00</span><br><span class="line">响应 FF 04 01 00 00 00 00 00</span><br><span class="line">STIM、DAQ=01：EVENT_CHANNEL_TYPE：仅支持DIRECTION = DAQ列表</span><br></pre></td></tr></table></figure><h3 id="数据采集-DAQ-指令-动态"><a href="#数据采集-DAQ-指令-动态" class="headerlink" title="数据采集(DAQ)指令(动态)"></a>数据采集(DAQ)指令(动态)</h3><h3 id="可选实现指令-2"><a href="#可选实现指令-2" class="headerlink" title="可选实现指令"></a>可选实现指令</h3><h4 id="0xD6-FREE-DAQ"><a href="#0xD6-FREE-DAQ" class="headerlink" title="0xD6:FREE_DAQ"></a>0xD6:FREE_DAQ</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xnrxzh-2.webp" alt="FREE_DAQ"></p><p>该命令清除所有的DAQ列表，并释放所有动态分配的DAQ列表，ODT和ODT条目。在动态DAQ列表配置序列的开始，总主总是首先必须发送一个FREE_DAQ</p><h4 id="0xD5-ALLOC-DAQ"><a href="#0xD5-ALLOC-DAQ" class="headerlink" title="0xD5:ALLOC_DAQ"></a>0xD5:ALLOC_DAQ</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xnt3cq-2.webp" alt="ALLOC_DAQ"></p><ul><li>这个命令为XCP从设备分配了一些DAQ列表。如果没有足够的内存来分配请求的DAQ列表ERR_MEMORY_OVERFLOW将作为负响应返回</li><li>主设备必须按照定义的顺序使用ALLOC_DAQ和FREE_DAQ，ALLOC_ODT和ALLOC_ODT_ENTRY。如果主服务器直接发送ALLOC_DAQ和ALLOC_ODT而没有发送FREE_DAQ，则从服务器返回ERR_SEQUENCE作为消极的回应</li><li>如果主设备直接在ALLOC_ODT_ENTRY之后发送一个ALLOC_DAQ，而没有在之间发送FREE_DAQ，从服务器返回一个ERR_SEQUENCE作为负响应</li></ul><h4 id="0xD4-ALLOC-ODT"><a href="#0xD4-ALLOC-ODT" class="headerlink" title="0xD4:ALLOC_ODT"></a>0xD4:ALLOC_ODT</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xnui0j-2.webp" alt="ALLOC_ODT"></p><ul><li>该命令分配多个ODT，并将它们分配到指定的DAQ列表中。此命令只能用于可配置的DAQ列表，因此DAQ_LIST_NUMBER是[MIN_DAQ, MIN_DAQ+1，..MIN_DAQ+DAQ_COUNT-1]。如果指定的列表不可用，则返回ERR_OUT_OF_RANGE</li><li>如果没有足够的内存来分配请求的odt，ERR_MEMORY_OVERFLOW将作为负响应返回</li></ul><h4 id="0xD3-ALLOC-ODT-ENTRY"><a href="#0xD3-ALLOC-ODT-ENTRY" class="headerlink" title="0xD3:ALLOC_ODT_ENTRY"></a>0xD3:ALLOC_ODT_ENTRY</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xnvprc-2.webp" alt="ALLOC_ODT_ENTRY"></p><ul><li>该命令分配若干ODT表项，并将它们分配给中指定的ODT具体的DAQ名单</li><li>此命令只能用于可配置的DAQ列表，因此DAQ_LIST_NUMBER是[MIN_DAQ, MIN_DAQ+1，..MIN_DAQ+DAQ_COUNT-1]。如果指定的列表不可用，则返回ERR_OUT_OF_RANGE。ODT_NUMBER是该DAQ列表中的相对ODT编号</li><li>如果没有足够的内存来分配请求的ODT项ERR_MEMORY_OVERFLOW将作为负响应返回</li></ul><h3 id="存储器编程-PGM-指令"><a href="#存储器编程-PGM-指令" class="headerlink" title="存储器编程(PGM)指令"></a>存储器编程(PGM)指令</h3><h3 id="必实现指令-4"><a href="#必实现指令-4" class="headerlink" title="必实现指令"></a>必实现指令</h3><h4 id="0xD2-PROGRAM-START"><a href="#0xD2-PROGRAM-START" class="headerlink" title="0xD2:PROGRAM_START"></a>0xD2:PROGRAM_START</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xnx8mj-2.webp" alt="PROGRAM_START"></p><ul><li>此命令用于指示非易失性内存编程的开始序列。如果从设备不处于允许编程的状态将返回ERR_GENERIC</li><li>内存编程命令PROGRAM_CLEAR, PROGRAM, PROGRAM_MAX或PROGRAM_NEXT不允许， 直到成功执行PROGRAM_START命令前</li><li>非volatile内存编程序列的结束由PROGRAM_RESET命令指示</li></ul><p>内存编程序列:</p><p>1.SET_MTA</p><p>2.PROGRAM_CLEAR</p><p>3.PROGRAM</p><p>4.PROGRAM_MAX or PROGRAM_NEXT</p><p>以下命令是可选的(例如验证内存内容): UPLOAD、BUILD_CHECKSUM</p><p>如果非易失性内存编程需要下载额外的代码，下载必须在执行PROGRAM_START命令之前完成。MTA必须指向已下载例程的入口点</p><p>COMM_MODE参数：</p><ul><li>MASTER_BLOCK_MODE：标志表示主机块模式是否可用</li><li>INTERLEAVED_MODE：标志表示在此期间交错模式是否可用</li><li>SLAVE_BLOCK_MODE：标志表示从机块模式在此期间是否可用</li></ul><p>通信参数MAX_CTO、MAX_BS、MIN_ST和QUEUE_SIZE可能会被修改当从设备处于内存编程模式时。 新的通信参数为MAX_CTO_PGM、MAX_BS_PGM、MIN_ST_PGM和QUEUE_SIZE_PGM在回应中返回</p><h4 id="0xD1-PROGRAM-CLEAR"><a href="#0xD1-PROGRAM-CLEAR" class="headerlink" title="0xD1:PROGRAM_CLEAR"></a>0xD1:PROGRAM_CLEAR</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xo7fw4-2.webp" alt="PROGRAM_CLEAR"></p><p>该命令用于在重编程之前清除一部分非易失性内存</p><p>Mode参数：</p><ul><li>0x00：绝对访问模式(默认)</li><li>0x01：功能访问模式</li></ul><p>绝对访问模式(Absolute Access mode):</p><ul><li>MTA指向从机内部内存扇区的开始。内存扇区在ASAM MCD 2MC从设备中描述文件</li><li>如果需要按一定的顺序清除多个内存扇区，则主设备必须使用新的MTA重复PROGRAM_CLEAR服务。在这种情况下，必须保留Clear提供的扇区序列号</li><li>Clear Range表示需要清除的内存部分的长度。PROGRAM_CLEAR服务一次清除一个完整的扇区或多个扇区</li></ul><p>功能访问模式(Functional Access mode):</p><ul><li><p>MTA功能模式没有影响</p></li><li><p>0x00000001：清除所有校准数据区域</p></li><li>0x00000002：清除所有的代码区(引导区不被覆盖)</li><li>0x00000004：清除NVRAM区域(s)</li><li>0x00000008-0x00000080：保留</li><li>0x00000100-0xFFFFFF00：用户自定义</li></ul><h4 id="0xD0-PROGRAM"><a href="#0xD0-PROGRAM" class="headerlink" title="0xD0:PROGRAM"></a>0xD0:PROGRAM</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xo8qvd-2.webp" alt="PROGRAM"></p><ul><li>如果ADDRESS_GRANULYRITY = DWORD，必须使用2个对齐字节才能满足需求</li><li>元素是BYTE、WORD或DWORD，取决于AG</li><li>该命令用于对从机内部的数据进行编程。取决于访问模式(由PROGRAM_FORMAT定义)支持2个不同的概念</li><li>当数据元素的数量为0时，表示内存段的结束</li><li>整个编程序列的结束由PROGRAM_RESET表示。从设备将进入断开连接状态。通常是硬件复位 从设备执行。此命令可能支持块传输，类似命令DOWNLOAD和DOWNLOAD_NEXT</li></ul><p>绝对访问模式：</p><ul><li>CTO中包含的指定长度(大小)的数据块将被编程非易失性存储器，从MTA开始。MTA将会增加这个数据字节</li><li>如果需要对多个内存扇区进行编程，则主设备必须保持在IF_DATA描述中给出的信息称为的编程序列号</li></ul><p>功能访问方式：</p><ul><li>CTO中包含的指定长度(大小)的数据块将被编程非易失性内存。ECU软件知道新flash内容的起始地址，这取决于PROGRAM_CLEAR命令。ECU期待新的flash内容在一个数据流和分配是由ECU自动完成</li></ul><h4 id="0xCF-PROGRAM-RESET"><a href="#0xCF-PROGRAM-RESET" class="headerlink" title="0xCF:PROGRAM_RESET"></a>0xCF:PROGRAM_RESET</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xoa4ru-2.webp" alt="PROGRAM_RESET"></p><p>此可选命令指示非易失性内存编程序列的结束。它可能会有反应，也可能不会。不管是哪种情况，从设备都会转到断开连接的状态。此命令可用于强制从设备复位</p><h3 id="可选实现指令-3"><a href="#可选实现指令-3" class="headerlink" title="可选实现指令"></a>可选实现指令</h3><h4 id="0xCE-GET-PGM-PROCESSOR-INFO"><a href="#0xCE-GET-PGM-PROCESSOR-INFO" class="headerlink" title="0xCE:GET_PGM_PROCESSOR_INFO"></a>0xCE:GET_PGM_PROCESSOR_INFO</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xobo9v-2.webp" alt="GET_PGM_PROCESSOR_INFO"></p><p>PROPERTIES参数：</p><ul><li>FUNCTIONAL_MODE、ABSOLUTE_MODE=00：清除编程模式 -&gt; 不允许</li><li>FUNCTIONAL_MODE、ABSOLUTE_MODE=01：清除编程模式 -&gt; 只支持绝对模式</li><li><p>FUNCTIONAL_MODE、ABSOLUTE_MODE=10：清除编程模式 -&gt; 仅支持功能模式</p></li><li><p>FUNCTIONAL_MODE、ABSOLUTE_MODE=11：清除编程模式 -&gt; 都支持</p></li><li>COMPRESSION_REQUIRED、COMPRESSION_SUPPORTED=00：压缩 -&gt; 不支持</li><li>COMPRESSION_REQUIRED、COMPRESSION_SUPPORTED=01：压缩 -&gt; 支持</li><li>!COMPRESSION_REQUIRED、COMPRESSION_SUPPORTED=10：压缩 -&gt; 支持、可请求</li><li>COMPRESSION_REQUIRED、COMPRESSION_SUPPORTED=11：压缩 -&gt; 支持、可请求</li><li>ENCRYPTION_REQUIRED、ENCRYPTION_SUPPORTED=00：编码 -&gt; 不支持</li><li>ENCRYPTION_REQUIRED、ENCRYPTION_SUPPORTED=01：编码 -&gt; 支持</li><li>ENCRYPTION_REQUIRED、ENCRYPTION_SUPPORTED=10：编码 -&gt; 支持、可请求</li><li>ENCRYPTION_REQUIRED、ENCRYPTION_SUPPORTED=11：编码 -&gt; 支持、可请求</li><li>NON_SEQ_PGM_REQUIRED、NON_SEQ_PGM_SUPPORTED=00：不连续编程 -&gt; 不支持</li><li>NON_SEQ_PGM_REQUIRED、NON_SEQ_PGM_SUPPORTED=01：不连续编程 -&gt; 支持</li><li>NON_SEQ_PGM_REQUIRED、NON_SEQ_PGM_SUPPORTED=10：不连续编程 -&gt; 支持、可请求</li><li>NON_SEQ_PGM_REQUIRED、NON_SEQ_PGM_SUPPORTED=11：不连续编程 -&gt; 支持、可请求</li></ul><h4 id="0xCD-GET-SECTOR-INFO"><a href="#0xCD-GET-SECTOR-INFO" class="headerlink" title="0xCD:GET_SECTOR_INFO"></a>0xCD:GET_SECTOR_INFO</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xod5tr-2.webp" alt="GET_SECTOR_INFO"></p><p>GET_SECTOR_INFO返回特定扇区的信息。如果指定的扇区不可用，则返回ERR_OUT_OF_RANGE。此可选命令仅对编程方法“绝对访问模式”有帮助</p><h4 id="0xCC-PROGRAM-PREPARE"><a href="#0xCC-PROGRAM-PREPARE" class="headerlink" title="0xCC:PROGRAM_PREPARE"></a>0xCC:PROGRAM_PREPARE</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xoe3lm-2.webp" alt="PROGRAM_PREPARE"></p><p>此可选命令用于先决条件的代码下载到非易失性内存开始前。MTA指向易失性存储器的开始存储代码的位置。参数Codesize指定将被下载的代码大小。下载是使用后续标准完成的命令，如SET_MTA和DOWNLOAD。 代码大小根据AG以BYTE、WORD或DWORD表示。从设备必须确保目标内存区域是可用的，并且它在允许下载代码的操作状态。如果不是，则ERR_GENERIC将返回</p><h4 id="0xCB-PROGRAM-FORMAT"><a href="#0xCB-PROGRAM-FORMAT" class="headerlink" title="0xCB:PROGRAM_FORMAT"></a>0xCB:PROGRAM_FORMAT</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xofg48-2.webp" alt="PROGRAM_FORMAT"></p><p>Compression参数：</p><ul><li><p>0x00：数据未压缩(默认)</p></li><li><p>0x80-0xFF：用户定义</p></li></ul><p>Encryption参数：</p><ul><li>0x00：数据未编码(默认)</li><li>0x80-0xFF：用户定义</li></ul><p>Programming参数：</p><ul><li>0x00：顺序编程(默认)</li><li>0x80-0xFF：用户定义</li></ul><p>Access参数：</p><ul><li>0x00：绝对访问模式(默认) MTA使用物理地址</li><li>0x01：功能访问方式 MTA的功能是一个新flash内容文件的序列号</li><li>0x80-0xFF：用户定义</li></ul><p>受该指令影响的指令：PROGRAM, PROGRAM_MAX, PROGRAM_NEXT, SET_MTA</p><p>Example： … SET_MTA PROGRAM_FORMAT PROGRAM PROGRAM_NEXT1..n …</p><h4 id="0xCA-PROGRAM-NEXT"><a href="#0xCA-PROGRAM-NEXT" class="headerlink" title="0xCA:PROGRAM_NEXT"></a>0xCA:PROGRAM_NEXT</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xogns6-2.webp" alt="PROGRAM_NEXT"></p><blockquote><p>如果AG = DWORD，则必须使用2个对齐字节以满足对齐要求。 ELEMENT是BYTE, WORD或DWORD，取决于AG。 该命令用于为PROGRAM命令传输连续的数据字节块传输模式</p></blockquote><p>如果数据元素的数量与期望值不匹配，则错误码将返回code ERR_SEQUENCE。回应将包含预期的数据元素数量</p><h4 id="0xC9-PROGRAM-MAX"><a href="#0xC9-PROGRAM-MAX" class="headerlink" title="0xC9:PROGRAM_MAX"></a>0xC9:PROGRAM_MAX</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xoija6-2.webp" alt="PROGRAM_MAX"></p><blockquote><p>根据AG的不同，必须使用1或3个对齐字节来满足对齐要求。 ELEMENT是BYTE, WORD或DWORD，取决于AG。 CTO中包含的MAX_CTO-1元素长度固定的数据块为编程到非易失性存储器中，从MTA开始。MTA将进行后增量MAX_CTO-1。 此命令不支持块传输，也不能在块传输中使用序列</p></blockquote><h4 id="0xC8-PROGRAM-VERIFY"><a href="#0xC8-PROGRAM-VERIFY" class="headerlink" title="0xC8:PROGRAM_VERIFY"></a>0xC8:PROGRAM_VERIFY</h4><p><img src="https://imgs.myan.run/i/2023/12/25/xost15-2.webp" alt="PROGRAM_VERIFY"></p><p>使用Mode = 00，主机可以请求从机启动内部测试例程来检查新的flash内容是否验算等于flash的其余部分。 使用Mode = 01，主机可以告诉从机，发送给从机一个验证值</p><p>Verification Type参数：</p><ul><li>0x0001：calibration area(s) of the flash</li><li>0x0002：code area(s) of the flash</li><li>0x0004：complete flash content</li><li>0x0008-0x0080：保留</li><li>0x0100-0xFF00：用户定义</li></ul>]]></content>
      
      
      <categories>
          
          <category> 汽车电子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XCP标定协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式基础(二)</title>
      <link href="/posts/1898197937/"/>
      <url>/posts/1898197937/</url>
      
        <content type="html"><![CDATA[<h3 id="C语言相关"><a href="#C语言相关" class="headerlink" title="C语言相关"></a>C语言相关</h3><details class="folding-tag" cyan><summary> 查看相关知识 </summary>              <div class='content'>              <p>14.预处理指令和多文件编程</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <p>(1)预处理指令</p><ul><li><p>以<code>#</code>开头的都是预处理指令，在预处理阶段会处理的指令</p></li><li><p>预处理—gcc -E xxx.c -o xxx.i</p></li><li><p>宏</p><ul><li><code>#define</code>预处理指令可以用来定义宏</li><li>格式：#define 宏名称 (宏值)</li><li>宏名通常都是由大写英文字符构成，宏名不可包括空格；用宏给数字命名时，不可使用赋值操作符，不自增自减</li><li>宏能够给表达式命名，宏的参数可以用来表示表达式的未知数字；格式：#define 宏名称(参数列表) (宏值表达式)</li><li>宏只检查参数个数，不检查参数类型</li><li>可以在编译命令里使用-D选项指定宏所代表的数字；由于有些数字在编写程序时无法确定，只有在编译的时候才知道，这个时候需要在程序里使用宏名称代表它们，然后再编译时用数字替换这些宏</li><li><p>宏操作符</p><ul><li><code>#</code>是一个宏操作符，能够将宏的参数转换成字符串</li><li><code>##</code>是一个宏操作符，可以将一个代表标识符的参数和其他内容连接为一个新的标识符</li><li>编译器内置宏—预定义宏；默认已经定义好的宏，直接使用即可，如下表</li></ul></li></ul><p>| 宏           | 占位符 | 含义           |<br>| —————— | ——— | ——————— |<br>| <strong>FILE</strong>     | %s     | 所在文件名     |<br>| <strong>LINE</strong>     | %d     | 所在行号       |<br>| <strong>FUNCTION</strong> | %s     | 所在函数名     |<br>| <strong>func</strong>     | %s     | 所在函数名     |<br>| <strong>DATE</strong>     | %s     | 编译该文件日期 |<br>| <strong>TIME</strong>     | %s     | 编译该文件时间 |</p></li><li><p>案例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PI (3.14)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> r=<span class="number">10</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;周长=%lg\n&quot;</span>,<span class="number">2</span>*PI*r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE(x) ((x)*(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQUARE1(x) (x*x)<span class="comment">//不加括号会导致一定逻辑错误</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUB(x,y) ((x)-(y))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT(N) (printf(#N<span class="string">&quot;=%d\n&quot;</span>,N))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ID(N) (id##N)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,SQUARE(<span class="number">100</span>));<span class="comment">//10000</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lg\n&quot;</span>,SQUARE(<span class="number">5.6</span>));<span class="comment">//31.36</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,SQUARE(<span class="number">15</span>+<span class="number">5</span>));<span class="comment">//400</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,SQUARE1(<span class="number">15</span>+<span class="number">5</span>));<span class="comment">//95</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;99-76=%d\n&quot;</span>,SUB(<span class="number">99</span>,<span class="number">76</span>));<span class="comment">//96-76=23</span></span><br><span class="line">    <span class="type">int</span> a=<span class="number">100</span>,b=<span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d-%d=%d\n&quot;</span>,a,b,SUB(a,b));<span class="comment">//100-20=80</span></span><br><span class="line">    PRINT(a);<span class="comment">//(printf(&quot;a&quot;&quot;=%d\n&quot;,N)//a=100</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">ID</span><span class="params">(<span class="number">1</span>)</span>=<span class="number">100</span>,ID(<span class="number">2</span>)=<span class="number">101</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;id1=%d,id2=%d\n&quot;</span>,id1,id2);<span class="comment">//id1=100,id2=101</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[SIZE];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;SIZE;i++)&#123;</span><br><span class="line">        arr[i]=i+<span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;SIZE;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,TODAY);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************命令行**************************************/</span></span><br><span class="line">gcc -DSIZE=<span class="number">10</span> define2.c -o define2</span><br><span class="line">gcc -DSIZE=<span class="number">10</span> -DTODAY=\<span class="string">&quot;Friday\&quot; define2.c -o define2 //字符的输入需要注意</span></span><br><span class="line"><span class="string">/*******************************************************/</span></span><br><span class="line"><span class="string">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="string">int main ()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">   printf(&quot;</span>File :%s\n<span class="string">&quot;, __FILE__ );</span></span><br><span class="line"><span class="string">   printf(&quot;</span>Date :%s\n<span class="string">&quot;, __DATE__ );</span></span><br><span class="line"><span class="string">   printf(&quot;</span>Time :%s\n<span class="string">&quot;, __TIME__ );</span></span><br><span class="line"><span class="string">   printf(&quot;</span>Line :%d\n<span class="string">&quot;, __LINE__ );</span></span><br><span class="line"><span class="string">   return(0);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>条件编译—-条件成立编译，不成立不编译；条件编译应用：一套代码可以适应不同的硬件平台，根据硬件平台生成代码；案例如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> A (1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B (10)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C (100)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D (1000)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> A==1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> B==1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> C</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;5\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> C</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;6\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;7\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> D==100</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;8\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> D==1000</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;9\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;10\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>(2)多文件编程</p><p>1.单文件程序改造多文件程序步骤</p><ul><li>把所有函数分散在多个不同的源文件里(主函数main.c)</li><li>为每个源文件编写配对的以.h作为扩展名的头文件(主函数不需要)，头文件使用的宏名称必须根据文件名称变化得到，例如a.h→__A__H</li><li>为所有源文件使用#include预处理指令包含必要的头文件</li></ul><p>2.头文件卫士</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifdef</span> 宏名称</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> 宏名称</span></span><br><span class="line">头文件内容</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SWAP__H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SWAP__H</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span>*,<span class="type">int</span>*)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>3.多文件编译</p><p>快捷指令：vim xxx xxx xxx 同时打开多个文件；使用gt在多个文件之间切换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c swap.c -o swap</span><br></pre></td></tr></table></figure><p>4.Makefile</p><ul><li><p>可以将多文件程序的编译步骤记录在Makefile文件中，使用make工具按照Makefile文件里记录的步骤完成编译</p></li><li><p>Makefile文件每个编译命令都不可使用空格字符而应该使用tab键</p></li><li><p>Makefile是一个文本文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">目标：依赖文件</span><br><span class="line">由依赖文件生成目标的命令</span><br><span class="line">main:main.o cal.o</span><br><span class="line">        gcc main.o cal.o -o main</span><br><span class="line">main.o:main.c</span><br><span class="line">        gcc -c main.c -o main.o</span><br><span class="line">cal.o:cal.c</span><br><span class="line">        gcc -c cal.c -o cal.o</span><br></pre></td></tr></table></figure></li><li><p>由<code>.c</code>文件得到对应的<code>.o</code>文件的小技巧</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">上述代码可缩短为以下代码</span><br><span class="line">main:main.o cal.o</span><br><span class="line">        gcc main.o cal.o -o main</span><br><span class="line">%.o:%.c</span><br><span class="line">        gcc -c $&lt; -o $@</span><br></pre></td></tr></table></figure></li><li><p>伪目标即没有依赖的目标，终端输入<code>make clean</code>指令，即可执行Makefile文件的如下代码执行删除文件的指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clean:</span><br><span class="line">        rm main main.o cal.o</span><br></pre></td></tr></table></figure></li><li><p>使用变量-宏简化操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#变量 -宏</span><br><span class="line">OBJ=main.o cal.o</span><br><span class="line">BIN=main</span><br><span class="line">CC=gcc</span><br><span class="line">RM=rm</span><br><span class="line">$(BIN):$(OBJ)</span><br><span class="line">        $(CC) $(OBJ) -o main</span><br><span class="line"></span><br><span class="line">%.o:%.c</span><br><span class="line">        $(CC) -c $&lt; -o $@</span><br><span class="line"></span><br><span class="line">#伪目标</span><br><span class="line">#没有依赖的目标</span><br><span class="line">#make clean</span><br><span class="line">clean:</span><br><span class="line">        $(RM) $(BIN) $(OBJ)</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><p>15.结构体</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li><p>结构体类型的存储区可以包含多个子存储区，不同子存储区的类型可以不同，子存储区也可以是结构体类型的存储区</p></li><li><p>结构体里不可包含函数</p></li><li><p>结构体声明语句因为不分配内存可以写在头文件里</p></li><li><p>结构体变量的声明、定义以及输入输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********声明方式1***********/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">s1</span>=</span>&#123;<span class="string">&quot;MYAN&quot;</span>,<span class="number">25</span>&#125;;</span><br><span class="line"><span class="comment">/************声明方式2*********/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu_t</span>;</span></span><br><span class="line"><span class="type">stu_t</span> s2=&#123;<span class="string">&quot;CSC&quot;</span>,<span class="number">24</span>&#125;;</span><br><span class="line"><span class="comment">/************声明方式3*********/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;<span class="type">stu_t</span>;</span><br><span class="line"><span class="type">stu_t</span> s2=&#123;<span class="string">&quot;CSC&quot;</span>,<span class="number">24</span>&#125;;</span><br><span class="line"><span class="comment">/*************输出************/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>,s1.name,s1.age);</span><br><span class="line"><span class="comment">/*************输入************/</span></span><br><span class="line"><span class="type">stu_t</span> s3=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input name:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s3.name);<span class="comment">//由于name成员变量是数组，因此s3.name表示地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;please input age:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;s3.age);<span class="comment">//由于age是整型变量，因此&amp;s3.age表示地址</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>结构体指针可以记录结构体存储区的地址，建立对应的捆绑关系，以下写法可以通过结构体指针表示结构体的子存储区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">stu_t</span> *ps2=&amp;s2;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>,ps2-&gt;name,ps2-&gt;age);</span><br></pre></td></tr></table></figure></li><li><p>结构体作为函数参数，可以直接使用结构体类型的形式参数从调用函数向被调用函数传递结构体数据，直接使用结构体类型的形式参数会造成时间和空间的浪费，使用结构体指针类型的参数可以避免浪费，使用结构体指针作为形式参数的时候，如果不希望通过结构体指针修改结构体的数据，可以添加const关键字声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;<span class="type">stu_t</span>;</span><br><span class="line"><span class="comment">/*************结构体作为形式参数*************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">show</span><span class="params">(<span class="type">stu_t</span> s)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s,%d\n&quot;</span>,s.name,s.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***********结构体指针作为形式参数***********/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">show_p</span><span class="params">(<span class="type">const</span> <span class="type">stu_t</span>* ps)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s:%d\n&quot;</span>,ps-&gt;name,ps-&gt;age);</span><br><span class="line">   <span class="comment">// ps-&gt;age++;//ok 加const关键字则不可以</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结构体作为返回值，可以把结构体类型的变量直接作为返回值使用，这样可以从被调用函数向调用函数传递结构体数据，但是这样会造成时间和空间的浪费，使用结构体存储区的地址作为返回值可以避免这个问题，但是需要注意的是不可以把局部结构体存储区的地址作为返回值使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">&#125;<span class="type">stu_t</span>;</span><br><span class="line"><span class="comment">/*************结构体作为返回值*************/</span></span><br><span class="line"><span class="type">stu_t</span> <span class="title function_">get_stu_info</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">stu_t</span> s=&#123;<span class="string">&quot;LX&quot;</span>,<span class="number">27</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***********结构体指针作为返回值***********/</span></span><br><span class="line"><span class="type">stu_t</span>* <span class="title function_">get_stu_info_p</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">stu_t</span> s=&#123;<span class="string">&quot;HL&quot;</span>,<span class="number">18</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> &amp;s;<span class="comment">//直接返回局部变量的地址，不可行，加static可行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结构体数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">stu_t</span> a[<span class="number">3</span>]=&#123;</span><br><span class="line">    &#123;<span class="string">&quot;MYAN&quot;</span>,<span class="number">25</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;GMN&quot;</span>,<span class="number">26</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;LX&quot;</span>,<span class="number">27</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s:%d\n&quot;</span>,a[i].name,a[i].age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结构体嵌套结构体：<code>.</code>前面是变量名，<code>-&gt;</code>前面是指针名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">birthday</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> year;</span><br><span class="line">    <span class="type">int</span> month;</span><br><span class="line">    <span class="type">int</span> day;</span><br><span class="line">&#125;<span class="type">birth_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">32</span>];</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    <span class="type">birth_t</span> birth;</span><br><span class="line">&#125;<span class="type">stu_t</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">stu_t</span> s=&#123;<span class="string">&quot;JACK&quot;</span>,<span class="number">18</span>,&#123;<span class="number">2006</span>,<span class="number">5</span>,<span class="number">18</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s:%d\n&quot;</span>,s.name,s.age);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d:%d:%d\n&quot;</span>,s.birth.year,s.birth.month,s.birth.day);</span><br><span class="line">    <span class="type">stu_t</span>* ps=&amp;s;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s:%d\n&quot;</span>,ps-&gt;name,ps-&gt;age);</span><br><span class="line">    <span class="comment">/*ps-&gt;birth是变量，因此使用ps-&gt;birth.month表示月份*/</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d:%d:%d\n&quot;</span>,ps-&gt;birth.year,ps-&gt;birth.month,ps-&gt;birth.day);</span><br><span class="line">    ps-&gt;birth.year=<span class="number">2005</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>内存对齐和补齐</p><ul><li>4字节对齐：结构体中每个成员的起始地址必须是其自身大小的整数倍，超过4字节的按照4字节算</li><li>4字节补齐：结构体存储区的大小必须是4的整数倍</li><li>8字节补齐：结构体存储区的大小必须是8的整数倍(64位系统)</li><li><code>#pragma pack(n)</code>代码以n字节对齐补齐</li></ul></li></ul>              </div>            </details><p>16.联合体</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li><p>联合体成员变量对应的存储区在内存里互相重叠，联合体成员变量的开始地址相同，联合体的大小为占内存最多的成员变量的大小</p></li><li><p>联合体成员不是相互独立的，且同一时间只能使用一个联合体成员</p></li><li><p>联合体在解决判断内存存储是大段存储还是小端存储的优势</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">U</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">&#125;u;<span class="comment">//联合体变量创建方法类比结构体 </span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">u.i = <span class="number">1</span>;      <span class="comment">//0x 00 00 00 01（变量i为int类型，有四个字节，32bit）</span></span><br><span class="line"><span class="comment">/*    低地址-----------------------------------------------------&gt;高地址</span></span><br><span class="line"><span class="comment">   hex：01 00 00 00    bin：0000 0001 0000 0000 0000 0000 0000 0000  小端存储 低位放低地址</span></span><br><span class="line"><span class="comment">   hex：00 00 00 01    bin：0000 0000 0000 0000 0000 0000 0000 0001  大端存储 低位放高地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//变量c为char类型，只有一个字节，取前8bit即可</span></span><br><span class="line">    <span class="keyword">if</span> (u.c == <span class="number">1</span>)       <span class="comment">//即u.c = 0000 0001</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;小端&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;大端&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//声明联合体数据类型　不占内存空间</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">person</span>&#123;</span></span><br><span class="line">    <span class="type">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="type">char</span> sex;</span><br><span class="line">    <span class="type">char</span> job; </span><br><span class="line">    <span class="class"><span class="keyword">union</span>&#123;</span></span><br><span class="line">        <span class="type">int</span> <span class="class"><span class="keyword">class</span>;</span> <span class="comment">//班级</span></span><br><span class="line">        <span class="type">char</span> position[<span class="number">10</span>];<span class="comment">//位置　讲师　教授</span></span><br><span class="line">    &#125;category; <span class="comment">//定义了联合体类型变量category</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">person</span> <span class="title">persons</span>[2] =</span>&#123;</span><br><span class="line">        &#123;.name=<span class="string">&quot;小明&quot;</span>, .sex=<span class="string">&#x27;m&#x27;</span>, .job=<span class="string">&#x27;s&#x27;</span>, .category.class = <span class="number">2007</span>&#125;,</span><br><span class="line">        &#123;.name=<span class="string">&quot;老张&quot;</span>, .sex=<span class="string">&#x27;f&#x27;</span>, .job=<span class="string">&#x27;t&#x27;</span>, .category.position=<span class="string">&quot;教授&quot;</span>&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(persons)/<span class="keyword">sizeof</span>(persons[<span class="number">0</span>]); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(persons[i].job == <span class="string">&#x27;s&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;姓名: %s  性别:%c  班级:%d\n&quot;</span>, persons[i].name,</span><br><span class="line">                    persons[i].sex, persons[i].category.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;姓名: %s  性别:%c  职称:%s\n&quot;</span>, persons[i].name,</span><br><span class="line">                    persons[i].sex, persons[i].category.position);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><p>17.枚举</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li>枚举是一个有限整型常量的列表，每个枚举值都是一个符号常量，默认从0开始，向后依次加1</li><li>枚举定义了一些符号，这些符号的本质就是int类型的常量，每个符号和一个常量绑定。这个符号就表示一个自定义的一个识别码，编译器对枚举的认知就是符号常量所绑定的那个int类型的数字</li></ul><blockquote><p>使用枚举其实就是对一些数字进行符号化编码，这样的好处就是编程时可以不用看数字而直接看符号。符号能够见名知意，而数字所代表的含义需要看文档或者注释</p><p>枚举能够实现的，宏定义也能实现，但是二者之间有所区别，区别如下：<br>1、枚举是将多个有关联的符号封装在一个枚举中，而宏定义是完全散的。即枚举是多选一，且只能在这里面选，能防止不符合的数据输入<br>2、当要定义的常量是一个有限集合时，最适合用枚举<br>3、不适合用枚举的情况下（比如定义的常量符号之间无关联，或者无限的）使用宏定义</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先定义类型</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span>    //类型名称就是<span class="title">enum</span> <span class="title">DAY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">      MON=<span class="number">1</span>, TUE, WED, THU, FRI, SAT, SUN</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//后声明变量</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">yesterday</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">today</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">tomorrow</span>;</span> <span class="comment">//变量tomorrow的类型为枚举型enum DAY</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DAY</span> <span class="title">good_day</span>, <span class="title">bad_day</span>;</span> <span class="comment">//变量good_day和bad_day的类型均为枚举型enum DAY</span></span><br></pre></td></tr></table></figure>              </div>            </details><p>18.二级指针</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li><p>二级指针用来记录一级指针的地址</p></li><li><p>定义<code>int ** ppa=&amp;pa</code></p></li><li><p>二级指针变量名称前写<code>**</code>可以表示它所捆绑的普通类型存储区</p></li><li><p>函数中修改外部一级指针的值，需要传递二级指针才可修改有效</p></li><li><p>函数名称可以用来表示函数地址，函数指针用来记录函数的地址；函数指针格式<code>返回类型 (*函数指针变量)(形参表)=函数名</code>，通过函数指针调用函数的格式<code>函数指针变量(实参表)</code></p></li><li><p>使用函数指针作为形参的函数被称为回调函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span> *pa=&amp;a;</span><br><span class="line">    <span class="type">int</span> **ppa=&amp;pa;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,*pa=%d,**ppa=%d\n&quot;</span>,a,*pa,**ppa);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a=%p,pa=%p,*ppa=%p\n&quot;</span>,&amp;a,pa,*ppa);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ppa=%p,&amp;pa=%p\n&quot;</span>,ppa,&amp;pa);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;ppa=%p\n&quot;</span>,&amp;ppa);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>** argv)</span>&#123;<span class="comment">//字符指针数组可以使用二级指针代替</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;argc;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;argv[%d]=%s\n&quot;</span>,i,argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">char</span>** s1,<span class="type">char</span> **s2)</span>&#123;</span><br><span class="line">    <span class="type">char</span>* temp=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    temp=*s1;</span><br><span class="line">    *s1=*s2;</span><br><span class="line">    *s2=temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">char</span>* s1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">char</span>* s2=<span class="string">&quot;world&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1=%s,s2=%s\n&quot;</span>,s1,s2);</span><br><span class="line">    swap(&amp;s1,&amp;s2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;s1=%s,s2=%s\n&quot;</span>,s1,s2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> (*p)(<span class="type">int</span>,<span class="type">int</span>)=add;<span class="comment">//函数指针</span></span><br><span class="line">    <span class="type">int</span> sum=p(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    p=sub;</span><br><span class="line">    <span class="type">int</span> ret =p(<span class="number">400</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*<span class="type">pfunc_t</span>)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">pfunc_t</span> p=add;<span class="comment">//函数指针</span></span><br><span class="line">    <span class="type">int</span> sum=p(<span class="number">100</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">    <span class="type">pfunc_t</span> p1=sub;</span><br><span class="line">    <span class="type">int</span> ret =p1(<span class="number">400</span>,<span class="number">200</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*<span class="type">pfunc_t</span>)</span><span class="params">(<span class="type">int</span>,<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cal</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">pfunc_t</span> pfunc)</span>&#123;<span class="comment">//函数指针作为形参--回调函数</span></span><br><span class="line">    <span class="keyword">return</span> pfunc(a,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cal(<span class="number">100</span>,<span class="number">200</span>,add));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cal(<span class="number">100</span>,<span class="number">200</span>,sub));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><p>19.动态分配内存</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li>动态内存分配：在程序运行时，临时决定需要分配的存储区个数，为了管理动态分配内存需要使用一组标准函数，这些标准函数位于<code>stdlib.h</code>头文件中</li><li>malloc函数能够动态分配一组连续的存储区，该函需要一个整型参数表示分配的字节数，它的返回值表示分配好的第一个字节的地址，如果内存分配失败就返回NULL，返回值记录在无类型指针存储中，需要强制类型转换成有类型指针才可使用</li><li>计算机不会主动回收动态分配的内存，因此防止内存泄漏，需要使用free函数释放动态内存分配，该函数需要地址作为参数，另外释放完动态内存后，需要将指针设置成空指针</li><li>calloc函数，需要两个参数，第一个参数为分配存储区的个数，第二个参数时分配存储区的大小；calloc与malloc函数的区别为，前者分配的存储区全部初始化为0，而malloc函数分配的存储区为随机数</li><li>realloc函数需要两个参数，第一个参数为首地址，第二个参数为从首地址上调整的字节个数；若扩充内存大小，原有字节的内容也不会发生改变；若缩小内存大小，则自动舍弃后几个字节的内容</li><li>局部变量位于栈区，全局变量和静态变量位于常量区，动态分配存储区位于堆区</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> *p=<span class="literal">NULL</span>;</span><br><span class="line">    p=(<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*<span class="number">5</span>);</span><br><span class="line">    <span class="comment">//p=(int *)calloc(5,sizeof(int));</span></span><br><span class="line">    <span class="comment">//p=realloc(p,10*sizeof(int));</span></span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;memeory allocation failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;memeory allocation success\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;分配好的存储区的首地址为:%p\n&quot;</span>,p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        *(p+i)=<span class="number">100</span>+i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(p);<span class="comment">//释放p所捆绑的存储区-堆区p的值仍为动态存储区的地址</span></span><br><span class="line">    p=<span class="literal">NULL</span>;<span class="comment">// 避免野指针出现</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>18.文件操作</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li><p>文件操作步骤</p><ul><li><p>打开文件—fopen：该函数需要两个参数，第一个参数文件路径，第二个参数打开方式，返回值为<code>FILE*</code>类型，表示打开的文件；如果文件打开失败，则返回NULL</p><ul><li>r—只读，文件必须存在，从头开始读</li><li>w—只写，文件不存在就创建，存在就清空，从头开始写</li><li>a—追加，文件不存在就创建，存在不清空，从尾开始写</li><li>r+—读写，文件必须存在，从头开始读写</li><li>w+—读写，文件不存在就创建，存在就清空，从头开始读写</li><li>a+—追读，文件不存在就创建，存在不清空，从头开始读，从尾开始写</li></ul></li><li><p>操作文件—fwrite/fread</p><ul><li><p>fwrite写入操作，第一个参数是向文件中写入的数据的存储区的首地址，第二个参数是写入元素占据的字节数，第三个参数是写入的元素个数，第四个参数是写入的文件的文件指针，返回值为实际写入的元素个数</p></li><li><p>fread读操作，第一个参数是从文件中读取的数据要存储到的存储区的首地址，第二个参数是读取的每个元素占据的字节数，第三个参数是要读取的元素个数，第四个参数是要读取文件的文件指针，返回值是实际读取元素的个数</p></li><li><p>文件读写位置：计算机里为每个打开的文件保留一个整数，这个整数表示下一次文件读写操作的开始位置；这个整数就是文件头到这个位置之间包含的字节个数，这个整数叫做文件的位置指针；每当从文件里获取n个字节或向文件里写入n个字节以后，位置指针都会向后移动n个字节；(1)ftell函数可以用来获取位置指针的数值(返回值为long类型)；(2)rewind函数可以把位置指针移动到文件开头；(3)fseek函数可以把位置指针移动到文件里的任何位置，该函数需要三个参数：第一个参数为文件指针，表示要操作的文件；第二个参数为偏移量；第三个参数为基准位置(SEEK_SET：把文件头作为基准位置；SEEK_CUR：把当前位置作为基准位置；SEEK_END：把文件尾作为基准位置)</p></li><li><p>fprintf将数字记录到文件中，fscanf从文本里获得的数据记录到存储区，这两个函数执行效率比较低，不适合处理大数据量的文件</p></li><li><p>三个标准文件指针：标准输入—stdin—键盘；标准输出—stdout—终端窗口；标准错误—stderr—终端窗口；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);<span class="comment">/**等价于**/</span><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>,<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);<span class="comment">/**等价于**/</span><span class="built_in">fscanf</span>(<span class="built_in">stdin</span>,<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>关闭文件—fclose，该函数的参数为文件指针即fopen的返回值；若文件正常关闭，则返回值为0，否则返回值为非0；同时文件指针需要设置为NULL</p></li></ul></li><li><p>案例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="comment">/**************打开文件***********/</span></span><br><span class="line">    FILE* fp= fopen(<span class="string">&quot;a.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(fp==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;can not open the file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;open the file success\n&quot;</span>);</span><br><span class="line">    <span class="comment">/**************文件读写操作***********/</span></span><br><span class="line">    <span class="type">int</span> size=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">8</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">    <span class="type">int</span> len=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);</span><br><span class="line">    size= fwrite(a,<span class="keyword">sizeof</span>(<span class="type">int</span>),len,fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;实际写入%d个数据\n&quot;</span>,size);</span><br><span class="line">    rewind(fp);</span><br><span class="line">    <span class="type">int</span> b[<span class="number">8</span>]=&#123;&#125;;</span><br><span class="line">    size=fread(b,<span class="keyword">sizeof</span>(<span class="type">int</span>),<span class="number">8</span>,fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;实际读取%d个数据\n&quot;</span>,size);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,b[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="comment">/**************文件读写位置***********/</span></span><br><span class="line"><span class="type">int</span> c[<span class="number">2</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">fseek(fp,<span class="number">8</span>,SEEK_SET);</span><br><span class="line">fread(c,<span class="keyword">sizeof</span>(<span class="type">int</span>),<span class="number">2</span>,fp);<span class="comment">//3 4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>,c[<span class="number">0</span>],c[<span class="number">1</span>]);</span><br><span class="line">fseek(fp,<span class="number">8</span>,SEEK_CUR);</span><br><span class="line">fread(c,<span class="keyword">sizeof</span>(<span class="type">int</span>),<span class="number">2</span>,fp);<span class="comment">//7 8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>,c[<span class="number">0</span>],c[<span class="number">1</span>]);</span><br><span class="line">fseek(fp,<span class="number">-12</span>,SEEK_END);</span><br><span class="line">fread(c,<span class="keyword">sizeof</span>(<span class="type">int</span>),<span class="number">2</span>,fp);<span class="comment">//6 7</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d,%d\n&quot;</span>,c[<span class="number">0</span>],c[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;current position:%ld\n&quot;</span>,ftell(fp));</span><br><span class="line">fclose(fp);</span><br><span class="line">fp=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    FILE* fp=fopen(<span class="string">&quot;b.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">20</span>]=&#123;&#125;;</span><br><span class="line">    <span class="type">double</span> d=<span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">fscanf</span>(fp,<span class="string">&quot;%d%s%lg&quot;</span>,&amp;a,str,&amp;d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,str=%s,d=%lg\n&quot;</span>,a,str,d);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    fp=<span class="literal">NULL</span>;</span><br><span class="line">    FILE* fpw=fopen(<span class="string">&quot;c.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fpw,<span class="string">&quot;%d,%s,%lg\n&quot;</span>,a,str,d);</span><br><span class="line">    fclose(fpw);</span><br><span class="line">    fpw=<span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************************************/</span></span><br></pre></td></tr></table></figure></li></ul>              </div>            </details>              </div>            </details><h2 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法</h2><details class="folding-tag" cyan><summary> 查看相关知识 </summary>              <div class='content'>              <p>一、数据结构</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <p>1.基本概念</p><details class="folding-tag" green><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li>数据结构分为逻辑结构与物理结构<ul><li>逻辑结构：数据与数据之间的相互关系；集合结构、线性结构、树形结构(一对多)、图形结构(多对多)</li><li>物理结构：数据在计算机中的存储形式；顺序存储结构、链式存储结构</li></ul></li></ul>              </div>            </details><p>2.栈</p><details class="folding-tag" green><summary> 查看相关知识 </summary>              <div class='content'>              <p>栈特点：先进后出，后进先出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stack.h:栈的各种声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __STACK_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __STACK_H</span></span><br><span class="line"><span class="comment">//包含公共的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//声明描述栈的属性的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stack</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> *arr; <span class="comment">//首地址</span></span><br><span class="line">    <span class="type">int</span> cap; <span class="comment">//容量</span></span><br><span class="line">    <span class="type">int</span> top; <span class="comment">//记录栈顶位置</span></span><br><span class="line">&#125;<span class="type">stack_t</span>;</span><br><span class="line"><span class="comment">//stack_t stack;//是否分配了内存 </span></span><br><span class="line"><span class="comment">//声明栈的操作函数 </span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">stack_init</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>, <span class="type">int</span> cap)</span>; <span class="comment">//初始化栈</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">stack_deinit</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>)</span>;<span class="comment">//释放栈内存</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">stack_full</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>)</span>;<span class="comment">//判断栈是否满</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">stack_empty</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>)</span>;<span class="comment">//判断栈是否空</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">stack_push</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>, <span class="type">int</span> data)</span>; <span class="comment">//压栈</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>)</span>; <span class="comment">//出栈</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">stack_size</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>)</span>;<span class="comment">//获取栈中有效数据个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stack.c:栈的各种定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"><span class="comment">//定义栈的初始化函数 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_init</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>, <span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;arr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*cap);<span class="comment">//给栈分配内存</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;cap = cap; <span class="comment">//初始化容量</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="number">0</span>; <span class="comment">//空栈,一开始没有数据 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义栈内存释放函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_deinit</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">stack</span>-&gt;arr);<span class="comment">//释放栈内存</span></span><br><span class="line">    <span class="built_in">stack</span>-&gt;cap = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义判断栈空和满的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_full</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>-&gt;top == <span class="built_in">stack</span>-&gt;cap; <span class="comment">//满返回1,否则返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_empty</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>-&gt;top == <span class="number">0</span>;<span class="comment">//空返回1,否则返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义压栈函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">stack_push</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;arr[<span class="built_in">stack</span>-&gt;top] = data;</span><br><span class="line">    <span class="built_in">stack</span>-&gt;top++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义出栈函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_pop</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>-&gt;arr[--<span class="built_in">stack</span>-&gt;top];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义获取栈有效数据个数函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">stack_size</span><span class="params">(<span class="type">stack_t</span> *<span class="built_in">stack</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">stack</span>-&gt;top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c:测试</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span> <span class="comment">//声明</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;  </span><br><span class="line">    <span class="comment">//定义栈变量</span></span><br><span class="line">    <span class="type">stack_t</span> <span class="built_in">stack</span>;<span class="comment">//arr, cap, top </span></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="comment">//通过stack的地址来访问stack的arr,cap,top </span></span><br><span class="line">    <span class="comment">//stack_t* stack = &amp;stack;</span></span><br><span class="line">    stack_init(&amp;<span class="built_in">stack</span>, <span class="number">10</span>);<span class="comment">//指定容量是10</span></span><br><span class="line">    <span class="type">int</span> data = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(!stack_full(&amp;<span class="built_in">stack</span>))<span class="comment">//循环压栈</span></span><br><span class="line">        stack_push(&amp;<span class="built_in">stack</span>, data++);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有效个数是:%d\n&quot;</span>, stack_size(&amp;<span class="built_in">stack</span>));</span><br><span class="line">    <span class="keyword">while</span>(!stack_empty(&amp;<span class="built_in">stack</span>))<span class="comment">//循环出栈</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, stack_pop(&amp;<span class="built_in">stack</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有效个数是:%d\n&quot;</span>, stack_size(&amp;<span class="built_in">stack</span>));</span><br><span class="line">    stack_deinit(&amp;<span class="built_in">stack</span>); <span class="comment">//释放内存</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>3.队列</p><details class="folding-tag" green><summary> 查看相关知识 </summary>              <div class='content'>              <p>队列特点：先进先出，后进后出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//queue.h:队列的声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __QUEUE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __QUEUE_H</span></span><br><span class="line"><span class="comment">//包含功能的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//声明描述队列属性的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">queue</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> *arr; <span class="comment">//首地址</span></span><br><span class="line">    <span class="type">int</span> cap;<span class="comment">//容量</span></span><br><span class="line">    <span class="type">int</span> size; <span class="comment">//有效数据个数</span></span><br><span class="line">    <span class="type">int</span> rear; <span class="comment">//用于入队</span></span><br><span class="line">    <span class="type">int</span> front; <span class="comment">//用于出队</span></span><br><span class="line">&#125;<span class="type">queue_t</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">queue_init</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>, <span class="type">int</span> cap)</span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">queue_deinit</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>)</span>;<span class="comment">//释放内存</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">queue_full</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>)</span>;<span class="comment">//判断满</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">queue_empty</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>)</span>;<span class="comment">//判断空</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">queue_push</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>, <span class="type">int</span> data)</span>;<span class="comment">//入队</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">queue_pop</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>)</span>;<span class="comment">//出队</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">queue_size</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>)</span>;<span class="comment">//获取有效数据个数</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//queue.c:队列定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue.h&quot;</span></span></span><br><span class="line"><span class="comment">//定义初始化队列函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_init</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>, <span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;arr = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*cap);<span class="comment">//分配内存</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;cap = cap;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义释放内存函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_deinit</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">queue</span>-&gt;arr);</span><br><span class="line">    <span class="built_in">queue</span>-&gt;cap = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;front = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义判断满的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_full</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;size &gt;= <span class="built_in">queue</span>-&gt;cap; <span class="comment">//满返回1,否则返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义判断空的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_empty</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">queue</span>-&gt;size; <span class="comment">//空返回1,否则返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义判断入队和出队函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">queue_push</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;rear &gt;= <span class="built_in">queue</span>-&gt;cap)</span><br><span class="line">        <span class="built_in">queue</span>-&gt;rear = <span class="number">0</span>; <span class="comment">//构造循环队列</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;arr[<span class="built_in">queue</span>-&gt;rear++] = data;</span><br><span class="line">    <span class="built_in">queue</span>-&gt;size++; <span class="comment">//更新计数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_pop</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">queue</span>-&gt;front &gt;= <span class="built_in">queue</span>-&gt;cap)</span><br><span class="line">        <span class="built_in">queue</span>-&gt;front = <span class="number">0</span>;<span class="comment">//构造循环队列</span></span><br><span class="line">    <span class="built_in">queue</span>-&gt;size--; <span class="comment">//更新计数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;arr[<span class="built_in">queue</span>-&gt;front++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义获取有效数据个数函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">queue_size</span><span class="params">(<span class="type">queue_t</span> *<span class="built_in">queue</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">queue</span>-&gt;size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c:测试</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">queue_t</span> <span class="built_in">queue</span>; <span class="comment">//定义队列</span></span><br><span class="line">    queue_init(&amp;<span class="built_in">queue</span>, <span class="number">4</span>);<span class="comment">//初始化队列,容量为4个数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">10</span>; i &lt;= <span class="number">40</span>; i += <span class="number">10</span>) </span><br><span class="line">        <span class="keyword">if</span>(!queue_full(&amp;<span class="built_in">queue</span>))</span><br><span class="line">            queue_push(&amp;<span class="built_in">queue</span>, i); <span class="comment">//入队:10 20 30 40</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有效数据个数:%d\n&quot;</span>, queue_size(&amp;<span class="built_in">queue</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">        <span class="keyword">if</span>(!queue_empty(&amp;<span class="built_in">queue</span>))</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, queue_pop(&amp;<span class="built_in">queue</span>)); <span class="comment">//出10 20</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有效数据个数:%d\n&quot;</span>, queue_size(&amp;<span class="built_in">queue</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">50</span>; i &lt;= <span class="number">60</span>; i += <span class="number">10</span>) </span><br><span class="line">        <span class="keyword">if</span>(!queue_full(&amp;<span class="built_in">queue</span>))</span><br><span class="line">            queue_push(&amp;<span class="built_in">queue</span>, i); <span class="comment">//入队:50 60 30 40</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;有效数据个数:%d\n&quot;</span>, queue_size(&amp;<span class="built_in">queue</span>));</span><br><span class="line">    <span class="keyword">while</span>(!queue_empty(&amp;<span class="built_in">queue</span>)) <span class="comment">//整体出队:30 40 50 60</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, queue_pop(&amp;<span class="built_in">queue</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    queue_deinit(&amp;<span class="built_in">queue</span>); <span class="comment">//释放内存</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>4.单链表</p><details class="folding-tag" green><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li>为了便于对链表的操作，会在链表的第一个节点前再附设一个节点称为头节点；最后一个节点再辐射一个节点，称为尾节点；头尾节点不用来存储数据，除头尾节点外的其他节点称为有效节点</li><li><code>pnode</code>和<code>pfirst</code>指针变化范围head节点至最后一个有效节点结束；<code>pmid</code>指针的变化范围从第一个有效节点开始到尾节点结束</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//list.h:单链表的声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LIST_H</span></span><br><span class="line"><span class="comment">//包含公共的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//声明描述节点属性的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//节点数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span><span class="comment">//保存下一个节点的首地址</span></span><br><span class="line">&#125;<span class="type">node_t</span>;</span><br><span class="line"><span class="comment">//声明描述整个单链表的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span>  &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">head</span>;</span> <span class="comment">//保存头结点的首地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">tail</span>;</span> <span class="comment">//保存尾节点的首地址</span></span><br><span class="line">&#125;<span class="type">list_t</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_init</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span>;<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_deinit</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span>;<span class="comment">//释放内存</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_travel</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span>;<span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_add</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span>;<span class="comment">//顺序插</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_add_first</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span>;<span class="comment">//前插</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_add_last</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span>;<span class="comment">//后插</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_del</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span>;<span class="comment">//删除data所在的节点</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//list.c:单链表的定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"><span class="comment">//定义分配新节点内存函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">node_t</span> *<span class="title function_">create_node</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="type">node_t</span> *pnew = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">node_t</span>)); <span class="comment">//分配节点内存</span></span><br><span class="line">    pnew-&gt;data = data; <span class="comment">//初始化节点数据</span></span><br><span class="line">    pnew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> pnew; <span class="comment">//返回新节点的首地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义单链表的初始化函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_init</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//1.给头节点分配内存</span></span><br><span class="line">    <span class="built_in">list</span>-&gt;head = create_node(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//2.给尾节点分配内存</span></span><br><span class="line">    <span class="built_in">list</span>-&gt;tail = create_node(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//3.头指向尾</span></span><br><span class="line">    <span class="built_in">list</span>-&gt;head-&gt;next = <span class="built_in">list</span>-&gt;tail;</span><br><span class="line">    <span class="built_in">list</span>-&gt;tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义单链表的遍历函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_travel</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">node_t</span> *pnode = <span class="built_in">list</span>-&gt;head; pnode != <span class="built_in">list</span>-&gt;tail; pnode = pnode-&gt;next) &#123;</span><br><span class="line">        <span class="comment">//1.定义三个游标</span></span><br><span class="line">        <span class="type">node_t</span> *pfirst = pnode;</span><br><span class="line">        <span class="type">node_t</span> *pmid = pfirst-&gt;next;</span><br><span class="line">        <span class="type">node_t</span> *plast = pmid-&gt;next;</span><br><span class="line">        <span class="comment">//2.判断pmid是否是有效节点</span></span><br><span class="line">        <span class="keyword">if</span>(pmid != <span class="built_in">list</span>-&gt;tail)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, pmid-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义顺序新节点插函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_add</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建新节点</span></span><br><span class="line">    <span class="type">node_t</span> *pnew = create_node(data);</span><br><span class="line">    <span class="comment">//2.遍历找到要插入的位置,让pmid指向后一个节点,pfirst指向前一个节点</span></span><br><span class="line">    <span class="comment">//那么pnew新节点就插入到pfirst和pmid中间即可</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">node_t</span> *pnode = <span class="built_in">list</span>-&gt;head; pnode != <span class="built_in">list</span>-&gt;tail; pnode = pnode-&gt;next) &#123;</span><br><span class="line">        <span class="comment">//3.定义三个游标</span></span><br><span class="line">        <span class="type">node_t</span> *pfirst = pnode;</span><br><span class="line">        <span class="type">node_t</span> *pmid = pfirst-&gt;next;</span><br><span class="line">        <span class="type">node_t</span> *plast = pmid-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(pmid-&gt;data &gt;= pnew-&gt;data <span class="comment">/*新节点小于后一个节点插入*/</span></span><br><span class="line">                || pmid == <span class="built_in">list</span>-&gt;tail<span class="comment">/*新节点比前面的节点数据都大,放在最后一个即可*/</span>) </span><br><span class="line">        &#123;</span><br><span class="line">            pfirst-&gt;next = pnew;</span><br><span class="line">            pnew-&gt;next = pmid;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义前插函数和后插函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_add_first</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建新节点</span></span><br><span class="line">    <span class="type">node_t</span> *pnew = create_node(data);</span><br><span class="line">    <span class="comment">//2.插入新节点pnew到头结点和原先的第一个节点中间</span></span><br><span class="line">    <span class="type">node_t</span> *ptmp = <span class="built_in">list</span>-&gt;head-&gt;next; <span class="comment">//临时备份原先的第一个节点</span></span><br><span class="line">    <span class="built_in">list</span>-&gt;head-&gt;next = pnew;</span><br><span class="line">    pnew-&gt;next = ptmp; </span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">list_add_last</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建新节点</span></span><br><span class="line">    <span class="type">node_t</span> *pnew = create_node(data);</span><br><span class="line">    <span class="comment">//2.遍历找到最后一个节点让pfirst指向最后一个节点,pmid指向尾节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">node_t</span> *pnode = <span class="built_in">list</span>-&gt;head; pnode != <span class="built_in">list</span>-&gt;tail; pnode = pnode-&gt;next) &#123;</span><br><span class="line">        <span class="comment">//3.定义三个游标</span></span><br><span class="line">        <span class="type">node_t</span> *pfirst = pnode;</span><br><span class="line">        <span class="type">node_t</span> *pmid = pfirst-&gt;next;</span><br><span class="line">        <span class="type">node_t</span> *plast = pmid-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(pmid == <span class="built_in">list</span>-&gt;tail) &#123; <span class="comment">//如果pmid指向了尾节点,那么pfirst肯定指向原先的最后一个节点</span></span><br><span class="line">            pfirst-&gt;next = pnew;</span><br><span class="line">            pnew-&gt;next = pmid;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义删除指定数字所在的节点函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_del</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.遍历找到要删除的节点,然后让pmid指向要删除的节点,那么pfirst指向前一个节点</span></span><br><span class="line">    <span class="comment">//plast指向后一个节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">node_t</span> *pnode = <span class="built_in">list</span>-&gt;head; pnode != <span class="built_in">list</span>-&gt;tail; pnode = pnode-&gt;next) &#123;</span><br><span class="line">        <span class="comment">//2.定义三个游标</span></span><br><span class="line">        <span class="type">node_t</span> *pfirst = pnode;</span><br><span class="line">        <span class="type">node_t</span> *pmid = pfirst-&gt;next;</span><br><span class="line">        <span class="type">node_t</span> *plast = pmid-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(pmid-&gt;data == data &amp;&amp; pmid != <span class="built_in">list</span>-&gt;tail<span class="comment">/*不能删除尾节点*/</span>) &#123;</span><br><span class="line">            pfirst-&gt;next = plast;<span class="comment">//让前一个节点pfirst指向后一个节点plast即可</span></span><br><span class="line">            <span class="built_in">free</span>(pmid); <span class="comment">//释放内存</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义释放链表所有节点的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_deinit</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="type">node_t</span> *pnode = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">    <span class="keyword">while</span>(pnode) &#123;</span><br><span class="line">        <span class="type">node_t</span> *ptmp = pnode-&gt;next; <span class="comment">//临时备份下一个节点</span></span><br><span class="line">        <span class="built_in">free</span>(pnode); <span class="comment">//释放pnode指向的节点内存</span></span><br><span class="line">        pnode = ptmp; <span class="comment">//pnode再指向要释放的下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c:单链表测试</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建单链表</span></span><br><span class="line">    <span class="type">list_t</span> <span class="built_in">list</span>;</span><br><span class="line">    <span class="comment">//2.初始化单链表</span></span><br><span class="line">    list_init(&amp;<span class="built_in">list</span>);</span><br><span class="line">    <span class="comment">//3.各种插入和遍历</span></span><br><span class="line">    list_add(&amp;<span class="built_in">list</span>, <span class="number">10</span>);</span><br><span class="line">    list_add(&amp;<span class="built_in">list</span>, <span class="number">20</span>);</span><br><span class="line">    list_add(&amp;<span class="built_in">list</span>, <span class="number">30</span>);</span><br><span class="line">    list_travel(&amp;<span class="built_in">list</span>);</span><br><span class="line">    list_add_first(&amp;<span class="built_in">list</span>, <span class="number">5</span>);</span><br><span class="line">    list_add_first(&amp;<span class="built_in">list</span>, <span class="number">3</span>);</span><br><span class="line">    list_travel(&amp;<span class="built_in">list</span>);</span><br><span class="line">    list_add_last(&amp;<span class="built_in">list</span>, <span class="number">40</span>);</span><br><span class="line">    list_add_last(&amp;<span class="built_in">list</span>, <span class="number">50</span>);</span><br><span class="line">    list_travel(&amp;<span class="built_in">list</span>);</span><br><span class="line">    <span class="comment">//4.删除节点</span></span><br><span class="line">    list_del(&amp;<span class="built_in">list</span>, <span class="number">20</span>);</span><br><span class="line">    list_travel(&amp;<span class="built_in">list</span>);</span><br><span class="line">    <span class="comment">//5.释放整个链表</span></span><br><span class="line">    list_deinit(&amp;<span class="built_in">list</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>5.双链表</p><details class="folding-tag" green><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li>每个节点设置一个指向前面节点的指针，一个指向后面节点的指针，即双链表</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//list.h:双链表的各种声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __LIST_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __LIST_H</span></span><br><span class="line"><span class="comment">//包含公共的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//声明描述节点信息的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span><span class="comment">//保存下一个节点的首地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">prev</span>;</span> <span class="comment">//保存上一个节点的首地址</span></span><br><span class="line">&#125;<span class="type">node_t</span>;</span><br><span class="line"><span class="comment">//声明描述整个链表的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">head</span>;</span><span class="comment">//头节点</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">tail</span>;</span><span class="comment">//尾节点</span></span><br><span class="line">&#125;<span class="type">list_t</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_init</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span>;<span class="comment">//初始化函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_deinit</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span>;<span class="comment">//释放内存函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">list_empty</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span>;<span class="comment">//判断空</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">list_size</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span>;<span class="comment">//获取有效节点个数函数</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_add</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span>;<span class="comment">//顺序插</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_add_first</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span>;<span class="comment">//前插</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_add_last</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span>;<span class="comment">//后插</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_del</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span>;<span class="comment">//删除指定节点</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_del_first</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span>;<span class="comment">//只删除第一个节点</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">list_del_last</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span>;<span class="comment">//只删除最后一个节点</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">list_get</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> index)</span>;<span class="comment">//根据节点编号获取节点数据</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//list.c:双链表的各种定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"><span class="comment">//定义初始化函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_init</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//1.头指向尾</span></span><br><span class="line">    <span class="built_in">list</span>-&gt;head.next = &amp;<span class="built_in">list</span>-&gt;tail;</span><br><span class="line">    <span class="comment">//2.尾指向头</span></span><br><span class="line">    <span class="built_in">list</span>-&gt;tail.prev = &amp;<span class="built_in">list</span>-&gt;head;</span><br><span class="line">    <span class="built_in">list</span>-&gt;head.data = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;tail.data = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;head.prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;tail.next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义判断链表是否为空</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_empty</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>-&gt;head.next == &amp;<span class="built_in">list</span>-&gt;tail;<span class="comment">//空返回1,否则返回0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义获取节点个数的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_size</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">//记录节点个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">node_t</span> *pnode = &amp;<span class="built_in">list</span>-&gt;head; pnode != &amp;<span class="built_in">list</span>-&gt;tail; pnode=pnode-&gt;next) &#123;</span><br><span class="line">        <span class="type">node_t</span> *pfirst = pnode;</span><br><span class="line">        <span class="type">node_t</span> *pmid = pfirst-&gt;next;</span><br><span class="line">        <span class="type">node_t</span> *plast = pmid-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(pmid != &amp;<span class="built_in">list</span>-&gt;tail) <span class="comment">//pmid不等于尾节点,那么pmid指向的节点必然是有效节点</span></span><br><span class="line">            count++; <span class="comment">//更新计数</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count; <span class="comment">//返回节点个数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义创建新节点函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">node_t</span> *<span class="title function_">create_node</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="type">node_t</span> *pnew = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">node_t</span>)); <span class="comment">//分配内存</span></span><br><span class="line">    pnew-&gt;data = data;</span><br><span class="line">    pnew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    pnew-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> pnew; <span class="comment">//返回新节点的首地址</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义插入新节点函数,将新节点pnew插入到pfirst和pmid中间</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">insert_node</span><span class="params">(<span class="type">node_t</span> *pfirst, <span class="type">node_t</span> *pmid, <span class="type">node_t</span> *pnew)</span> &#123;</span><br><span class="line">    pfirst-&gt;next = pnew;</span><br><span class="line">    pnew-&gt;prev = pfirst;</span><br><span class="line">    pnew-&gt;next = pmid;</span><br><span class="line">    pmid-&gt;prev = pnew;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义顺序插函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_add</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.给data创建所在的新节点</span></span><br><span class="line">    <span class="type">node_t</span> *pnew = create_node(data);</span><br><span class="line">    <span class="comment">//2.遍历找到要插入的位置,将新节点插入到pfirst和pmid中间</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">node_t</span> *pnode = &amp;<span class="built_in">list</span>-&gt;head; pnode != &amp;<span class="built_in">list</span>-&gt;tail; pnode=pnode-&gt;next) &#123;</span><br><span class="line">        <span class="type">node_t</span> *pfirst = pnode;</span><br><span class="line">        <span class="type">node_t</span> *pmid = pfirst-&gt;next;</span><br><span class="line">        <span class="type">node_t</span> *plast = pmid-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(pmid-&gt;data &gt; pnew-&gt;data || pmid == &amp;<span class="built_in">list</span>-&gt;tail<span class="comment">/*新节点最大,放到最后一个*/</span>) &#123;</span><br><span class="line">            insert_node(pfirst, pmid, pnew); </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义前插函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_add_first</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建新节点</span></span><br><span class="line">    <span class="type">node_t</span> *pnew = create_node(data);</span><br><span class="line">    <span class="comment">//2.造游标</span></span><br><span class="line">    <span class="type">node_t</span> *pfirst = &amp;<span class="built_in">list</span>-&gt;head; <span class="comment">//pfirst指向头节点</span></span><br><span class="line">    <span class="type">node_t</span> *pmid = pfirst-&gt;next; <span class="comment">//pmid指向原先的第一个节点</span></span><br><span class="line">    <span class="type">node_t</span> *plast = pmid-&gt;next; <span class="comment">//plast指向第二个节点或者尾节点</span></span><br><span class="line">    <span class="comment">//3.将新节点pnew插入到pfirst和pmid中间,也就是插入到头节点和原先第一个节点中间</span></span><br><span class="line">    insert_node(pfirst, pmid, pnew);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义后插函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_add_last</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建新节点</span></span><br><span class="line">    <span class="type">node_t</span> *pnew = create_node(data);</span><br><span class="line">    <span class="comment">//2.造游标</span></span><br><span class="line">    <span class="type">node_t</span> *pfirst = <span class="built_in">list</span>-&gt;tail.prev; <span class="comment">//pfirst指向原先最后一个节点</span></span><br><span class="line">    <span class="type">node_t</span> *pmid = pfirst-&gt;next; <span class="comment">//pmid指向尾节点</span></span><br><span class="line">    <span class="type">node_t</span> *plast = pmid-&gt;next; <span class="comment">//plast指向NULL</span></span><br><span class="line">    <span class="comment">//3.将新节点pnew插入到pfirst和pmid中间,也就是插入到原先最后一个节点和尾节点中间</span></span><br><span class="line">    insert_node(pfirst, pmid, pnew);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义删除pmid指向的节点函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">del_node</span><span class="params">(<span class="type">node_t</span> *pfirst, <span class="type">node_t</span> *pmid, <span class="type">node_t</span> *plast)</span> &#123;</span><br><span class="line">    pfirst-&gt;next = plast;</span><br><span class="line">    plast-&gt;prev = pfirst;</span><br><span class="line">    <span class="built_in">free</span>(pmid); <span class="comment">//释放节点内存</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义删除指定的节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_del</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.遍历找到要删除的节点,然后让pmid指向要删除的节点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">node_t</span> *pnode = &amp;<span class="built_in">list</span>-&gt;head; pnode != &amp;<span class="built_in">list</span>-&gt;tail; pnode=pnode-&gt;next) &#123;</span><br><span class="line">        <span class="type">node_t</span> *pfirst = pnode;</span><br><span class="line">        <span class="type">node_t</span> *pmid = pfirst-&gt;next;</span><br><span class="line">        <span class="type">node_t</span> *plast = pmid-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(pmid-&gt;data == data &amp;&amp; pmid != &amp;<span class="built_in">list</span>-&gt;tail<span class="comment">/*尾节点不能删*/</span>) &#123;</span><br><span class="line">            del_node(pfirst, pmid, plast);<span class="comment">//删除pmid指向的节点,连接pfirst和plast</span></span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义只删除第一个节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_del_first</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//1.判断链表是否为空</span></span><br><span class="line">    <span class="keyword">if</span>(list_empty(<span class="built_in">list</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链表空了.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.造游标</span></span><br><span class="line">    <span class="type">node_t</span> *pfirst = &amp;<span class="built_in">list</span>-&gt;head; <span class="comment">//指向头</span></span><br><span class="line">    <span class="type">node_t</span> *pmid = pfirst-&gt;next; <span class="comment">//指向要删除的第一个节点</span></span><br><span class="line">    <span class="type">node_t</span> *plast = pmid-&gt;next; <span class="comment">//指向后一个节点或者尾节点</span></span><br><span class="line">    <span class="comment">//3.删除</span></span><br><span class="line">    del_node(pfirst, pmid, plast);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义只删除最后一个节点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_del_last</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//1.判断链表是否为空 </span></span><br><span class="line">    <span class="keyword">if</span>(list_empty(<span class="built_in">list</span>)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;链表空了.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.造游标</span></span><br><span class="line">    <span class="type">node_t</span> *plast = &amp;<span class="built_in">list</span>-&gt;tail; <span class="comment">//plast指向尾节点</span></span><br><span class="line">    <span class="type">node_t</span> *pmid = plast-&gt;prev; <span class="comment">//pmid指向要删除的最后一个节点</span></span><br><span class="line">    <span class="type">node_t</span> *pfirst = pmid-&gt;prev; <span class="comment">//pfirst指向前一个节点或者head</span></span><br><span class="line">    <span class="comment">//3.删除</span></span><br><span class="line">    del_node(pfirst, pmid, plast);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义根据节点编号获取节点数据</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">list_get</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>; <span class="comment">//记录循环的次数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">node_t</span> *pnode = &amp;<span class="built_in">list</span>-&gt;head; pnode != &amp;<span class="built_in">list</span>-&gt;tail; pnode = pnode-&gt;next) &#123;</span><br><span class="line">        <span class="type">node_t</span> *pfirst = pnode;</span><br><span class="line">        <span class="type">node_t</span> *pmid = pfirst-&gt;next;</span><br><span class="line">        <span class="type">node_t</span> *plast = pmid-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(index == count &amp;&amp; pmid != &amp;<span class="built_in">list</span>-&gt;tail)</span><br><span class="line">            <span class="keyword">return</span> pmid-&gt;data;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义清空双链表所有节点的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">list_deinit</span><span class="params">(<span class="type">list_t</span> *<span class="built_in">list</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">list</span>-&gt;head.next != &amp;<span class="built_in">list</span>-&gt;tail) &#123; <span class="comment">//说明链表中还有节点</span></span><br><span class="line">        <span class="type">node_t</span> *pfirst = &amp;<span class="built_in">list</span>-&gt;head; <span class="comment">//pfirst永远指向头结点</span></span><br><span class="line">        <span class="type">node_t</span> *pmid = pfirst-&gt;next; <span class="comment">//pmid指向要清除的第一个节点</span></span><br><span class="line">        <span class="type">node_t</span> *plast = pmid-&gt;next; <span class="comment">//plast指向第二个节点</span></span><br><span class="line">        del_node(pfirst, pmid, plast);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c:双链表测试</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;list.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">list_t</span> <span class="built_in">list</span>;<span class="comment">//定义</span></span><br><span class="line">    list_init(&amp;<span class="built_in">list</span>);<span class="comment">//初始化</span></span><br><span class="line">    <span class="comment">//各种插入</span></span><br><span class="line">    list_add_first(&amp;<span class="built_in">list</span>, <span class="number">50</span>);</span><br><span class="line">    list_add_first(&amp;<span class="built_in">list</span>, <span class="number">20</span>);</span><br><span class="line">    list_add_last(&amp;<span class="built_in">list</span>, <span class="number">70</span>);<span class="comment">//20 50 70 </span></span><br><span class="line">    list_add_last(&amp;<span class="built_in">list</span>, <span class="number">100</span>);<span class="comment">//20 50 70 100</span></span><br><span class="line">    list_add(&amp;<span class="built_in">list</span>, <span class="number">80</span>);</span><br><span class="line">    list_add(&amp;<span class="built_in">list</span>, <span class="number">30</span>);</span><br><span class="line">    list_add(&amp;<span class="built_in">list</span>, <span class="number">40</span>);</span><br><span class="line">    list_add(&amp;<span class="built_in">list</span>, <span class="number">60</span>);</span><br><span class="line">    list_add(&amp;<span class="built_in">list</span>, <span class="number">90</span>);</span><br><span class="line">    list_add(&amp;<span class="built_in">list</span>, <span class="number">10</span>);</span><br><span class="line">    <span class="type">int</span> size = list_size(&amp;<span class="built_in">list</span>);<span class="comment">//获取节点个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, list_get(&amp;<span class="built_in">list</span>, i));<span class="comment">//遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    list_del_first(&amp;<span class="built_in">list</span>);</span><br><span class="line">    list_del_last(&amp;<span class="built_in">list</span>);</span><br><span class="line">    list_del(&amp;<span class="built_in">list</span>, <span class="number">50</span>);</span><br><span class="line">    size = list_size(&amp;<span class="built_in">list</span>);<span class="comment">//获取节点个数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, list_get(&amp;<span class="built_in">list</span>, i));<span class="comment">//遍历</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    list_deinit(&amp;<span class="built_in">list</span>); <span class="comment">//清除链表</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>6.二叉树</p><details class="folding-tag" green><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li>树中的每个元素称为节点，每个节点最多含有两个子树的树称为二叉树</li><li>有序二叉树：左子树元素的值小于根节点，右子树的元素值大于根节点</li><li><p>遍历：前序遍历—根左右；中序遍历—左根右；后序遍历—左右根</p></li><li><p>有序二叉树的删除步骤：找所要删除的二叉树节点，找新的父节点(如果要删除的节点存在左子树，则将其左子树插入到右子树上，如果不存在左子树，则无需操作)，提一级(将要删除的节点的父节点指向删除节点的右子树上)</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tree.h:二叉树各种声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __TREE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __TREE_H</span></span><br><span class="line"><span class="comment">//包含公共的头文件</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">//声明描述节点属性的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> data; <span class="comment">//数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">left</span>;</span> <span class="comment">//保存左节点的首地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">right</span>;</span> <span class="comment">//保存右节点首地址</span></span><br><span class="line">&#125;<span class="type">node_t</span>;</span><br><span class="line"><span class="comment">//声明描述整个二叉树的结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tree</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">root</span>;</span> <span class="comment">//保存根节点的首地址</span></span><br><span class="line">    <span class="type">int</span> cnt; <span class="comment">//保存节点个数</span></span><br><span class="line">&#125;<span class="type">tree_t</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">tree_travel</span><span class="params">(<span class="type">tree_t</span> *tree)</span>; <span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">tree_clear</span><span class="params">(<span class="type">tree_t</span> *tree)</span>; <span class="comment">//清空所有节点</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">tree_insert</span><span class="params">(<span class="type">tree_t</span> *tree, <span class="type">int</span> data)</span>;<span class="comment">//插入新节点</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">tree_del</span><span class="params">(<span class="type">tree_t</span> *tree, <span class="type">int</span> data)</span>;<span class="comment">//删除指定节点</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">tree_modify</span><span class="params">(<span class="type">tree_t</span> *tree, <span class="type">int</span> old_data, <span class="type">int</span> new_data)</span>;<span class="comment">//修改节点值</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//tree.c:有序二叉树各种定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tree.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义遍历的递归函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">travel</span><span class="params">(<span class="type">node_t</span> *proot)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="keyword">if</span>(proot != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        travel(proot-&gt;left); <span class="comment">//打印左节点</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, proot-&gt;data); <span class="comment">//打印节点数据</span></span><br><span class="line">        travel(proot-&gt;right); <span class="comment">//打印右节点</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    //先序遍历</span></span><br><span class="line"><span class="comment">    if(proot != NULL) &#123;</span></span><br><span class="line"><span class="comment">        printf(&quot;%d &quot;, proot-&gt;data); //打印节点数据</span></span><br><span class="line"><span class="comment">        travel(proot-&gt;left); //打印左节点</span></span><br><span class="line"><span class="comment">        travel(proot-&gt;right); //打印右节点</span></span><br><span class="line"><span class="comment">        return;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    //后序遍历</span></span><br><span class="line"><span class="comment">    if(proot != NULL) &#123;</span></span><br><span class="line"><span class="comment">        travel(proot-&gt;left); //打印左节点</span></span><br><span class="line"><span class="comment">        travel(proot-&gt;right); //打印右节点</span></span><br><span class="line"><span class="comment">        printf(&quot;%d &quot;, proot-&gt;data); //打印节点数据</span></span><br><span class="line"><span class="comment">        return;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义有序二叉树遍历函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tree_travel</span><span class="params">(<span class="type">tree_t</span> *tree)</span> &#123;</span><br><span class="line">    <span class="comment">//调用递归函数从根节点开始遍历</span></span><br><span class="line">    travel(tree-&gt;root);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义清空节点的递归函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clear</span><span class="params">(<span class="type">node_t</span> **pproot)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(*pproot != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        clear(&amp;(*pproot)-&gt;left); <span class="comment">//清空左子树</span></span><br><span class="line">        clear(&amp;(*pproot)-&gt;right); <span class="comment">//清空左子树</span></span><br><span class="line">        <span class="built_in">free</span>(*pproot); <span class="comment">//释放节点内存</span></span><br><span class="line">        *pproot = <span class="literal">NULL</span>; <span class="comment">//修改指向释放节点的父节点指向NULL,否则就是野指针</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义清空二叉树所有节点函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tree_clear</span><span class="params">(<span class="type">tree_t</span> *tree)</span> &#123;</span><br><span class="line">    <span class="comment">//调用递归函数从根节点开始清空</span></span><br><span class="line">    clear(&amp;tree-&gt;root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义分配新节点的内存函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">node_t</span> *<span class="title function_">create_node</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="type">node_t</span> *pnew = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">node_t</span>));</span><br><span class="line">    pnew-&gt;data = data;</span><br><span class="line">    pnew-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    pnew-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> pnew;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义插入新节点的递归函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="type">node_t</span> **pproot, <span class="type">node_t</span> *pnew)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(*pproot == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *pproot = pnew; <span class="comment">//插入新节点</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((*pproot)-&gt;data &gt; pnew-&gt;data) &#123;</span><br><span class="line">        insert(&amp;(*pproot)-&gt;left, pnew); <span class="comment">//将新节点插入插入到左子树</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        insert(&amp;(*pproot)-&gt;right, pnew); <span class="comment">//将新节点插入插入到右子树</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义插入新节点的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tree_insert</span><span class="params">(<span class="type">tree_t</span> *tree, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建新节点</span></span><br><span class="line">    <span class="type">node_t</span> *pnew = create_node(data);</span><br><span class="line">    <span class="comment">//2.调用递归函数插入新节点</span></span><br><span class="line">    insert(&amp;tree-&gt;root, pnew);</span><br><span class="line">    <span class="comment">//3.更新计数</span></span><br><span class="line">    tree-&gt;cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义查找节点的递归函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">node_t</span> **<span class="title function_">find</span><span class="params">(<span class="type">node_t</span> **pproot, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.停止查找</span></span><br><span class="line">    <span class="keyword">if</span>(*pproot == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> pproot; <span class="comment">//没有找到</span></span><br><span class="line">    <span class="comment">//2.比较</span></span><br><span class="line">    <span class="keyword">if</span>((*pproot)-&gt;data == data)</span><br><span class="line">        <span class="keyword">return</span> pproot; <span class="comment">//找到了</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(data &lt; (*pproot)-&gt;data)</span><br><span class="line">        <span class="keyword">return</span> find(&amp;(*pproot)-&gt;left, data); <span class="comment">//左边找</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> find(&amp;(*pproot)-&gt;right, data); <span class="comment">//右边找</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义查找节点函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">node_t</span> **<span class="title function_">find_node</span><span class="params">(<span class="type">tree_t</span> *tree, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//调用递归函数从根节点开始查找要删除的节点</span></span><br><span class="line">    <span class="keyword">return</span> find(&amp;(tree)-&gt;root, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义删除指定的节点函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tree_del</span><span class="params">(<span class="type">tree_t</span> *tree, <span class="type">int</span> data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.找节点</span></span><br><span class="line">    <span class="type">node_t</span> **ppnode = find_node(tree, data);</span><br><span class="line">    <span class="keyword">if</span>(*ppnode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;没有找到节点.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.找新爹:如果要删除的节点的左子树不为空,将左子树插入到右子树上</span></span><br><span class="line">    <span class="keyword">if</span>((*ppnode)-&gt;left != <span class="literal">NULL</span>)</span><br><span class="line">        insert(&amp;(*ppnode)-&gt;right, (*ppnode)-&gt;left);</span><br><span class="line">    <span class="comment">//3.提一级:将要删除的节点的父节点的左子树指向要删除的节点的右子树上</span></span><br><span class="line">    <span class="comment">//(*ppnode):就是50的L</span></span><br><span class="line">    <span class="comment">//(*ppnode)-&gt;right:删除的节点的右子树</span></span><br><span class="line">    <span class="type">node_t</span> *ptmp = *ppnode; <span class="comment">//临时备份要删除的节点,将来用于free,ptmp指向20</span></span><br><span class="line">    (*ppnode) = (*ppnode)-&gt;right; <span class="comment">//50的L指向40</span></span><br><span class="line">    <span class="built_in">free</span>(ptmp); <span class="comment">//释放20</span></span><br><span class="line">    tree-&gt;cnt--; <span class="comment">//更新计数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义修改节点值的函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">tree_modify</span><span class="params">(<span class="type">tree_t</span> *tree, <span class="type">int</span> old_data, <span class="type">int</span> new_data)</span> &#123;</span><br><span class="line">    <span class="comment">//1.先删除节点</span></span><br><span class="line">    tree_del(tree, old_data);</span><br><span class="line">    <span class="comment">//2.插入新节点</span></span><br><span class="line">    tree_insert(tree, new_data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c:有序二叉树测试</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tree.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    <span class="type">tree_t</span> tree;</span><br><span class="line">    tree.root = <span class="literal">NULL</span>;</span><br><span class="line">    tree.cnt = <span class="number">0</span>;</span><br><span class="line">    tree_insert(&amp;tree, <span class="number">50</span>);</span><br><span class="line">    tree_insert(&amp;tree, <span class="number">70</span>);</span><br><span class="line">    tree_insert(&amp;tree, <span class="number">60</span>);</span><br><span class="line">    tree_insert(&amp;tree, <span class="number">20</span>);</span><br><span class="line">    tree_insert(&amp;tree, <span class="number">40</span>);</span><br><span class="line">    tree_insert(&amp;tree, <span class="number">30</span>);</span><br><span class="line">    tree_insert(&amp;tree, <span class="number">10</span>);</span><br><span class="line">    tree_insert(&amp;tree, <span class="number">90</span>);</span><br><span class="line">    tree_insert(&amp;tree, <span class="number">80</span>);</span><br><span class="line">    tree_travel(&amp;tree);</span><br><span class="line">    tree_del(&amp;tree, <span class="number">40</span>);</span><br><span class="line">    tree_del(&amp;tree, <span class="number">40</span>);</span><br><span class="line">    tree_travel(&amp;tree);</span><br><span class="line">    tree_modify(&amp;tree, <span class="number">10</span>, <span class="number">520</span>);</span><br><span class="line">    tree_travel(&amp;tree);</span><br><span class="line">    tree_clear(&amp;tree);</span><br><span class="line">    tree_travel(&amp;tree);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><p>二、算法</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <p>1.排序算法</p><details class="folding-tag" green><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li><p>冒牌排序</p><blockquote><p>重复地走过要排序的数列，依次比较俩个元素，若顺序错误，则交换位置，直至无需要交换为止，则排序完成</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">bubble_sort</span><span class="params">(<span class="type">int</span> arr[],<span class="type">int</span> size)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="type">int</span> flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;size-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j+<span class="number">1</span>]&lt;arr[j])&#123;</span><br><span class="line">                <span class="type">int</span> temp=<span class="number">0</span>;</span><br><span class="line">                temp=arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">                flag=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>插入排序</p><blockquote><p>从无序数列中取出数据单独放到有序的数列中，从有序数列的最后一个元素起依次进行扫描比较，因此第一个元素本身有序，无需插入</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert_sort</span><span class="params">(<span class="type">int</span> data[],<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(data[i]&lt;data[i<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j=i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(data[j+<span class="number">1</span>]&lt;data[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> insert_data=data[i];</span><br><span class="line">                data[i]=data[j];</span><br><span class="line">                data[j]=insert_data;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data[<span class="number">6</span>]=&#123;<span class="number">10</span>,<span class="number">5</span>,<span class="number">30</span>,<span class="number">15</span>,<span class="number">20</span>,<span class="number">60</span>&#125;;</span><br><span class="line">    insert_sort(data,<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,data[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>选择排序</p><blockquote><p>从无序的数列中选择最大的放置有序的内存的第一个，紧接着放置第二大的数，依次类推</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">select_sort</span><span class="params">(<span class="type">int</span> data[],<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=i+<span class="number">1</span>;j&lt;num;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[i]&lt;data[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> temp=data[i];</span><br><span class="line">                data[i]=data[j];</span><br><span class="line">                data[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> data[<span class="number">6</span>]=&#123;<span class="number">20</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">66</span>&#125;;</span><br><span class="line">    select_sort(data,<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>快速排序</p><blockquote><p>快速排序采用的是分治思想，即在一个无序的序列中选取一个任意的基准元素pivot，利用pivot将待排序的序列分成两部分，前面部分元素均小于或等于基准元素，后面部分均大于或等于基准元素，然后采用递归的方法分别对前后两部分重复上述操作，直到将无序序列排列成有序序列</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">quick_sort</span><span class="params">(<span class="type">int</span> data[], <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">int</span> p = (left+right)/<span class="number">2</span>; <span class="comment">//定义基准值对应的下标,可以随意指定 </span></span><br><span class="line">    <span class="type">int</span> i = left; <span class="comment">//left=0,左边界 </span></span><br><span class="line">    <span class="type">int</span> j = right; <span class="comment">//right=size-1,右边界</span></span><br><span class="line">    <span class="type">int</span> pivot = data[p]; <span class="comment">//暂存基准值</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt; j) &#123; <span class="comment">//进行一次分组,i=j停止分组</span></span><br><span class="line">        <span class="comment">//i不做i++运算的两种情况:i=p重合或者i对应的值大于基准值</span></span><br><span class="line">        <span class="keyword">for</span>(; !(i&gt;=p || pivot &lt; data[i]); i++);</span><br><span class="line">        <span class="comment">//此种情况就是i对应的值大于基准值而退出了上面的for循环,而不是i=p重合的情况</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; p) &#123;</span><br><span class="line">            data[p] = data[i]; <span class="comment">//将i对应的值挪到p的位置</span></span><br><span class="line">            p = i; <span class="comment">//将p调整到i的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//j不做j--运算的两种情况:j=p重合或者j对应的值小于基准值</span></span><br><span class="line">        <span class="keyword">for</span>(; !(j&lt;=p || pivot &gt; data[j]); j--);</span><br><span class="line">        <span class="comment">//此种情况就是j对应的值小于基准值而退出了上面的for循环,而不是j=p重合的情况</span></span><br><span class="line">        <span class="keyword">if</span>(j &gt; p) &#123;</span><br><span class="line">            data[p] = data[j]; <span class="comment">//将j对应的值挪到p的位置</span></span><br><span class="line">            p = j;<span class="comment">//调整p到j的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    data[p] = pivot; <span class="comment">//一次分组结束将基准值挪到p的位置</span></span><br><span class="line">    <span class="keyword">if</span>(p - left &gt; <span class="number">1</span>)<span class="comment">//基准值左边的数据个数大于等于2个继续分组直到剩余1个或者没有无需分组</span></span><br><span class="line">        quick_sort(data, left, p<span class="number">-1</span>);<span class="comment">//对左边继续分区,左边界还是0,右边界是p-1,不包含p</span></span><br><span class="line">    <span class="keyword">if</span>(right - p &gt; <span class="number">1</span>)<span class="comment">//基准值右边的数据个数大于等于2个继续分组直到剩余1个或者没有无需分组</span></span><br><span class="line">        quick_sort(data, p+<span class="number">1</span>, right);<span class="comment">//对右边继续分组,右边界还是right,左边界是p+1,不包含p</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><p>2.查找算法</p><details class="folding-tag" green><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li><p>线性查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义线性查找函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">line_find</span><span class="params">(<span class="type">int</span> data[], <span class="type">int</span> size, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        <span class="keyword">if</span>(data[i] == key)</span><br><span class="line">            <span class="keyword">return</span> i; <span class="comment">//找到并且返回对应的下标</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//没有找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二分查找</p><blockquote><p>在一个有序表中，每次取中间记录数同目标值进行比较。若该记录数等于目标值，则查找成功；若大于目标值，则说明目标值在该查找表的左半区，此时我们往左半区进行查找；若小于目标值，则说明目标值在该查找表的右半区此时我们往右半区进行查找。如此往复，直至查找成功；若无和目标值相等的记录数，则查找失败</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义递归二分查找函数</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">recu_find</span><span class="params">(<span class="type">int</span> data[], <span class="type">int</span> left, <span class="type">int</span> right, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="type">int</span> mid = (left+right)/<span class="number">2</span>; <span class="comment">//折半</span></span><br><span class="line">        <span class="keyword">if</span>(key &lt; data[mid]) <span class="comment">//左边找</span></span><br><span class="line">            <span class="keyword">return</span> recu_find(data, left, mid<span class="number">-1</span>, key);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; data[mid]) <span class="comment">//右边找</span></span><br><span class="line">            <span class="keyword">return</span> recu_find(data, mid+<span class="number">1</span>, right, key);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> mid; <span class="comment">//找到了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//没有找到</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义二分查找函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">half_find</span><span class="params">(<span class="type">int</span> data[], <span class="type">int</span> size, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="comment">//递归来实现</span></span><br><span class="line">    <span class="keyword">return</span> recu_find(data, <span class="number">0</span>, size<span class="number">-1</span>, key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式基础(一)</title>
      <link href="/posts/3725961427/"/>
      <url>/posts/3725961427/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><h3 id="终端相关"><a href="#终端相关" class="headerlink" title="终端相关"></a>终端相关</h3><details class="folding-tag" cyan><summary> 查看相关知识 </summary>              <div class='content'>              <p>Kernel - the innermost part of any modern operating system which directly talks to actual hardware.</p><p>Shell - wrapper around the actual Kernel. Whenever we run command, we actually talk to shell which in turn invokes appropriate Kernel instructions. Apart from this, the shell is capable of performing some other stuffs like finding appropriate program while having commands, some file name short hand, piping commands etc. </p><p>Linux/MAC流行的shell是bash；Windows通常使用cmd shell，最初兼容ms dos而构建；power shell全新命令行shell技术可以在Windows，Linux，MAC使用；</p><p>Terminal - in the era of earlier computing, computers (known as Mainframe) were giant. So, it was easy to have a single processing unit and connect it from many places. Terminal is the actual hardware with keyboard and output devices connected to mainframe.</p><p>Console - Special type of terminal which is directly connected to Mainframe for the purpose of OS Administration.</p><p>tty - TeleTypewriter used to send and receive data to and from Mainframe. Used before Video Terminals were available. But conventionally it has been still named as tty. Even the coommand stty</p>              </div>            </details><h3 id="Linux相关"><a href="#Linux相关" class="headerlink" title="Linux相关"></a>Linux相关</h3><details class="folding-tag" cyan><summary> 查看相关知识 </summary>              <div class='content'>              <p>1.Linux文件系统与目录</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li>Linux系统目录呈现倒树型结构</li><li>使用<code>.</code>表示当前目录，<code>..</code>表示上级目录</li><li>路径：1.绝对路径-起点为根目录；2.相对路径-起点为当前目录</li><li>Windows系统路径使用<code>\</code>间隔，Linux系统路径使用<code>/</code>间隔</li><li>Linux主目录使用<code>~</code>标识</li></ul>              </div>            </details><p>2.Linux常用命令</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li><code>clear</code>-清除终端软件所有文字信息</li><li><code>pwd</code>-查看当前目录的位置</li><li><code>cd 目录</code> 目录-修改当前目录位置</li><li><code>ls</code>-用于查看目录内容，其中<code>ls -a</code>查看所有内容，<code>ls -l</code>查看每个项目的详细信息</li><li><code>touch</code>-创建空文件</li><li><code>mkdir</code>-创建空目录（父目录必须存在）,<code>mkdir 路径 -p</code>逐级创建指定目录</li><li><code>rm</code>-删除文件或目录，<code>rm 文件名</code>删除文件，<code>rm -rf 目录名</code>删除目录</li><li><code>cp</code>-拷贝文件或目录，<code>rm 源文件 目标文件</code>拷贝文件，<code>cp -rf 源目录 目标目录</code>拷贝目录</li><li><code>cat</code>-快速查看文件内容</li></ul>              </div>            </details><p>3.vim编辑器</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li><p>三种工作模式：正常模式执行简单命令，例如复制粘贴等；插入模式：实现编辑功能；命令行模式：执行复杂命令</p></li><li><p>一般模式→编辑模式：输入<code>i</code>；一般模式→命令行模式：输入<code>:</code>；退回至一般模式使用<code>esc</code></p></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">一般模式:</span><br><span class="line">1.移动光标与撤销操作：</span><br><span class="line">G:移动至文件最后一行</span><br><span class="line">nG:移动至文件的第n行</span><br><span class="line">u:撤销上一步操作</span><br><span class="line">2.复制粘贴操作：</span><br><span class="line">nyy:当前光标所在行开始的连续n行内容拷贝至剪贴板</span><br><span class="line">ndd:当前光标所在行开始的连续n行内容剪切至剪贴板</span><br><span class="line">p:将剪贴板内容在当前光标所在行下面粘贴</span><br><span class="line">x:删除所在光标位置后的一个字符</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">命令行模式:</span><br><span class="line">1.w保存所有修改但不退出vim编辑器</span><br><span class="line">2.wq保存并退出</span><br><span class="line">3.q!放弃保存并退出</span><br></pre></td></tr></table></figure>              </div>            </details>              </div>            </details><h3 id="C语言相关"><a href="#C语言相关" class="headerlink" title="C语言相关"></a>C语言相关</h3><details class="folding-tag" cyan><summary> 查看相关知识 </summary>              <div class='content'>              <p>一、历史背景</p><p>编程语言演变过程：机器语言（纯粹二进制）→汇编语言（本质是助记符语言，受平台约束）→高级语言（C语言，C++等）</p><p>二、语法</p><p>1.案例：</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*这是我的第一个程序，很开心，文件名hello.c*/</span></span><br><span class="line"><span class="comment">//头文件包含指令，预处理阶段会将头文件拷贝替换，使用&lt;&gt;至系统目录查找适用的头文件，使用&quot;&quot;先至当前目录查找，再去系统目录查找</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="comment">//c语言程序有且仅有一个main函数，程序从main开始从main结束</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//函数返回值为整型，函数形式参数为空</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;hello,world\n&quot;</span>);<span class="comment">//C语言程序使用分号结束一条语句</span></span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//函数返回值，return关键字的主要用途为结束函数的执行，辅助用途为指定返回值的数值</span></span><br><span class="line">&#125;         </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译程序，计算机只能识别二进制内容，因此要将c语言程序转换成可以识别的二进制，整个转换过程称为编译，转换过程需要用的工具称为编译器，gcc是Linux系统最常用的c语言编译器</span></span><br><span class="line">gcc hello.c </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">执行当前目录下的a.out可执行程序</span></span><br><span class="line">./a.out </span><br></pre></td></tr></table></figure><p>编译程序的详细步骤：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">源文件→预处理→编译→汇编→链接→可执行文件</span><br><span class="line">1.预处理</span><br><span class="line">对源文件以`#`开头的预处理命令进行处理</span><br><span class="line">gcc -E hello.c -o hello.i</span><br><span class="line">-E只对源文件执行预处理步骤，-o指定生成的文件名</span><br><span class="line">2.编译</span><br><span class="line">对预处理后得到的xxx.i文件进行编译，生成汇编语言文件xxx.s</span><br><span class="line">gcc -S hello.i -o hello.s</span><br><span class="line">-S对文件进行编译操作</span><br><span class="line">3.汇编</span><br><span class="line">将xxx.s文件翻译为二进制语言指令，将这些指令打包成为目标文件的文件，后缀为xxx.o，是一种二进制文件</span><br><span class="line">gcc -c hello.s -o hello.o</span><br><span class="line">-c只进行汇编操作</span><br><span class="line">4.链接</span><br><span class="line">将多个目标文件和标准库函数合并成为一个可执行目标文件</span><br><span class="line">gcc hello.o -o hello</span><br><span class="line">案例中将hello.o和printf函数对应的目标文件printf.o合并生成可执行文件hello</span><br></pre></td></tr></table></figure><p>编译的最好方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o hello</span><br></pre></td></tr></table></figure>              </div>            </details><p>2.printf函数</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <p>(1)使用格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输出内容&quot;</span>,...);</span><br></pre></td></tr></table></figure><p>(2)可以在双引号中使用占用符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure>              </div>            </details><p>3.变量</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li>计算机的内存由大量的字节构成，每个字节都有一个编号，不同字节的编号不同，这个编号叫做字节的地址，所有字节的地址都是连续的，从0开始向正数方向扩展；</li><li>可以将相邻的几个字节合并成一个整体用来记录一个数字，内存里用来记录一个数字的所有字节叫做一个存储区；</li><li>存储区的地址为它所包含的字节里第一个字节的地址；</li><li>c语言程序利用变量表示存储区，变量的定义让计算机为程序分配存储区；</li><li>语法格式：数据类型 变量名=变量值；</li><li>变量名既代表存储区，也代表数字，由环境决定；</li><li>存储区的地址也可以用于代表存储区，&amp;变量名—变量名表示的存储区首地址，可以在<code>printf</code>函数调用语句里面使用<code>%p</code>作为占位符把地址数据显示在屏幕上；</li><li>64位操作系统内存地址是8字节-64位的，32位操作系统内存地址是4字节-32位的；</li><li>变量命名规则：不能以数字开头，只能以字母或者下划线；c语言关键字不能作为变量名称；大小写敏感；</li></ul>              </div>            </details><p>4.数据类型</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <div class="table-container"><table><thead><tr><th>数据类型</th><th>含义</th><th>占位符</th></tr></thead><tbody><tr><td>char</td><td>1字节(字符在内存中存储，存储的是字符对应的数字)</td><td>%c/%hhd</td></tr><tr><td>unsigned char</td><td>1字节(ASCII码表)</td><td>%c/%hhu</td></tr><tr><td>short</td><td>2字节</td><td>%hd</td></tr><tr><td>unsigned short</td><td>2字节</td><td>%hu</td></tr><tr><td>long</td><td>4字节/8字节(64位系统)</td><td>%ld</td></tr><tr><td>unsigned long</td><td>4字节/8字节(64位系统)</td><td>%lu</td></tr><tr><td>int</td><td>4字节(c语言默认整数为int类型)</td><td>%d</td></tr><tr><td>unsigned int</td><td>4字节</td><td>%u</td></tr><tr><td>float</td><td>4字节</td><td>%f/%g</td></tr><tr><td>double</td><td>8字节(c语言默认浮点数为double类型)</td><td>%lf/%lg</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>字面值</th><th>含义</th><th>字面值</th><th>含义</th></tr></thead><tbody><tr><td>‘\a’</td><td>响铃</td><td>‘\v’</td><td>垂直制表</td></tr><tr><td>‘\b’</td><td>退格</td><td>‘\f’</td><td>换页</td></tr><tr><td>‘\t’</td><td>水平制表</td><td>‘\r’</td><td>回车(回到所在行最前面)</td></tr><tr><td>‘\n’</td><td>换行(回到下一行最前面)</td><td>‘%%’</td><td>%</td></tr></tbody></table></div><ul><li><p>使用sizeof关键字获取变量或者数据类型对应的内存大小，sizeof赋值语句失效</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法格式</span></span><br><span class="line"><span class="keyword">sizeof</span>(变量名/数据类型/表达式);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lu,%lu\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="type">int</span>),<span class="keyword">sizeof</span>(a));<span class="comment">//%lu-sizeof占位符</span></span><br><span class="line"><span class="keyword">sizeof</span>(a=<span class="number">100</span>);<span class="comment">//a的值不会变为100</span></span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><p>5.scanf函数</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <p>scanf函数从键盘获取用户的输入，将获取的输入存储到内存的存储区(可以使用&amp;变量名，数组名，指针表示)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d,%d&quot;</span>,&amp;a,&amp;b);<span class="comment">//输入100,200 + enter</span></span><br></pre></td></tr></table></figure>              </div>            </details><p>6.进制转换</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li>有符号类型的二进制数最左边的位为符号位，0表示非负数，1表示负数</li><li>HEX：16进制，DEC：10进制，OCT：8进制，BIN：2进制</li><li>BYTE：1字节，WORD：2字节，DWORD：4字节，QWORD：8字节</li></ul><p>(1)二进制转十进制</p><ul><li>非负二进制转十进制，将二进制中的每个1单独转十进制相加即可</li><li>负数二进制转十进制，取反加一，转十添负</li></ul><p>(2)十进制转二进制</p><ul><li>非负十进制转二进制，采用”除2取余，逆序排序”，先得到的余数为二进制低位，后得到的余数为二进制高位，除至商小于1</li><li>负数二进制转十进制，去负转二，取反加一</li></ul><p>(3)二进制转八进制</p><ul><li>将二进制从右至左每三位分一组，每组用0-7的数字替换</li><li>八进制字面值前缀：0，例如0520</li><li>printf/scanf格式化占位符：%[#]o</li></ul><p>(4)二进制转16进制</p><ul><li>将二进制从右至左每4位分一组，每组用0-9数字或者a-f字母替换</li><li>16进制字面值前缀：0x，例如0xb520</li><li>printf/scanf格式化占位符：%[#]x</li></ul>              </div>            </details><p>7.运算符</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <p>(1)算数运算符</p><ul><li><p>四则运算+取余数：<code>+</code>，<code>-</code>，<code>*</code>，<code>/</code>，<code>%</code></p></li><li><p>赋值运算符<code>=</code>，一条语句可以使用多个赋值操作符，优先计算右面的操作符</p></li><li>符合赋值操作符<code>+=</code>，<code>/=</code>，<code>-=</code>，<code>*=</code></li><li>自增运算符<code>++</code>，自减运算符<code>--</code>，只能与存储区配合使用，将存储区的内容加一或减一，<code>val++</code>先使用再自增，<code>++val</code>先自增再使用</li></ul><p>(2)逻辑运算符</p><ul><li>逻辑表达式的结果0-假，1-真</li><li>布尔类型只包含两个整数0和1，c语言中任何数据都可以作为布尔值使用，0作为布尔值的时候，表示假，其他数据作为布尔值的时候表示真</li><li>单目逻辑运算符<code>!</code>，可以根据一个布尔值计算出相反的布尔值，称逻辑取反</li><li>双目运算符<code>==</code>，<code>!=</code>，<code>&gt;</code>，<code>&gt;=</code>，<code>&lt;</code>，<code>&lt;=</code>，<code>&amp;&amp;</code>，<code>||</code>如果一个逻辑表达包含多个双目逻辑操作符必须拆成多个简单逻辑表达式再合并</li><li><code>&amp;&amp;</code>，<code>||</code>具有短路特征；短路与：若第一个表达式为假，则结果为假；短路或：若第一个表达式为真，则结果为真</li></ul><p>(3)位运算符</p><ul><li><p><code>~</code>按位取反，注意事项：注意数据的类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;~0x5a = %#x\n&quot;</span>,~<span class="number">0x5a</span>);<span class="comment">//0xffffffa5</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;~0x5a = %#hhx\n&quot;</span>,~<span class="number">0x5a</span>);<span class="comment">//0xa5</span></span><br></pre></td></tr></table></figure></li><li><p><code>&amp;</code>按位与：任何数位与1与，结果不变；任何数位与0与，结果为0</p></li><li><code>|</code>按位或：任何数位与0或，结果不变；任何数位与1或，结果为1</li><li><code>^</code>按位异或：任何数位与0异或，结果不变；任何数位与1异或，结果相反</li><li><code>&gt;&gt;</code>右移，a&gt;&gt;n表示a右移n位；有符号数，右移左补符号位；无符号数，右移左补0</li><li><code>&lt;&lt;</code>左移，无论是有符号数还是无符号数右移的时候，右补0</li><li>在不发生高位溢出的前提下，左移1位相当于乘2，右移1位相当于除以2</li><li>位操作符不会修改存储区内容</li></ul><p>(4)三目操作符</p><ul><li>布尔值 ？表达式一 ：表达式二；在？后不要使用赋值操作符</li></ul><p>(5)优先级</p><ul><li>单目高于双目，乘除高于加减，算术高于逻辑，条件(? :)高于赋值高于逗号</li><li>多数运算符具有左结合性，单目、三目和赋值运算符具有右结合性</li></ul><p>(6)类型转换</p><ul><li><p>隐式类型转换，两种类型字节数不同，转换为高字节数的类型；所有的浮点运算都是以双精度进行的，即使仅含float单精度量运算的表达式，也要先转换成double型，再作运算。 char型和short型参与运算时，必须先转换成int型 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sizeof(1?1:0.9)=%lu\n&quot;</span>,<span class="keyword">sizeof</span>(<span class="number">1</span>?<span class="number">1</span>:<span class="number">0.9</span>));<span class="comment">//8字节</span></span><br></pre></td></tr></table></figure></li><li><p>隐式类型转换，若两种类型的字节数相同，且一种有符号，一种无符号，则转换成无符号类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无类型的数必须是非负数 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(-7+3u)&gt;0=%d\n&quot;</span>,(<span class="number">-7</span>+<span class="number">3u</span>)&gt;<span class="number">0</span>);<span class="comment">//(-7+3u)&gt;0=1 3u表示无符号3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(-7+3u)=%d\n&quot;</span>,<span class="number">-7</span>+<span class="number">3u</span>);<span class="comment">//-7+3u=-4</span></span><br></pre></td></tr></table></figure></li><li><p>强制类型转换，容易导致数据丢失，常用于指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a=<span class="number">300</span>;</span><br><span class="line"><span class="type">char</span> c=(<span class="type">char</span>)a;</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><p>8.流程控制</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <p>(1)顺序结构</p><p>从上至下，顺序执行各条语句</p><p>(2)分支结构</p><ul><li><p>if分支结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(逻辑表达式<span class="number">1</span>)&#123;</span><br><span class="line">    语句块<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(逻辑表达式<span class="number">2</span>)&#123;</span><br><span class="line">    语句块<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句块<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch分支结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (控制表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">1</span>:</span><br><span class="line">语句块<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 常量表达式<span class="number">2</span>:</span><br><span class="line">语句块<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        语句块<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制表达式—能够表示整数；常量表达式—可以表示整数的常量；各个常量表达式不可相同</p><p>若去掉break语句，则 自动执行下一个case所对应的代码</p></li></ul><p>(3)循环结构</p><ul><li><p>for循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (表达式<span class="number">1</span>;表达式<span class="number">2</span>;表达式<span class="number">3</span>)&#123;</span><br><span class="line">    循环体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>执行的顺序：1.先执行表达式1，且该语句在整个循环过程中，只执行1次；2.执行表达式2，表达式2为逻辑表达式，运算的结果为布尔值；3.表达式2为假，则结束循环；若表达式2为真，则执行循环体，再执行表达式3</li><li>for循环小括号内的每条语句都可以省略</li><li>c99规范能够在循环的小括号内临时声明循环变量，该变量只能在循环体内部使用</li></ul></li><li><p>break语句</p><p>一旦执行break语句，break语句之后的循环里的一切语句都不再执行</p></li><li><p>continue语句</p><p>continue语句，跳过本次循环，执行下次循环，continue之后的语句不再执行，直接进入下一次循环</p></li><li><p>goto语句</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">goto</span> label;<span class="comment">//直接跳转到label位置</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;3\n&quot;</span>);</span><br><span class="line"> label:<span class="comment">//标签</span></span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;4\n&quot;</span>);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>while循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件表达式)&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>do-while循环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure><p>do-while循环保证循环体内部的语句至少执行1次</p></li><li><p>空语句—执行语句为一个分号；如果分号没有起到结束语句的作用就是空语句</p></li></ul>              </div>            </details><p>9.数组</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <p>(1)一维数组</p><ul><li><p>数组可以用来代表多个连续的同类型存储区，这些存储区叫做数组的元素</p></li><li><p>格式：存储区数据类型 数组名[存储区个数]={}；</p></li><li><p>数组通常不会作为整体使用，只会一个一个的使用其中的某个存储区</p></li><li><p>数组里的每个存储区有一个编号，这个编号叫做数组的下标，第一个存储区的下标为0</p></li><li><p>数组名称和下标一起可以用来表示数组里的存储区，格式：数组名[下标]</p></li><li><p>数组名不代表存储区，它代表数组里第一个存储区的地址，也是数组的首地址</p></li><li><p>获取某个存储区的首地址，格式：&amp;存储区；a[0]表示下标为0的存储区，&amp;a[0]表示下标为0的存储区的首地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//全0</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>]=&#123;&#125;;<span class="comment">//全0</span></span><br><span class="line"><span class="type">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>&#125;<span class="comment">//a[0]=1，其余全是0</span></span><br><span class="line"><span class="type">int</span> arr[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;<span class="comment">//省略数组定义里的存储区个数</span></span><br><span class="line"><span class="type">int</span> size=<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);<span class="comment">//计算数组元素的个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数组a的地址为%p\n&quot;</span>,a);<span class="comment">//与a[0]地址相同</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数组a的地址为%p\n&quot;</span>,&amp;a[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure></li><li><p>c99规范可以使用变长数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="type">int</span> a[n];<span class="comment">//不可初始化 动态数组</span></span><br></pre></td></tr></table></figure></li></ul><p>(2)二维数组</p><ul><li>二维数组由多个一维数组组成，二维数组的每一个元素都是一维数组，一维数组的每一个元素都是一个存储区</li><li>定义二维数组需要提供两个整数，前一个整数表示一维数组的个数，后一个整数表示一维数组里的存储区个数</li><li>表示二维数组的存储区，需要提供两个下标，前一个下标用来表示分组编号，后一个下标用来表示分组里的存储区编号</li><li>二维数组名称后只写一个下标，这个下标作为组下标使用，这个写法可以表示组下标对应的组里第一个存储区的地址</li><li>二维数组名称后加组下标也可以作为一维数组名称使用，这个一维数组里包含组下标对应组里所有的存储区</li></ul><p>(3)数组作为形参(形参—函数小节)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组作为形参 </span></span><br><span class="line"><span class="comment">//形参a - 数组名 </span></span><br><span class="line"><span class="comment">//形参n - 数组元素个数 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">6</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    print(arr, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><p>10.函数</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <p>(1)函数使用三步骤</p><ul><li><p>函数声明</p><p>若被调用函数在调用函数后面定义，则需要进行函数声明</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> 返回值类型 函数名(形参表)<span class="comment">//可以隐藏参数名称，例如int x，可以写成int即可</span></span><br></pre></td></tr></table></figure></li><li><p>函数定义</p><p>返回值类型—返回数据的类型，只能够返回一个数据；形参表—用来存储给函数的数据</p><p>如果被调用函数没有使用return关键字指定返回值，则函数的返回值为随机数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">返回值类型 函数名(形参表)&#123;</span><br><span class="line">函数体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数调用</p><p>可以从调用函数向被调用函数传递多个数据，这些数据的类型可以不同</p><p>被调用函数需要为每个传递过来的数据提供一个存储区，即形参表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名(实参表)</span><br></pre></td></tr></table></figure></li></ul><p>(2)递归函数</p><ul><li>c语言函数可以调用自己，自己调用自己的函数叫递归函数</li><li>递归函数编写步骤:1.假设递归函数已经可以使用 2.在递归调用语句前编写分支处理不可分解的情况(这种分支必须能够结束函数)</li></ul><p>(3)补充</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line">time(<span class="number">0</span>);<span class="comment">//获取当前时间</span></span><br><span class="line">srand(time(<span class="number">0</span>));<span class="comment">//设置一个随机数种子</span></span><br><span class="line">rand();<span class="comment">//生成一个随机的整数</span></span><br><span class="line">rand() % <span class="number">10</span>;<span class="comment">//生成0-9之间的随机数</span></span><br></pre></td></tr></table></figure><p>(4)作用域和生命周期</p><ul><li><p>局部变量</p><ul><li>定义在函数内的变量</li><li>作用域：定义的位置开始到函数结束</li><li>生命周期：函数某一次执行的时间范围</li><li>不能够被其他文件调用</li></ul></li><li><p>全局变量</p><ul><li>定义在函数外的变量</li><li>作用域：从定义的位置开始向下的所有语句</li><li>生命周期：整个程序的执行时间</li><li>能够被其他文件调用</li><li>全局变量未初始化，默认为0</li></ul></li><li><p>静态局部变量</p><ul><li>使用static关键字修饰</li><li>作用域：定义的位置开始到函数结束</li><li>生命周期：整个程序执行时间</li><li>未初始化的静态局部变量，默认为0</li><li>静态局部变量的初始化只在程序开始的时候执行一次</li></ul></li><li><p>静态全局变量</p><ul><li>使用static关键字修饰</li><li>作用域：从定义的位置开始向下的所有语句</li><li>生命周期：整个程序的执行时间</li><li>不能够被其他文件调用</li><li>未初始化的静态全局变量，默认为0</li></ul></li><li><p>案例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim命令行模式：</span><br><span class="line">vs+文件名--实现左右分屏</span><br><span class="line">ctrl+ww--切换两个文件的操作</span><br><span class="line">gcc var2.c var3.c -o var</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> g_a=<span class="number">520</span>;<span class="comment">//全局变量</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> s_a=<span class="number">521</span>;<span class="comment">//静态全局变量</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">func2</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="comment">//静态函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;func2:s_a=%d\n&quot;</span>,s_a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;func:g_a=%d\n&quot;</span>,g_a);</span><br><span class="line">&#125;          </span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> g_a;<span class="comment">//声明其他文件的全局变量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">void</span>)</span>;<span class="comment">//声明其他文件的函数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;g_a=%d\n&quot;</span>,g_a);</span><br><span class="line">    func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><p>11.指针</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <p>(1)基本知识</p><ul><li><p>地址：字节的编号</p></li><li><p>指针：可以通过地址获取存储区数据</p></li><li><p>指针变量：存储地址数据的变量</p></li><li><p>指针变量只能用来记录地址数据</p></li><li><p>指针变量的唯一用途就是用来找另一个存储区的</p></li><li><p>定义指针变量的格式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数据类型* 指针变量名;</span><br><span class="line"><span class="type">int</span> *pa,*pb;</span><br><span class="line">数据类型 * 指针变量名;</span><br><span class="line">数据类型 *指针变量名;</span><br><span class="line"><span class="type">int</span>* pa,pb;</span><br></pre></td></tr></table></figure></li><li><p>指针变量占据的内存大小，32位系统为4字节，64为系统为8字节</p></li><li><p>定义指针变量的时候必须在变量名称前加一个*</p></li><li><p>定义指针变量的时候需要提供一个类型名称，它表示这个指针是与什么类型的存储区捆绑了</p></li><li><p>指针变量初始化的时候*没有参与赋值过程</p></li><li><p>如果一个指针和一个存储区之间存在捆绑关系，则可以通过在指针名称前加*操作符表示它所捆绑的存储区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">100</span>;</span><br><span class="line">    <span class="type">int</span>* p=&amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a=%p,p=%p\n&quot;</span>,&amp;a,p);<span class="comment">//变量a的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,*p=%d\n&quot;</span>,a,*p);<span class="comment">//100 100</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;p=%p\n&quot;</span>,&amp;p);<span class="comment">//指针p的地址</span></span><br><span class="line">    *p=<span class="number">200</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,*p=%d\n&quot;</span>,a,*p);<span class="comment">//200 200</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>没有记录有效地址的指针分为两类，空指针与野指针，这两种指针都不能使用*操作符取表示它所捆绑的存储区</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*空指针*/</span></span><br><span class="line"><span class="type">int</span> *p=<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p)<span class="comment">//error</span></span><br><span class="line"><span class="comment">/*野指针，禁止出现野指针*/</span></span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p)<span class="comment">//error</span></span><br><span class="line"><span class="comment">/*安全措施*/</span></span><br><span class="line"><span class="keyword">if</span> (p==<span class="literal">NULL</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p是空指针\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>指针支持加减整数和关系比较运算，运算结果由指针的类型决定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *pa=<span class="number">0x1000</span>;</span><br><span class="line">p++;<span class="comment">//p=0x1004</span></span><br><span class="line"><span class="type">char</span> *p=<span class="number">0x1000</span>;</span><br><span class="line">p++;<span class="comment">//p=0x1001</span></span><br></pre></td></tr></table></figure></li></ul><p>(2)指针与一维数组</p><ul><li><p>如果一个指针记录了数组里第一个存储区的地址，即可通过指针找到数组的每个存储区</p></li><li><p>即可指针后使用下标可以用来表示数组里的存储区</p></li><li><p>数组名本身是一个指针，代表数组的首元素地址</p></li><li><p>arr[i]==*(arr+i)，arr为数组名称</p></li><li><p>大部分情况下可以使用p代替a，在计算数组长度的时候不可以使用p代替a，且数组名不可修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *p=a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,*(a+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>,*(p+i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> size=<span class="keyword">sizeof</span>(p)/<span class="keyword">sizeof</span>(p[<span class="number">0</span>])<span class="comment">//在32为系统下，指针变量占据内存大小为4字节，int类型占据4字节，因此结果为1</span></span><br><span class="line">    a++;<span class="comment">//error</span></span><br><span class="line">    p++;<span class="comment">//ok</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>(3)指针与函数参数</p><ul><li><p>如果要跨函数使用存储区必须通过指针实现</p></li><li><p>指针作为形参可以修改实参的值</p></li><li><p>指针可以作为返回值，返回地址</p></li><li><p>不可以返回局部变量的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *x,<span class="type">int</span> *y)</span>&#123;</span><br><span class="line">    <span class="type">int</span> tmp=*x;</span><br><span class="line">    *x=*y;</span><br><span class="line">    *y=tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">10</span>,b=<span class="number">20</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d\n&quot;</span>,a,b);</span><br><span class="line">    swap(&amp;a,&amp;b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a=%d,b=%d\n&quot;</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span>* <span class="title function_">read</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> *p=read();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*p=%d\n&quot;</span>,*p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> g_a=<span class="number">1024</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> s_a=<span class="number">2048</span>;</span><br><span class="line"><span class="type">int</span>* <span class="title function_">read</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> s_b=<span class="number">4096</span>;</span><br><span class="line">    <span class="type">int</span> b=<span class="number">8192</span>;</span><br><span class="line">    <span class="keyword">return</span> &amp;g_a;<span class="comment">//ok </span></span><br><span class="line">    <span class="comment">//return &amp;s_a; //ok</span></span><br><span class="line"> <span class="comment">//return &amp;s_b; //ok</span></span><br><span class="line"> <span class="comment">//return &amp;b;  //error 局部变量地址不能作为返回值 </span></span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure></li></ul><p>(4)指针与const关键字</p><ul><li>功能：常量化</li><li>修饰普通变量：const int a=100：不可对变量a的值进行修改</li><li>修饰指针：<ul><li>常量指针const int *p=&amp;a：不可以通过这种指针对它捆绑的存储区赋值，但可以对指针本身赋值</li><li>指针常量 int* const p=&amp;a：不可以对指针本身赋值，但是可以对它捆绑的存储区做赋值</li><li>常量指针常量const int* const p=&amp;a：都不可赋值</li></ul></li></ul><p>(5)泛型指针</p><ul><li><p>定义指针变量的时候可以使用void作为类型名称，这种指针称为无类型指针；能够与任意类型的存储区捆绑</p></li><li><p>无类型指针不可使用*节引用</p></li><li><p>无类型指针必须首先强制类型转换成有类型指针才能够使用*节引用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">100</span>;</span><br><span class="line">    <span class="type">char</span> c=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="type">double</span> d=<span class="number">5.6</span>;</span><br><span class="line">    <span class="type">void</span> *p=<span class="literal">NULL</span>;</span><br><span class="line">    p=&amp;i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*(<span class="type">int</span>*)p);</span><br><span class="line">    p=&amp;c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,*(<span class="type">char</span>*)p);</span><br><span class="line">    p=&amp;d;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>,*(<span class="type">double</span>*)p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a=<span class="number">0x12345678</span>;</span><br><span class="line">    <span class="type">void</span> *p=&amp;a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,*(<span class="type">char</span> *)p);<span class="comment">//0x78</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,*(<span class="type">char</span> *)(p+<span class="number">1</span>));<span class="comment">//0x56</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,*(<span class="type">char</span> *)(p+<span class="number">2</span>));<span class="comment">//0x34</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,*(<span class="type">char</span> *)(p+<span class="number">3</span>));<span class="comment">//0x12</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,*(<span class="type">short</span> *)p);<span class="comment">//0x5678</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#x\n&quot;</span>,*(<span class="type">short</span> *)(p+<span class="number">2</span>));<span class="comment">//0x1234</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><p>12.字符串</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li><p>字符串由一组连续的字符构成，使用双引号引起来，这些字符的末尾必须使用’\0’字符结束</p></li><li><p>“abcd”==”abcd\0”</p></li><li><p>在printf函数调用语句中，使用%s作为占位符，把字符串里的字符依次显示在屏幕上</p></li><li><p>编译器会把字符串当作第一个字符所在存储区的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,<span class="string">&quot;abcd\0&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello,&quot;</span><span class="string">&quot;world\n&quot;</span>);<span class="comment">//&quot;hello,world&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>字符串表示形式</p><ul><li><p>字符数组</p><ul><li><p>char str[5]：数组名表示数组首地址，不可更改；字符数组内容可以修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">5</span>]=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">str[<span class="number">0</span>]=<span class="string">&quot;A&quot;</span>;</span><br><span class="line">str=<span class="string">&quot;hello&quot;</span>;<span class="comment">//error，意思是将字符串&quot;hello&quot;首地址赋值给str</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符指针</p><ul><li><p>char *str=”abcd”：str存储字符串的首地址，指针变量str内容可以修改，str所捆绑的存储区内容不可修改</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *str=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">*str=<span class="string">&#x27;A&#x27;</span>;<span class="comment">//error</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>字符串的输入输出</p><ul><li><p>输出：1.printf(“%s\n”,字符串首地址)；2.puts(字符串首地址)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">5</span>]=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str);<span class="comment">//abcd</span></span><br><span class="line"><span class="type">char</span>* str_a=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,str_a);<span class="comment">//abcd</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>,*str_a);<span class="comment">//a</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">100</span>]=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="built_in">puts</span>(str);</span><br><span class="line"><span class="type">char</span>* str_a=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="built_in">puts</span>(str_a);</span><br></pre></td></tr></table></figure></li><li><p>输入：1.scanf(“%s”,要保存字符的起始地址)，遇到空格就停；2.gets(要保存字符的起始地址)，读一行，但忽略最后的回车；从键盘获取一个字符串存储到内存—只能存储到字符数组中；</p><p>由于scanf()和gets()无法知道字符串s大小，必须遇到换行符或读到文件结尾为止才接收输入，因此容易导致字符数组越界（缓冲区溢出）的情况，所以我们在定义char型数组时，应该确保其空间足够大</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str);</span><br><span class="line"><span class="type">char</span>* str_a=<span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,str_a);<span class="comment">//error</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;</span><br><span class="line">gets(str);</span><br><span class="line"><span class="type">char</span>* str_a=<span class="literal">NULL</span>;</span><br><span class="line">gets(str_a);<span class="comment">//error</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符串操作函数</p><p>c语言提供一组标准函数。实现对字符串的各种操作，这些函数包含于string.h头文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span>* p=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">num=<span class="built_in">strlen</span>(p);<span class="comment">//strlen统计字符串里有效字符的个数</span></span><br><span class="line"><span class="type">char</span> str[<span class="number">20</span>]=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="built_in">strcat</span>(str,<span class="string">&quot;xyz&quot;</span>);<span class="comment">//合并两个字符串，第一个参数必须是字符数组，第二个字符串追加到第一个参数末尾</span></span><br><span class="line"><span class="built_in">strcat</span>(str,p);<span class="comment">//合并两个字符串，第一个参数必须是字符数组，第二个字符串追加到第一个参数末尾</span></span><br><span class="line"><span class="type">char</span> str2[<span class="number">20</span>]=<span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(str2,<span class="string">&quot;123456&quot;</span>);<span class="comment">//把第二个字符串内容拷贝到第一个字符串中，第一个参数必须为字符数组</span></span><br><span class="line"><span class="type">int</span> ret=<span class="number">0</span>;</span><br><span class="line">ret=<span class="built_in">strcmp</span>(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world&quot;</span>);<span class="comment">//根据ASCII码，比较两个字符串的大小；返回值大于0，表示前一个字符串大</span></span><br></pre></td></tr></table></figure></li><li><p>字符指针数组</p><ul><li><p>指针数组里包含一组同类型的指针存储区</p></li><li><p>字符指针数组包含多个字符指针，每个字符指针可以代表一个字符串</p></li><li><p>表示方法：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*第一种*/</span></span><br><span class="line"><span class="type">char</span> *p1=<span class="string">&quot;abc&quot;</span>;</span><br><span class="line"><span class="type">char</span> *p2=<span class="string">&quot;def&quot;</span>;</span><br><span class="line"><span class="type">char</span>* p[<span class="number">2</span>]=&#123;p1,p2&#125;;</span><br><span class="line"><span class="comment">/*第二种*/</span></span><br><span class="line"><span class="type">char</span>* p[<span class="number">2</span>]=&#123;<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">    <span class="type">char</span>* p[<span class="number">3</span>]=&#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;wangwu&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>细节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> str1[] = &#123; <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;a&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str1);<span class="comment">//输出乱码，由于没有加\0</span></span><br></pre></td></tr></table></figure></li></ul>              </div>            </details><p>13.命令行参数-main</p><details class="folding-tag" blue><summary> 查看相关知识 </summary>              <div class='content'>              <ul><li><p>主函数第一个参数是整型表示第二个参数中的指针个数，第二个参数是一个字符指针数组，这些字符串的内容来自执行程序时的命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;argc;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;argc=%d,argv[%d]=%s\n&quot;</span>,argc,i,argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> a=atoi(argv[<span class="number">1</span>]);<span class="comment">//atoi函数--把字符串转换成整数；atof--把字符串转换成浮点数</span></span><br><span class="line">    <span class="type">int</span> b=atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sum=%d\n&quot;</span>,a+b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">运行结果</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">./main 100 200</span></span><br><span class="line">argc=3,argv[0]=./main</span><br><span class="line">argc=3,argv[1]=100</span><br><span class="line">argc=3,argv[2]=200</span><br><span class="line">sum=300</span><br></pre></td></tr></table></figure></li></ul>              </div>            </details>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年终总结</title>
      <link href="/posts/536100284/"/>
      <url>/posts/536100284/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a52b80c0b0020c8d990c2fb555078b1a36959b42338c3aeccf6ba0adbb1f310c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站加载优化方案</title>
      <link href="/posts/2832570519/"/>
      <url>/posts/2832570519/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网站加载速度不仅可以极大地提升用户体验感，还能对访问者的转化率起到一定的帮助，经过优化的网站文件下载与页面显示速度更快，因此网站加载优化是十分必要的。</p><p>本文参考了以下两篇大佬的文章</p><div class="tag link"><a class="link-card" title="山岳库博教程贴" href="https://kmar.top/posts/7d9fb37e/"><div class="left"><img src="https://npm.elemecdn.com/@kmar/fonts@1.6.0/mouse/link.cur"/></div><div class="right"><p class="text">山岳库博教程贴</p><p class="url">https://kmar.top/posts/7d9fb37e/</p></div></a></div><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/8f31c3d0/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/8f31c3d0/</p></div></a></div><h2 id="压缩静态资源"><a href="#压缩静态资源" class="headerlink" title="压缩静态资源"></a>压缩静态资源</h2><details class="folding-tag" cyan><summary> 查看教程 </summary>              <div class='content'>              <ul><li><p>我是使用<code>gulp</code>来压缩静态资源的，被压缩的文件有HTML，CSS，JavaScript文件。</p><ul><li><p>1.插件安装</p><p>在博客根目录打开终端，输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp-cli</span><br><span class="line">npm install gulp --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩HTML</span></span><br><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line">npm install gulp-html-minifier-terser --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩CSS</span></span><br><span class="line">npm install gulp-clean-css --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩JS</span></span><br><span class="line">npm install gulp-terser --save-dev</span><br></pre></td></tr></table></figure></li><li><p>2.在博客根目录创建gulpfile.js，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>)</span><br><span class="line"><span class="comment">//用到的各个插件</span></span><br><span class="line"><span class="keyword">const</span> htmlMin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-html-minifier-terser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlClean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> terser = <span class="built_in">require</span>(<span class="string">&#x27;gulp-terser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">    gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">terser</span>(&#123;&#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">cleanCSS</span>(&#123;</span><br><span class="line">            <span class="attr">compatibility</span>: <span class="string">&#x27;ie11&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">    gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlClean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlMin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除html注释</span></span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//压缩html</span></span><br><span class="line">            <span class="attr">collapseInlineTagWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">noNewlinesBeforeTagClose</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">removeAttributeQuotes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">removeRedundantAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//省略布尔属性的值，例如：&lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除所有空格作属性值，例如：&lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span></span><br><span class="line">            <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的 type=&quot;text/css&quot;</span></span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 JS</span></span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 CSS</span></span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>  <span class="comment">//压缩页面URL</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;default&quot;</span>, gulp.<span class="title function_">parallel</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-html&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>在执行<code>hexo g</code>后执行<code>gulp</code>即可压缩</p></li></ul></li><li><p>字体与图片的压缩，可以自行百度，网上有很多工具，压缩完后再引入进文章与网页</p></li></ul>              </div>            </details><h2 id="PWA本地缓存"><a href="#PWA本地缓存" class="headerlink" title="PWA本地缓存"></a>PWA本地缓存</h2><details class="folding-tag" cyan><summary> 查看教程 </summary>              <div class='content'>              <p>1.PWA是一种理念，使用多种技术来增强WEB APP的功能，可以让网站的体验变得更好，能够模拟一些原生功能，比如通知推送。在移动端利用标准化框架，让网页应用呈现和原生应用相似的体验。PWA可以利用 Service Worker 的缓存特点，极大地加速博客。</p><p>2.因为我们最终目的是要制作一个全平台的WEB APP，所以对于图标的大小、类型适配显得格外重要。可以访问<a href="https://realfavicongenerator.net/">realfavicongenerator</a>进行图标制作及<code>manifest</code>的生成。</p><details class="folding-tag" blue><summary> 查看教程 </summary>              <div class='content'>              <p>1.进入页面后点击 Select your Favicon image，选择一个图标上传，我这里使用的小火箭是在阿里巴巴矢量图标库下载的</p><p>2.找到选项Favicon  for Android Chrome，选择Assets→create all documented icons</p><p>3.找到选项Windows Metro，点击图标，使得背景图片使用图标配色</p><p>4.找到选项Favicon  generator options：选择path调整图片存放的相对路径例如我这里输入/img/siteicon；选择App name，设置你网站app的名字；选择additional files，勾选生成一个readme.md</p><p>5.最终选择生成Generator your Favicons and HTML code</p><p>6.下载资源包Favicon package</p><p>7.将资源包里面的全部内容放入网站根目录的source\img文件内，方便后面的引入</p>              </div>            </details><p>3.PWA配置</p><details class="folding-tag" cyan><summary> 查看教程 </summary>              <div class='content'>              <ul><li><p>插件安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install workbox-build --save</span><br></pre></td></tr></table></figure></li><li><p>在博客根目录创建gulpfile.js（前文已经创建），代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>)</span><br><span class="line"><span class="comment">//用到的各个插件</span></span><br><span class="line"><span class="keyword">const</span> htmlMin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-html-minifier-terser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> htmlClean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> terser = <span class="built_in">require</span>(<span class="string">&#x27;gulp-terser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> cssnano = <span class="built_in">require</span>(<span class="string">&#x27;gulp-cssnano&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> workbox = <span class="built_in">require</span>(<span class="string">&quot;workbox-build&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//pwa</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;generate-service-worker&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> workbox.<span class="title function_">injectManifest</span>(&#123;</span><br><span class="line">      <span class="attr">swSrc</span>: <span class="string">&quot;./sw-template.js&quot;</span>,</span><br><span class="line">      <span class="attr">swDest</span>: <span class="string">&quot;./public/sw.js&quot;</span>,</span><br><span class="line">      <span class="attr">globDirectory</span>: <span class="string">&quot;./public&quot;</span>,</span><br><span class="line">      <span class="attr">globPatterns</span>: [</span><br><span class="line">        <span class="comment">// 缓存所有以下类型的文件，极端不推荐</span></span><br><span class="line">        <span class="comment">// &quot;**/*.&#123;html,css,js,json,woff2,xml&#125;&quot;</span></span><br><span class="line">        <span class="comment">// 推荐只缓存404，主页和主要样式和脚本。</span></span><br><span class="line">        <span class="string">&quot;404.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;index.html&quot;</span>,</span><br><span class="line">        <span class="string">&quot;js/main.js&quot;</span>,</span><br><span class="line">        <span class="string">&quot;css/index.css&quot;</span>,</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">modifyURLPrefix</span>: &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span>: <span class="string">&quot;./&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">    gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">terser</span>(&#123;&#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">    gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">cssnano</span>(&#123;</span><br><span class="line">            <span class="attr">mergeIdents</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">reduceIdents</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">discardUnused</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">zIndex</span>: <span class="literal">false</span></span><br><span class="line">        &#125;)).<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">    gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlClean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlMin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除html注释</span></span><br><span class="line">            <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//压缩html</span></span><br><span class="line">            <span class="attr">collapseInlineTagWhitespace</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">noNewlinesBeforeTagClose</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">removeAttributeQuotes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">removeRedundantAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//省略布尔属性的值，例如：&lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除所有空格作属性值，例如：&lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">            <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span></span><br><span class="line">            <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的 type=&quot;text/css&quot;</span></span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 JS</span></span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面 CSS</span></span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>  <span class="comment">//压缩页面URL</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩</span></span><br><span class="line">gulp.<span class="title function_">task</span>(</span><br><span class="line">    <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    gulp.<span class="title function_">series</span>(<span class="string">&quot;generate-service-worker&quot;</span>, gulp.<span class="title function_">parallel</span>(<span class="string">&quot;minify-js&quot;</span>, <span class="string">&quot;minify-html&quot;</span>, <span class="string">&quot;minify-css&quot;</span>,))</span><br><span class="line">  );</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>在博客根目录创建sw-template.js，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> workboxVersion = <span class="string">&#x27;5.1.3&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">importScripts</span>(<span class="string">`https://storage.googleapis.com/workbox-cdn/releases/<span class="subst">$&#123;workboxVersion&#125;</span>/workbox-sw.js`</span>);</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">setCacheNameDetails</span>(&#123;</span><br><span class="line">    <span class="attr">prefix</span>: <span class="string">&quot;your name&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">skipWaiting</span>();</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">core</span>.<span class="title function_">clientsClaim</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册成功后要立即缓存的资源列表</span></span><br><span class="line"><span class="comment">// 具体缓存列表在gulpfile.js中配置，见下文</span></span><br><span class="line">workbox.<span class="property">precaching</span>.<span class="title function_">precacheAndRoute</span>(self.<span class="property">__WB_MANIFEST</span>,&#123;</span><br><span class="line">    <span class="attr">directoryIndex</span>: <span class="literal">null</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空过期缓存</span></span><br><span class="line">workbox.<span class="property">precaching</span>.<span class="title function_">cleanupOutdatedCaches</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片资源（可选，不需要就注释掉）</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="regexp">/\.(?:png|jpg|jpeg|gif|bmp|webp|svg|ico)$/</span>,</span><br><span class="line">    <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">        <span class="attr">cacheName</span>: <span class="string">&quot;images&quot;</span>,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">                <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">                <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字体文件（可选，不需要就注释掉）</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="regexp">/\.(?:eot|ttf|woff|woff2)$/</span>,</span><br><span class="line">    <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">        <span class="attr">cacheName</span>: <span class="string">&quot;fonts&quot;</span>,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">                <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">                <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 谷歌字体（可选，不需要就注释掉）</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="regexp">/^https:\/\/fonts\.googleapis\.com/</span>,</span><br><span class="line">    <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">StaleWhileRevalidate</span>(&#123;</span><br><span class="line">        <span class="attr">cacheName</span>: <span class="string">&quot;google-fonts-stylesheets&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="regexp">/^https:\/\/fonts\.gstatic\.com/</span>,</span><br><span class="line">    <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">        <span class="attr">cacheName</span>: <span class="string">&#x27;google-fonts-webfonts&#x27;</span>,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">                <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">                <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// jsdelivr的CDN资源（可选，不需要就注释掉）</span></span><br><span class="line">workbox.<span class="property">routing</span>.<span class="title function_">registerRoute</span>(</span><br><span class="line">    <span class="regexp">/^https:\/\/cdn\.jsdelivr\.net/</span>,</span><br><span class="line">    <span class="keyword">new</span> workbox.<span class="property">strategies</span>.<span class="title class_">CacheFirst</span>(&#123;</span><br><span class="line">        <span class="attr">cacheName</span>: <span class="string">&quot;static-libs&quot;</span>,</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">expiration</span>.<span class="title class_">ExpirationPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">maxEntries</span>: <span class="number">1000</span>,</span><br><span class="line">                <span class="attr">maxAgeSeconds</span>: <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> workbox.<span class="property">cacheableResponse</span>.<span class="title class_">CacheableResponsePlugin</span>(&#123;</span><br><span class="line">                <span class="attr">statuses</span>: [<span class="number">0</span>, <span class="number">200</span>]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">workbox.<span class="property">googleAnalytics</span>.<span class="title function_">initialize</span>();</span><br></pre></td></tr></table></figure></li><li><p>在<code>[Blogroot]\themes\butterfly\layout\includes\third-party\</code>目录下新建<code>pwanotice.pug</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#app-refresh.app-refresh(style=&#x27;position: fixed;top: -2.2rem;left: 0;right: 0;z-index: 99999;padding: 0 1rem;font-size: 15px;height: 2.2rem;transition: all 0.3s ease;&#x27;)</span></span><br><span class="line">  .app-refresh-wrap(style=<span class="string">&#x27; display: flex;color: #fff;height: 100%;align-items: center;justify-content: center;&#x27;</span>)</span><br><span class="line">    label ✨ 有新文章啦！ 👉</span><br><span class="line">    a(href=<span class="string">&#x27;javascript:void(0)&#x27;</span> onclick=<span class="string">&#x27;location.reload()&#x27;</span>)</span><br><span class="line">      span(style=<span class="string">&#x27;color: #fff;text-decoration: underline;cursor: pointer;&#x27;</span>) 点击打开🚀</span><br><span class="line">script.</span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.serviceWorker.controller) &#123;</span><br><span class="line">  navigator.serviceWorker.addEventListener(<span class="string">&#x27;controllerchange&#x27;</span>, function() &#123;</span><br><span class="line">  showNotification()</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  window.addEventListener(<span class="string">&#x27;load&#x27;</span>, function() &#123;</span><br><span class="line">  navigator.serviceWorker.register(<span class="string">&#x27;/sw.js&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  function showNotification() &#123;</span><br><span class="line">  <span class="keyword">if</span> (GLOBAL_CONFIG.Snackbar) &#123;</span><br><span class="line">  var snackbarBg =</span><br><span class="line">  document.documentElement.getAttribute(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;light&#x27;</span> ?</span><br><span class="line">  GLOBAL_CONFIG.Snackbar.bgLight :</span><br><span class="line">  GLOBAL_CONFIG.Snackbar.bgDark</span><br><span class="line">  var snackbarPos = GLOBAL_CONFIG.Snackbar.position</span><br><span class="line">  Snackbar.show(&#123;</span><br><span class="line">  text: <span class="string">&#x27;✨ 有新文章啦！ 👉&#x27;</span>,</span><br><span class="line">  backgroundColor: snackbarBg,</span><br><span class="line">  duration: <span class="number">500000</span>,</span><br><span class="line">  pos: snackbarPos,</span><br><span class="line">  actionText: <span class="string">&#x27;点击打开🚀&#x27;</span>,</span><br><span class="line">  actionTextColor: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">  onActionClick: function(e) &#123;</span><br><span class="line">  location.reload()</span><br><span class="line">  &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  var showBg =</span><br><span class="line">  document.documentElement.getAttribute(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;light&#x27;</span> ?</span><br><span class="line">  <span class="string">&#x27;#3b70fc&#x27;</span> :</span><br><span class="line">  <span class="string">&#x27;#1f1f1f&#x27;</span></span><br><span class="line">  var cssText = `top: <span class="number">0</span>; background: $&#123;showBg&#125;;`</span><br><span class="line">  document.getElementById(<span class="string">&#x27;app-refresh&#x27;</span>).style.cssText = cssText</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>[Blogroot]\themes\butterfly\layout\includes\additional-js.pug</code>,在文件底部添加以下内容，注意缩进</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+     if theme.pwa.enable</span></span><br><span class="line"><span class="addition">+       !=partial(&#x27;includes/third-party/pwanotice&#x27;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span></span><br></pre></td></tr></table></figure></li><li><p>打开图标包内的<code>site.webmanifest</code>,建议修改文件名为<code>manifest.json</code>并将其放到<code>网站根目录的source文件夹</code>下，此时还不能直接用，需要添加一些内容，以下是我的<code>manifest.json</code>配置内容，作为参考，其中的<code>theme_color</code>建议用取色器取设计的图标的主色调，<strong>同时务必配置start_url和name的配置项，这关系到你之后能否看到浏览器的应用安装按钮</strong>。：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MYAN&#x27;s Blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MYAN&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;theme_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#b8d7ed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;background_color&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#b8d7ed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standalone&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scope&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/android-chrome-36x36.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;36x36&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/android-chrome-48x48.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;48x48&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/android-chrome-72x72.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;72x72&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/android-chrome-96x96.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;96x96&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/android-chrome-144x144.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;144x144&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/img/siteicon/android-chrome-192x192.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span> <span class="string">&quot;192x192&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;image/png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;splash_pages&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>打开主题配置文件<code>themes\hexo-theme-butterfly\_config.yml</code>,找到<code>PWA</code>配置项。添加图标路径</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">manifest:</span> <span class="string">/manifest.json</span></span><br><span class="line">  <span class="attr">theme_color:</span> <span class="string">&#x27;#b8d7ed&#x27;</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/img/siteicon/apple-touch-icon.png</span></span><br><span class="line">  <span class="attr">favicon_32_32:</span> <span class="string">/img/siteicon/favicon-32x32.png</span></span><br><span class="line">  <span class="attr">favicon_16_16:</span> <span class="string">/img/siteicon/favicon-16x16.png</span></span><br><span class="line">  <span class="attr">mask_icon:</span> <span class="string">/img/siteicon/safari-pinned-tab.svg</span></span><br></pre></td></tr></table></figure></li><li><p>在执行<code>hexo g</code>后执行<code>gulp</code>即可</p></li></ul>              </div>            </details>              </div>            </details><h2 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h2><p>CDN 利用全局<a href="https://baike.baidu.com/item/负载均衡技术?fromModule=lemma_inlink">负载均衡技术</a>将用户的访问指向离用户最近的工作正常的<a href="https://baike.baidu.com/item/流媒体服务器?fromModule=lemma_inlink">流媒体服务器</a>上，由流媒体服务器直接响应用户的请求。服务器中如果没有用户要访问的内容，会根据配置自动从原服务器抓取相应的内容并提供给用户。</p><p>使用CDN的前提是有自己的域名，如果要白嫖国内的CDN的话还需要进行备案，一切准备就绪后挑选心仪的CDN供应商即可，CDN我使用的是<a href="https://www.upyun.com/">又拍云</a>，每个月有免费的存储与流量。</p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我和我的小伙伴超</title>
      <link href="/posts/310975005/"/>
      <url>/posts/310975005/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="84a0acf4ef1b8a1196f46439da1b415ef9697e8f88003d5620e52ca5d477e5c9">7a62b715975494b3f39b582cff78fdaad737051d472f5f1e61efea2a13b76480aae67f1854efebf79de13c289fb5561a759e6257f4da91421d97f4fcc2d36c352c76c6b4ee6a71ff3cbf9912dc2f0ce5f457b940ba23268b772f0b4ff9d1d7ba6761f56a02019dbe050b10e27a3c97899b9ce33c8e639f2594fbb9a0f3ef23ddd144f3909159bac495c61d169747e32292189119c881aabafd9c2159630c9c8444419ba09d3e7eac10f829bbb17ee1b5f46fcc423b8855459127b86463b20df52b1806fa0656dc1a6817987615d19439a32b39df7602c38738d44ee4e75861bc75219e2e7e5339b4ba8dd343e4c602d87e34cec4d8a22bcba84865a920008c6974ddd18bdc9923a00d061d84c84ee75704efaff6a0081dca8ab9afd279e11ad8ca96521a08880cf426fa431be89ebf7a6c25311b4e8fe5005c091ce4078ba23e2430d47ab4792c1345df10a54851bdcbb908ed9baf13578c1d9f347cd01db8ca9e8231e1f9fee14ec2fd1cdec06855e8cb23e971be662d48fa8d263a7aa26be7a7bc5cc46315cd2bc2312eb1e544275920e7ded532be1366be056c9a31c5f43ea46415b3c73cffa6ae727c19d9b7056f70268eee270137c8811aa2f1fe44197fb2d0969cb655f91dde64a622237cfffe5be15470aba8494569df92e6ffd5e1ae6e2becbab213c0ffeb395bc72d3c997efc32c5208ad1557b4bda6fb33a7365a9ff8192019d320f1f62233b0f3f55f71f60da8f3c93eef79cede25facde7c2bd5a88ac052088acb05513c941219514fe8c6527fcf8ec560546429ded0ee7a0c572530ac257b0b01f6bd206e1926e2d5e1c0c4b63a094311323ea919feeb4c7a89761837974bc2e883780af4bd5be05cfaea54b583393b855d088e09d0417f4a8c3bfbe8015ca33eccaa310a543bb20506436f17506cf024ccea4d101283b4ff093281b423869aaf85df76f4709302d08ee7b3d0883e5236b98fdb198034edfe8f5e7b2b3dc2dc4a4114841a6421e00ba302a03fed0c57bcd050c3f015ae5d5d44f325704b6d93ab869fa3dbf52b0713678fb5411f75d477a5b7c824e4e86fa35ca1b4dbf8f190f850bd79f286bc46bb4e3ea431a3f485dd83eb23034c5f4539898a0b4edf95594b8b1d25d61a68edc062c815268fb530863629c758b241c04024ee1a16ad250136dac7829d50781deba4599d67b37528b35052d499ca15d34c94b719c2dd39f3e4c7e7f533b27e698dee27714a6f3aa1996cf0dd6bad594a7fcceb5ab09cef348c3b23299156da21bdea762c0ea2374cc07876d2b8a538abaead2cb20a988049d31326932e17470332c8e61bf4009fe8548f2d13f44e8e8218eef9e8a90896e3d76bdf26d62154b2641f73968ea5bc1cc9fdc60574258fe194993c7c289031b84ecd0dbe39a47c13f79c8d74dc14769166f7d5a524e89de4729751b13f32e9b9a045f7185df450429aea7fa1ee7195358a6f674391b105461cdd07a22ed2b50ecb560879dc25341ded8b3b793f4424a0baa72869ee8133aecb50b65928be51a93c4c080c1b6b6af10990fffef94682138cb0c7b696efe3855d8ea8169cd3d08b83cac658d6e45519798d8b5ee344fdcddd164efc6939155108a2f1a48bb585b3969e7458a70f93ab2c14911b5fb2146fabe3344606d8130aa06eee163e1900c42890d740b189b8830ed233d49421766fa5162fb91917fd92a685697e28fc223aeb6ee6c1be1000a744d004140d1a8fbe2cd27939918a41436399a1312b875858e1b89427f9169f033f89bb6464dc51567b819d901a7121e1493ad056e49b717cd5e89613a2d8d2987a9e2d86148e72853a5f6f522921cb2a841c87f8c717153d3a9df92a96b50e3104e3bc9bdb9b0e4bc9b319ca690ebe2adc6bb6074dffb8486a36b43a5c91060833a622fdbe953b51b4575facb64f06fc4592c3e7d11e3a093ee7888e2a83788d737871f712183ea8fdc6505776d0e4993a6f5434c873ad7b978b58027af18ee1e1f659994349c34b1f0e683cef6203b320700224fdf425f1450ad9888fd5588beac4cd42870fc7628866797d9c170841ac2d0ac1f5365e25a97fcfa3cd0f8252a06e8708b736490b4af049af8cbb14671937bddc911fe312856fe7e914e2a2b85ef172e3edf72ee2a88556c532a39becefbbaa35d24bc7ac0719234c261e5c04c9c9dbf5a0d58d34e004f0620037091aa369c71fefcde5ce7b101e5767351052dabffa1df04da3fe09e8f8dcf5e4dfd45f7998a7ecd57996c2caa2c2e3d09be1b321b1aec9d2f407329fbc1bd4e74fcfa82dde47abd7788385c96f3398e35057ab3353f63098a93710f24f138534d8b6bc4300d2f35e7638461f8a43c84e889021a601b85686d70a5e0de780c3a8aa12cb4dcb2c285c7c2df1929008fd5cef035f37dc1dcc6f9d4f310f5c9863d07e589dc44c2fcab273a00df8b09c3ca08682e6edf10d60ee0ceab6a43657c3cd6e71efd38a753fe88ded8cdb2e52927a7abdd938e8344542c70eef05bd11b895837d19c972f53ccf2b13a8fdf2a08760b4d119a35349597b6f54d1931272cb5426990f9d953edfbeb18fa89e2c10659cadccffa604101e030cb5a1c4dd8e6d294ac08a49176345900755af65b12f92ac5025ef5f6cc786aa6c95bf8f15a239b17f56eb65dcba2c00e61b4385cd919c0317643cc3707747c86426fa6e691d063bdd03775ef3daa9c21d208915f76e9f5ed376e880341ab2c544153dbc09b822b0094281dbb95ed4f0eb5d823b48d3a6cdc0423d458351f66e28e2c6db12371955b495b413c50ed4f7ecae02bfd4b0d2e10d22fc9f4376efebab8817416fe871b1070f88eecb831e2ca1b6b8e97f278b4d7d21f23243e36d9a43e1cb8136d7bf7c295ea869172e7ff8f6178a3f756b236befe4121da222daabd44abf435d8dddb8cddae0db6960b526772f7aef04791669e7e252ab0517dd093e1405f386aa40583be739c8942e501697cbb4926e3119805eedd6bb9866e9fd15f203d930b9df3d218cef82f28f9591179e6aa956aca2846d256fef37ce8b2c8d91391bd82f84c695c3d1d5e6bfbd45b2e53c3a019241dc1e44e567e9ee66f9aba3bf28a7b2160872b871e4d918efd7781098243df0edab3434c799a28b67cf11f9cbfa2ca7ccdc4b13fa0b7214f343dff03e8eb85de1cbfbf5da4e829dcab5f65c58db23f135a7afd6b18f25c4bd71dee67c56251fdbf910a8c9a075a30f80ebe2c629051fd0500a7c0cd9d469f493a4ebb819e4ff84730ec90825127140be3565b9fbf7559dce3de73ea8a85861ea83a042c2a22177f7cb7d3bb03bdc0b1651bf7ded20702d75c355e19c276181b2115600201e1a787d4cf4c7b0c727b3d29cf93ce54fdca63dd93b6fe022aad15e91433cd9e5e52f7e66d977f97068b01809f688dc0ee9626d6d11dfc647527fc944fca4f6a1a5e0725761083fe6ec0665ff0ea7adc9a6bd90539096a18734cd860d2c5a3d5fcacae5cd26034cc12c9f25781acac06e8f42587abc0f617e4ff801ca82bb9a2cabb10c7b36b97cba5c8a507c1015fd707d01b1f1e8100e022bee65f66cb159edead1d4cfa309b78e7921bf201aa0dee293ed81d64f78ae27661f80df48d9518659e89eeaa57438b9d7e2b50574495645cc7dbd480c3e998842eee7928a637e44c7456465278a028ce753eadbbe63484194cf3849a7dde11b395e09fe437ff25aac610b33621a09c40d6e18242893c12ced2813120096a26726b55dc6bbc7827add237f0b2fac87d5e33c9f2ffb3288f5e0729070c55022cdbcc492d04cdd4e0c4176ecc9cf0b52c3f133c99e7624e4a1f6f1bdc513900f9b8a3ca6f938efb2de71a12e295e84b313537d2f8869e57dad5624f868ac192cb61db35682f3005a22f25386a91ae73fe7cbb27c590da2f8531fe3262dbe15e7d22f85f3219236eccaffad3641d9f1bb6ea7b6d5ddfe821d37406b9aa2a0cb5932b91a983c451eabe663dcf04d11b4e5e82c288a6824977311d0870ff7eac7fcb59397bfe3f5228fd4773e0f2cb905534318ce2d0bd8ec9c5537f0a65cbbad1c15764c9fb3ec8749b8556daaadb2e44c76a21fa29ce3305b6d339134fc7a05b5</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 友谊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>民政部数据反爬坑</title>
      <link href="/posts/2811165020/"/>
      <url>/posts/2811165020/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文记录抓取民政部数据时，出现的坑。主要抓取<a href="https://www.mca.gov.cn/article/sj/xzqh/2020/">页面</a>中县以上行政区划代码链接的具体内容。本文章仅用于笔者记录学习过程，请遵守相关法律法规，严禁用于非法途径。若读者因此作出任何危害网络安全的行为，后果自负，与笔者无关。</p><h2 id="确定数据来源"><a href="#确定数据来源" class="headerlink" title="确定数据来源"></a>确定数据来源</h2><p>首先需要确认县以上行政区划代码链接是否在响应中，右键查看网页源代码，在页面中搜索“2020年11月份县以上行政区划代码”，发现存在该关键字，可以确定能够从网页响应中获取需要的数据。</p><p>接着，在超链接“2020年11月份县以上行政区划代码”上右键检查，查看所指向的url地址，如下图所示：</p><p><img src="https://imgs.myan.run/i/2022/12/19/oxdxmb-2.webp" alt="image-20221219150724564"></p><h2 id="分析数据"><a href="#分析数据" class="headerlink" title="分析数据"></a>分析数据</h2><p>点击url地址，发现页面跳转后的地址与点击的url地址不符</p><p><img src="https://imgs.myan.run/i/2022/12/19/oyf76i-2.webp" alt="image-20221219150858325"></p><p>怀疑在点击页面后，触发JS脚本链接重定向，于是将页面的响应打印输出，观察响应中是否存在页面跳转后的url地址，最终发现是有的，于是利用xpath表达式对真正的url地址进行提取。</p><h2 id="编写程序"><a href="#编写程序" class="headerlink" title="编写程序"></a>编写程序</h2><p>以下代码是根据上文的分析，利用requests库实现的；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用requests库爬取民政部数据</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MzbSpider</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.url = <span class="string">&#x27;https://www.mca.gov.cn/article/sj/xzqh/2020/&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_headers</span>(<span class="params">self</span>):</span><br><span class="line">        headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: UserAgent().random&#125;</span><br><span class="line">        <span class="keyword">return</span> headers</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_html</span>(<span class="params">self, url</span>):</span><br><span class="line">        headers = self.get_headers()</span><br><span class="line">        html = requests.get(url=url, headers=headers).text</span><br><span class="line">        <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_data</span>(<span class="params">self, url</span>):</span><br><span class="line">        <span class="comment"># 向真实二级页面发送请求</span></span><br><span class="line">        html = self.get_html(url)</span><br><span class="line">        eobj = etree.HTML(html)</span><br><span class="line">        city = eobj.xpath(<span class="string">&#x27;//tr[@height=&quot;19&quot;]&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> city:</span><br><span class="line">            li = &#123;&#125;</span><br><span class="line">            city_id = item.xpath(<span class="string">&#x27;./td[2]//text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            city_name = item.xpath(<span class="string">&#x27;./td[3]/text()&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            li[city_id] = city_name</span><br><span class="line">            <span class="built_in">print</span>(li)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_html</span>(<span class="params">self</span>):</span><br><span class="line">        html = self.get_html(self.url)</span><br><span class="line">        eobj = etree.HTML(html)</span><br><span class="line">        link = eobj.xpath(<span class="string">&#x27;//ul[@class=&quot;alist_ul&quot;]/table//tr[1]//a/@href&#x27;</span>)</span><br><span class="line">        href = <span class="string">&#x27;https://www.mca.gov.cn&#x27;</span> + link[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 向子页面发起请求</span></span><br><span class="line">        html = self.get_html(href)</span><br><span class="line">        <span class="comment"># 测试:查看子页面响应内容</span></span><br><span class="line">        <span class="comment"># with open(&#x27;index.html&#x27;,&#x27;w&#x27;) as f:</span></span><br><span class="line">        <span class="comment">#     f.write(html)</span></span><br><span class="line">        <span class="comment"># 获取真实的链接地址</span></span><br><span class="line">        target = etree.HTML(html).xpath(<span class="string">&#x27;//body/script[1]/text()&#x27;</span>)[<span class="number">0</span>].strip()</span><br><span class="line">        target_href = target.split(<span class="string">&#x27;&quot;&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">        self.parse_data(target_href)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    spider = MzbSpider()</span><br><span class="line">    spider.parse_html()</span><br></pre></td></tr></table></figure><p>以下代码是利用selenium实现的，利用selenium无需考虑网站链接重定向的问题，此外以下代码还利用redis数据库做了增量爬虫；</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用selenium民政部数据爬取</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MzbSpider</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 打开浏览器并访问</span></span><br><span class="line">        options = webdriver.ChromeOptions()</span><br><span class="line">        options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">        self.driver = webdriver.Chrome(options=options)</span><br><span class="line">        self.driver.get(<span class="string">&#x27;http://www.mca.gov.cn/article/sj/xzqh/2020/&#x27;</span>)</span><br><span class="line">        self.r = redis.Redis(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">md5_href</span>(<span class="params">self, href</span>):</span><br><span class="line">        m = md5()</span><br><span class="line">        m.update(href.encode())</span><br><span class="line">        <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_html</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 查找第一个县级行政区代码链接</span></span><br><span class="line">        a = self.driver.find_element_by_partial_link_text(<span class="string">&#x27;县以上行政区划代码&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断网页是否被抓取</span></span><br><span class="line">        href = a.get_attribute(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> self.r.sadd(<span class="string">&#x27;mzbSpider&#x27;</span>, self.md5_href(href)) == <span class="number">0</span>:</span><br><span class="line">            sys.exit(<span class="string">&#x27;结束&#x27;</span>)</span><br><span class="line">        a.click()</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 切换句柄</span></span><br><span class="line">        all_handles = self.driver.window_handles</span><br><span class="line">        self.driver.switch_to.window(all_handles[<span class="number">1</span>])</span><br><span class="line">        <span class="comment"># 获取网页内容</span></span><br><span class="line">        info = self.driver.find_elements_by_xpath(<span class="string">&#x27;//tr[@height=&quot;19&quot;]&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> info:</span><br><span class="line">            info_dic = &#123;&#125;</span><br><span class="line">            li = item.text.split()</span><br><span class="line">            info_dic[<span class="string">&#x27;code&#x27;</span>] = li[<span class="number">0</span>]</span><br><span class="line">            info_dic[<span class="string">&#x27;name&#x27;</span>] = li[<span class="number">1</span>]</span><br><span class="line">            <span class="built_in">print</span>(info_dic)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    spider = MzbSpider()</span><br><span class="line">    spider.parse_html()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS逆向之百度翻译</title>
      <link href="/posts/1408060826/"/>
      <url>/posts/1408060826/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文使用JS逆向的方法破解百度翻译；本文章仅用于笔者记录学习过程，请遵守相关法律法规，严禁用于非法途径。若读者因此作出任何危害网络安全的行为，后果自负，与笔者无关。</p><h2 id="分析数据来源"><a href="#分析数据来源" class="headerlink" title="分析数据来源"></a>分析数据来源</h2><ol><li>打开<a href="https://fanyi.baidu.com/">百度翻译网站</a>，在输入框输入需要翻译的单词：例如spider，右键查看网页源代码，在网页源代码中搜索spider，发现并没有spider单词，因此可以判断请求百度翻译翻译单词的过程应该是一个异步请求；</li></ol><h2 id="获取需要请求的数据"><a href="#获取需要请求的数据" class="headerlink" title="获取需要请求的数据"></a>获取需要请求的数据</h2><ol><li><p>根据上文的判断这应当是一个异步请求；按下F12然后刷新网站页面，获取加载网站的JS,CSS等文件；</p></li><li><p>在输入框中输入查询单词，例如hello；查看发送的异步请求，一个一个查看，观察哪一个请求的响应是获得翻译结果的；这里判断应当是v2开头的这个请求；</p><p><img src="https://imgs.myan.run/i/2022/12/13/raobf3-2.webp" alt="image-20221213165050959"></p></li><li><p>查看请求头，发现这是一个post请求，根据表单数据初步判断可能有两项请求内容是变化的，一个是sign一个是token；</p><p><img src="https://imgs.myan.run/i/2022/12/13/11da7cx-2.webp" alt="image-20221213225954328"></p></li><li><p>更换查询单词，发现token值并不变化，因此变化的只有sign值，接下来需要获取的sign的值；在JS文件中查询哪些文件中有sign这个变量，最后定位到如下图这个JS文件中，在该JS文件中，搜索sign，发现两处有可能生成sign值的地方，通过加断点调试，发现有一处是为了混淆视听无效代码；</p><p><img src="https://imgs.myan.run/i/2022/12/13/s4a6d9-2.webp" alt="image-20221213170024006"></p></li><li><p>进入生成sign值的函数中，如下图所示，发现代码及其繁琐，如果想要用python代码复现逻辑，需要耗费大量时间；因此尝试使用JS逆向的思想，在python中使用模块execjs运行JS代码，只要能够获得sign值即可；生成sign值的函数的参数，通过加断点调试，发现是输入的查询翻译的单词；</p><p><img src="https://imgs.myan.run/i/2022/12/13/s7rci6-2.webp" alt="image-20221213170607750"></p></li><li><p>复制生成sign值的函数，为了防止该函数可能还会调用其他函数，可以将该函数附近的函数一并复制；以下是我复制的JS代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">    (<span class="literal">null</span> == e || e &gt; t.<span class="property">length</span>) &amp;&amp; (e = t.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>, r = <span class="keyword">new</span> <span class="title class_">Array</span>(e); n &lt; e; n++)</span><br><span class="line">        r[n] = t[n];</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">n</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; e.<span class="property">length</span> - <span class="number">2</span>; n += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = e.<span class="title function_">charAt</span>(n + <span class="number">2</span>);</span><br><span class="line">        r = <span class="string">&quot;a&quot;</span> &lt;= r ? r.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="number">87</span> : <span class="title class_">Number</span>(r),</span><br><span class="line">        r = <span class="string">&quot;+&quot;</span> === e.<span class="title function_">charAt</span>(n + <span class="number">1</span>) ? t &gt;&gt;&gt; r : t &lt;&lt; r,</span><br><span class="line">        t = <span class="string">&quot;+&quot;</span> === e.<span class="title function_">charAt</span>(n) ? t + r &amp; <span class="number">4294967295</span> : t ^ r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> r = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//  源代码这里是t.exports = function(t)，为了方便我调用该函数，做了修改 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">l</span>(<span class="params">t</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> o, i = t.<span class="title function_">match</span>(<span class="regexp">/[\uD800-\uDBFF][\uDC00-\uDFFF]/g</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> === i) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = t.<span class="property">length</span>;</span><br><span class="line">        a &gt; <span class="number">30</span> &amp;&amp; (t = <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(t.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">10</span>)).<span class="title function_">concat</span>(t.<span class="title function_">substr</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(a / <span class="number">2</span>) - <span class="number">5</span>, <span class="number">10</span>)).<span class="title function_">concat</span>(t.<span class="title function_">substr</span>(-<span class="number">10</span>, <span class="number">10</span>)))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> s = t.<span class="title function_">split</span>(<span class="regexp">/[\uD800-\uDBFF][\uDC00-\uDFFF]/</span>), c = <span class="number">0</span>, u = s.<span class="property">length</span>, l = []; c &lt; u; c++)</span><br><span class="line">            <span class="string">&quot;&quot;</span> !== s[c] &amp;&amp; l.<span class="property">push</span>.<span class="title function_">apply</span>(l, <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(t))</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">e</span>(t)</span><br><span class="line">            &#125;(o = s[c].<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)) || <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="title class_">Symbol</span> &amp;&amp; <span class="literal">null</span> != t[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] || <span class="literal">null</span> != t[<span class="string">&quot;@@iterator&quot;</span>])</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(t)</span><br><span class="line">            &#125;(o) || <span class="keyword">function</span>(<span class="params">t, n</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> t)</span><br><span class="line">                        <span class="keyword">return</span> <span class="title function_">e</span>(t, n);</span><br><span class="line">                    <span class="keyword">var</span> r = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(t).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Object&quot;</span> === r &amp;&amp; t.<span class="property">constructor</span> &amp;&amp; (r = t.<span class="property">constructor</span>.<span class="property">name</span>),</span><br><span class="line">                    <span class="string">&quot;Map&quot;</span> === r || <span class="string">&quot;Set&quot;</span> === r ? <span class="title class_">Array</span>.<span class="title function_">from</span>(t) : <span class="string">&quot;Arguments&quot;</span> === r || <span class="regexp">/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/</span>.<span class="title function_">test</span>(r) ? <span class="title function_">e</span>(t, n) : <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;(o) || <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.&quot;</span>)</span><br><span class="line">            &#125;()),</span><br><span class="line">            c !== u - <span class="number">1</span> &amp;&amp; l.<span class="title function_">push</span>(i[c]);</span><br><span class="line">        <span class="keyword">var</span> p = l.<span class="property">length</span>;</span><br><span class="line">        p &gt; <span class="number">30</span> &amp;&amp; (t = l.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">10</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) + l.<span class="title function_">slice</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(p / <span class="number">2</span>) - <span class="number">5</span>, <span class="title class_">Math</span>.<span class="title function_">floor</span>(p / <span class="number">2</span>) + <span class="number">5</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) + l.<span class="title function_">slice</span>(-<span class="number">10</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> d = <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">103</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">116</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">107</span>)), h = (<span class="literal">null</span> !== r ? r : (r = <span class="variable language_">window</span>[d] || <span class="string">&quot;&quot;</span>) || <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>), f = <span class="title class_">Number</span>(h[<span class="number">0</span>]) || <span class="number">0</span>, m = <span class="title class_">Number</span>(h[<span class="number">1</span>]) || <span class="number">0</span>, g = [], y = <span class="number">0</span>, v = <span class="number">0</span>; v &lt; t.<span class="property">length</span>; v++) &#123;</span><br><span class="line">        <span class="keyword">var</span> _ = t.<span class="title function_">charCodeAt</span>(v);</span><br><span class="line">        _ &lt; <span class="number">128</span> ? g[y++] = _ : (_ &lt; <span class="number">2048</span> ? g[y++] = _ &gt;&gt; <span class="number">6</span> | <span class="number">192</span> : (<span class="number">55296</span> == (<span class="number">64512</span> &amp; _) &amp;&amp; v + <span class="number">1</span> &lt; t.<span class="property">length</span> &amp;&amp; <span class="number">56320</span> == (<span class="number">64512</span> &amp; t.<span class="title function_">charCodeAt</span>(v + <span class="number">1</span>)) ? (_ = <span class="number">65536</span> + ((<span class="number">1023</span> &amp; _) &lt;&lt; <span class="number">10</span>) + (<span class="number">1023</span> &amp; t.<span class="title function_">charCodeAt</span>(++v)),</span><br><span class="line">        g[y++] = _ &gt;&gt; <span class="number">18</span> | <span class="number">240</span>,</span><br><span class="line">        g[y++] = _ &gt;&gt; <span class="number">12</span> &amp; <span class="number">63</span> | <span class="number">128</span>) : g[y++] = _ &gt;&gt; <span class="number">12</span> | <span class="number">224</span>,</span><br><span class="line">        g[y++] = _ &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>),</span><br><span class="line">        g[y++] = <span class="number">63</span> &amp; _ | <span class="number">128</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> b = f, w = <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">43</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">45</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">97</span>)) + <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">94</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">43</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">54</span>)), k = <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">43</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">45</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">51</span>)) + <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">94</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">43</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">98</span>)) + <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">43</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">45</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">102</span>)), x = <span class="number">0</span>; x &lt; g.<span class="property">length</span>; x++)</span><br><span class="line">        b = <span class="title function_">n</span>(b += g[x], w);</span><br><span class="line">    <span class="keyword">return</span> b = <span class="title function_">n</span>(b, k),</span><br><span class="line">    (b ^= m) &lt; <span class="number">0</span> &amp;&amp; (b = <span class="number">2147483648</span> + (<span class="number">2147483647</span> &amp; b)),</span><br><span class="line">    <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>((b %= <span class="number">1e6</span>).<span class="title function_">toString</span>(), <span class="string">&quot;.&quot;</span>).<span class="title function_">concat</span>(b ^ f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本文将上述JS代码保存为info.js，新建python文件，运行以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span>  <span class="built_in">open</span>(<span class="string">&#x27;info.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    jscode = f.read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建执行对象 并执行js代码</span></span><br><span class="line">jsobj=execjs.<span class="built_in">compile</span>(jscode)</span><br><span class="line">sign=jsobj.<span class="built_in">eval</span>(<span class="string">&#x27;l(&quot;hello&quot;)&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(sign)</span><br></pre></td></tr></table></figure><p>运行完，提示找不到widow，在info.js中查找参数widow，查找到的代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h = (<span class="literal">null</span> !== r ? r : (r = <span class="variable language_">window</span>[d] || <span class="string">&quot;&quot;</span>) || <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>), f = <span class="title class_">Number</span>(h[<span class="number">0</span>]) || <span class="number">0</span>, m = <span class="title class_">Number</span>(h[<span class="number">1</span>]) || <span class="number">0</span>, g = [], y = <span class="number">0</span>, v = <span class="number">0</span>; v &lt; t.<span class="property">length</span>; v++)</span><br></pre></td></tr></table></figure><p>这里widow有一个参数d，查找参数d的定义，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">103</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">116</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">107</span>))</span><br></pre></td></tr></table></figure><p>初步判断这个变量d是一个字符串，在控制台输入变量d的定义，得到字符串gtk：</p><p><img src="https://imgs.myan.run/i/2022/12/13/shwp66-2.webp" alt="image-20221213172313399"></p></li><li><p>由于是widow，因此判断gtk应当是在网页源代码中，右键查看网页源代码，搜索参数gtk，得到参数gtk的值，更换其他搜索单词，发现该参数gtk的值并不变化：</p><p><img src="https://imgs.myan.run/i/2022/12/13/sj54mt-2.webp" alt="image-20221213172519965"></p></li><li><p>得到gtk值后，将JS文件中window[d]直接替换成在网页源代码中搜索到的值，再运行python文件，运行成功，至此破解sign值到此结束</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x  h = (<span class="literal">null</span> !== r ? r : (r = <span class="variable language_">window</span>[d] || <span class="string">&quot;&quot;</span>) || <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>), f = <span class="title class_">Number</span>(h[<span class="number">0</span>]) || <span class="number">0</span>, m = <span class="title class_">Number</span>(h[<span class="number">1</span>]) || <span class="number">0</span>, g = [], y = <span class="number">0</span>, v = <span class="number">0</span>; v &lt; t.<span class="property">length</span>; v++)</span><br><span class="line"><span class="comment">// 调换成</span></span><br><span class="line">x  h = (<span class="literal">null</span> !== r ? r : (r = <span class="string">&#x27;320305.131321201&#x27;</span> || <span class="string">&quot;&quot;</span>) || <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>), f = <span class="title class_">Number</span>(h[<span class="number">0</span>]) || <span class="number">0</span>, m = <span class="title class_">Number</span>(h[<span class="number">1</span>]) || <span class="number">0</span>, g = [], y = <span class="number">0</span>, v = <span class="number">0</span>; v &lt; t.<span class="property">length</span>; v++)</span><br></pre></td></tr></table></figure></li></ol><h2 id="整合请求数据"><a href="#整合请求数据" class="headerlink" title="整合请求数据"></a>整合请求数据</h2><p>需要请求的参数分别是headers，请求地址，表单数据；其中headers直接复制即可，请求地址也是直接复制即可，表单数据中，变化的部分有sign值以及查询的单词；</p><p><img src="https://imgs.myan.run/i/2022/12/13/ssnvw1-2.webp" alt="image-20221213174118578"></p><p><img src="https://imgs.myan.run/i/2022/12/13/122aolo-2.webp" alt="image-20221213230156704"></p><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>python文件:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">JS逆向之百度翻译爬虫</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BdTranslateSpider</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.url = <span class="string">&#x27;https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh&#x27;</span></span><br><span class="line">        self.get_url = <span class="string">&#x27;https://fanyi.baidu.com/&#x27;</span></span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;*/*&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Acs-Token&#x27;</span>: <span class="string">&#x27;使用自己请求头的&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;135&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=UTF-8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;使用自己请求头的&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;fanyi.baidu.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://fanyi.baidu.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://fanyi.baidu.com/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;empty&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;cors&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        self.word = <span class="built_in">input</span>(<span class="string">&#x27;请输入需要查询的单词:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_re</span>(<span class="params">self, regex</span>):</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate, br&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9,en;q=0.8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;max-age=0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;使用自己请求头的&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;fanyi.baidu.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sec-ch-ua&#x27;</span>: <span class="string">&#x27;&quot;Not?A_Brand&quot;;v=&quot;8&quot;, &quot;Chromium&quot;;v=&quot;108&quot;, &quot;Google Chrome&quot;;v=&quot;108&quot;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sec-ch-ua-mobile&#x27;</span>: <span class="string">&#x27;?0&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sec-ch-ua-platform&#x27;</span>: <span class="string">&#x27;&quot;Windows&quot;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Sec-Fetch-Dest&#x27;</span>: <span class="string">&#x27;document&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Sec-Fetch-Mode&#x27;</span>: <span class="string">&#x27;navigate&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Sec-Fetch-Site&#x27;</span>: <span class="string">&#x27;same-origin&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Sec-Fetch-User&#x27;</span>: <span class="string">&#x27;?1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        html = requests.get(url=self.get_url, headers=headers).text</span><br><span class="line">        find = re.findall(regex, html, re.S)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> find</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_sign</span>(<span class="params">self</span>):</span><br><span class="line">        regex = <span class="string">&#x27;window.gtk = &quot;(.*?)&quot;&#x27;</span></span><br><span class="line">        gtk = self.get_re(regex)</span><br><span class="line">        <span class="keyword">with</span>  <span class="built_in">open</span>(<span class="string">&#x27;info.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            jscode = f.read()</span><br><span class="line">        <span class="comment"># 创建执行对象 并执行js代码</span></span><br><span class="line">        jsobj = execjs.<span class="built_in">compile</span>(jscode)</span><br><span class="line">        sign = jsobj.<span class="built_in">eval</span>(<span class="string">&#x27;l(&quot;&#123;&#125;&quot;,&quot;&#123;&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(self.word, gtk))</span><br><span class="line">        <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack_bd_tanslate</span>(<span class="params">self</span>):</span><br><span class="line">        sign = self.get_sign()</span><br><span class="line">        regex = <span class="string">&quot;token: &#x27;(.*?)&#x27;&quot;</span></span><br><span class="line">        token = self.get_re(regex)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;from&#x27;</span>: <span class="string">&#x27;en&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;zh&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;query&#x27;</span>: self.word,</span><br><span class="line">            <span class="string">&#x27;transtype&#x27;</span>: <span class="string">&#x27;realtime&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;simple_means_flag&#x27;</span>: <span class="string">&#x27;3&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sign&#x27;</span>: sign,</span><br><span class="line">            <span class="string">&#x27;token&#x27;</span>: token,</span><br><span class="line">            <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        html = requests.post(url=self.url,</span><br><span class="line">                             data=data,</span><br><span class="line">                             headers=self.headers).json()</span><br><span class="line">        result = html[<span class="string">&#x27;trans_result&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;dst&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    spider = BdTranslateSpider()</span><br><span class="line">    spider.attack_bd_tanslate()</span><br></pre></td></tr></table></figure><p>JS文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">    (<span class="literal">null</span> == e || e &gt; t.<span class="property">length</span>) &amp;&amp; (e = t.<span class="property">length</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>, r = <span class="keyword">new</span> <span class="title class_">Array</span>(e); n &lt; e; n++)</span><br><span class="line">        r[n] = t[n];</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">n</span>(<span class="params">t, e</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="number">0</span>; n &lt; e.<span class="property">length</span> - <span class="number">2</span>; n += <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> r = e.<span class="title function_">charAt</span>(n + <span class="number">2</span>);</span><br><span class="line">        r = <span class="string">&quot;a&quot;</span> &lt;= r ? r.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) - <span class="number">87</span> : <span class="title class_">Number</span>(r),</span><br><span class="line">        r = <span class="string">&quot;+&quot;</span> === e.<span class="title function_">charAt</span>(n + <span class="number">1</span>) ? t &gt;&gt;&gt; r : t &lt;&lt; r,</span><br><span class="line">        t = <span class="string">&quot;+&quot;</span> === e.<span class="title function_">charAt</span>(n) ? t + r &amp; <span class="number">4294967295</span> : t ^ r</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> r = <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// t.exports = function(t)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">l</span>(<span class="params">t,gtk</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> o, i = t.<span class="title function_">match</span>(<span class="regexp">/[\uD800-\uDBFF][\uDC00-\uDFFF]/g</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> === i) &#123;</span><br><span class="line">        <span class="keyword">var</span> a = t.<span class="property">length</span>;</span><br><span class="line">        a &gt; <span class="number">30</span> &amp;&amp; (t = <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(t.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">10</span>)).<span class="title function_">concat</span>(t.<span class="title function_">substr</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(a / <span class="number">2</span>) - <span class="number">5</span>, <span class="number">10</span>)).<span class="title function_">concat</span>(t.<span class="title function_">substr</span>(-<span class="number">10</span>, <span class="number">10</span>)))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> s = t.<span class="title function_">split</span>(<span class="regexp">/[\uD800-\uDBFF][\uDC00-\uDFFF]/</span>), c = <span class="number">0</span>, u = s.<span class="property">length</span>, l = []; c &lt; u; c++)</span><br><span class="line">            <span class="string">&quot;&quot;</span> !== s[c] &amp;&amp; l.<span class="property">push</span>.<span class="title function_">apply</span>(l, <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(t))</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">e</span>(t)</span><br><span class="line">            &#125;(o = s[c].<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)) || <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="title class_">Symbol</span> &amp;&amp; <span class="literal">null</span> != t[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] || <span class="literal">null</span> != t[<span class="string">&quot;@@iterator&quot;</span>])</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(t)</span><br><span class="line">            &#125;(o) || <span class="keyword">function</span>(<span class="params">t, n</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (t) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;string&quot;</span> == <span class="keyword">typeof</span> t)</span><br><span class="line">                        <span class="keyword">return</span> <span class="title function_">e</span>(t, n);</span><br><span class="line">                    <span class="keyword">var</span> r = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(t).<span class="title function_">slice</span>(<span class="number">8</span>, -<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Object&quot;</span> === r &amp;&amp; t.<span class="property">constructor</span> &amp;&amp; (r = t.<span class="property">constructor</span>.<span class="property">name</span>),</span><br><span class="line">                    <span class="string">&quot;Map&quot;</span> === r || <span class="string">&quot;Set&quot;</span> === r ? <span class="title class_">Array</span>.<span class="title function_">from</span>(t) : <span class="string">&quot;Arguments&quot;</span> === r || <span class="regexp">/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/</span>.<span class="title function_">test</span>(r) ? <span class="title function_">e</span>(t, n) : <span class="keyword">void</span> <span class="number">0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;(o) || <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.&quot;</span>)</span><br><span class="line">            &#125;()),</span><br><span class="line">            c !== u - <span class="number">1</span> &amp;&amp; l.<span class="title function_">push</span>(i[c]);</span><br><span class="line">        <span class="keyword">var</span> p = l.<span class="property">length</span>;</span><br><span class="line">        p &gt; <span class="number">30</span> &amp;&amp; (t = l.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">10</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) + l.<span class="title function_">slice</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(p / <span class="number">2</span>) - <span class="number">5</span>, <span class="title class_">Math</span>.<span class="title function_">floor</span>(p / <span class="number">2</span>) + <span class="number">5</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) + l.<span class="title function_">slice</span>(-<span class="number">10</span>).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> d = <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">103</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">116</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">107</span>)), h = (<span class="literal">null</span> !== r ? r : (r = gtk || <span class="string">&quot;&quot;</span>) || <span class="string">&quot;&quot;</span>).<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>), f = <span class="title class_">Number</span>(h[<span class="number">0</span>]) || <span class="number">0</span>, m = <span class="title class_">Number</span>(h[<span class="number">1</span>]) || <span class="number">0</span>, g = [], y = <span class="number">0</span>, v = <span class="number">0</span>; v &lt; t.<span class="property">length</span>; v++) &#123;</span><br><span class="line">        <span class="keyword">var</span> _ = t.<span class="title function_">charCodeAt</span>(v);</span><br><span class="line">        _ &lt; <span class="number">128</span> ? g[y++] = _ : (_ &lt; <span class="number">2048</span> ? g[y++] = _ &gt;&gt; <span class="number">6</span> | <span class="number">192</span> : (<span class="number">55296</span> == (<span class="number">64512</span> &amp; _) &amp;&amp; v + <span class="number">1</span> &lt; t.<span class="property">length</span> &amp;&amp; <span class="number">56320</span> == (<span class="number">64512</span> &amp; t.<span class="title function_">charCodeAt</span>(v + <span class="number">1</span>)) ? (_ = <span class="number">65536</span> + ((<span class="number">1023</span> &amp; _) &lt;&lt; <span class="number">10</span>) + (<span class="number">1023</span> &amp; t.<span class="title function_">charCodeAt</span>(++v)),</span><br><span class="line">        g[y++] = _ &gt;&gt; <span class="number">18</span> | <span class="number">240</span>,</span><br><span class="line">        g[y++] = _ &gt;&gt; <span class="number">12</span> &amp; <span class="number">63</span> | <span class="number">128</span>) : g[y++] = _ &gt;&gt; <span class="number">12</span> | <span class="number">224</span>,</span><br><span class="line">        g[y++] = _ &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>),</span><br><span class="line">        g[y++] = <span class="number">63</span> &amp; _ | <span class="number">128</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> b = f, w = <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">43</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">45</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">97</span>)) + <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">94</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">43</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">54</span>)), k = <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">43</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">45</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">51</span>)) + <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">94</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">43</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">98</span>)) + <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">43</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">45</span>)).<span class="title function_">concat</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">102</span>)), x = <span class="number">0</span>; x &lt; g.<span class="property">length</span>; x++)</span><br><span class="line">        b = <span class="title function_">n</span>(b += g[x], w);</span><br><span class="line">    <span class="keyword">return</span> b = <span class="title function_">n</span>(b, k),</span><br><span class="line">    (b ^= m) &lt; <span class="number">0</span> &amp;&amp; (b = <span class="number">2147483648</span> + (<span class="number">2147483647</span> &amp; b)),</span><br><span class="line">    <span class="string">&quot;&quot;</span>.<span class="title function_">concat</span>((b %= <span class="number">1e6</span>).<span class="title function_">toString</span>(), <span class="string">&quot;.&quot;</span>).<span class="title function_">concat</span>(b ^ f)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p><img src="https://imgs.myan.run/i/2022/12/13/ulgbms-2.webp" alt="image-20221213185000836"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换电脑如何迁移Hexo</title>
      <link href="/posts/1849329056/"/>
      <url>/posts/1849329056/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>防止自己忘记如何迁移，记录一下；</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装GIT"><a href="#安装GIT" class="headerlink" title="安装GIT"></a>安装GIT</h3><p>官网直接下载对应版本，默认安装即可；官网地址：<a href="https://git-scm.com/">git官网</a></p><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>官网直接下载LTS长期维护版本，默认安装即可；官网地址：<a href="https://nodejs.org/zh-cn/">node.js官网</a></p><p>根据其他站长经验，可以在历史版本那里选择低版本下载，因为可能后面会出现各种不兼容的问题；</p><h3 id="安装HEXO"><a href="#安装HEXO" class="headerlink" title="安装HEXO"></a>安装HEXO</h3><p>打开命令提示符，输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure><h2 id="本地站点搭建"><a href="#本地站点搭建" class="headerlink" title="本地站点搭建"></a>本地站点搭建</h2><h3 id="初始化本地文件夹"><a href="#初始化本地文件夹" class="headerlink" title="初始化本地文件夹"></a>初始化本地文件夹</h3><p>在电脑磁盘任意位置，新建文件夹，例如新建文件夹-BLOG，进入BLOG文件夹，右键选择Git Bash Here，输入指令，如果失败直接删除BLOG文件重新建立文件夹输入下方指令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="安装HEXO依赖模块"><a href="#安装HEXO依赖模块" class="headerlink" title="安装HEXO依赖模块"></a>安装HEXO依赖模块</h3><p>在Git Bash Here中输入指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="安装git部署插件"><a href="#安装git部署插件" class="headerlink" title="安装git部署插件"></a>安装git部署插件</h3><p>在站点根目录下打开Git Bash Here，输入以下指令安装git部署插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="与远程仓库建立连接"><a href="#与远程仓库建立连接" class="headerlink" title="与远程仓库建立连接"></a>与远程仓库建立连接</h2><p>在根目录下即BLOG文件夹下，右键打开Git Bash Here，输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git config --global user.name 你的用户名 </span><br><span class="line">git config --global user.email 你的邮箱</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/用户名/新建的私有仓库名.git（私有仓库的地址）</span><br></pre></td></tr></table></figure><p>删除根目录下远程仓库所拥有的文件，同步远程仓库内容，右键打开Git Bash Here，输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin main</span><br></pre></td></tr></table></figure><p>若拉取出错，可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clean -f</span><br><span class="line">git reset --hard origin/main</span><br></pre></td></tr></table></figure><p>修改本地文件后，第一次推送到远程仓库，右键打开Git Bash Here，输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>以后若在修改本地文件，则直接git push即可；</p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Python中的迭代</title>
      <link href="/posts/20170106/"/>
      <url>/posts/20170106/</url>
      
        <content type="html"><![CDATA[<h1 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h1><p>重复获取下一个元素的过程，例如：循环获取容器中的元素</p><p><strong>for原理：</strong></p><ul><li><p>1.获取迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iterator = message.__iter__()</span><br></pre></td></tr></table></figure></li><li><p>2.获取下一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        item = iterator.__next__()</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">    <span class="comment"># 3.如果停止迭代则跳出循环</span></span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="可迭代对象-iterable"><a href="#可迭代对象-iterable" class="headerlink" title="可迭代对象(iterable)"></a>可迭代对象(iterable)</h2><p>可以<strong>创建迭代器的对象</strong>，<strong>具有iter函数的对象</strong>，可以返回迭代器对象，例如列表，元组等容器</p><h2 id="迭代器-iterator"><a href="#迭代器-iterator" class="headerlink" title="迭代器(iterator)"></a>迭代器(iterator)</h2><p>执行迭代过程的对象，可以被<strong>next()函数调用</strong>并返回下一个值的对象，例如for循环</p><h2 id="案例：自定义迭代器的创建"><a href="#案例：自定义迭代器的创建" class="headerlink" title="案例：自定义迭代器的创建"></a>案例：自定义迭代器的创建</h2><p>分析1：</p><p>创建一个学生管理类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentController</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__students = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_student</span>(<span class="params">self, stu</span>):</span><br><span class="line">        self.__students.append(stu)</span><br></pre></td></tr></table></figure><p>创建一个学生管理类的对象，并添加学生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">controller = StudentController()</span><br><span class="line">controller.add_student(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">controller.add_student(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">controller.add_student(<span class="string">&quot;王五&quot;</span>)</span><br></pre></td></tr></table></figure><p>如何遍历controller，若使用for循环，则会报错，<strong>因为’StudentController’ object is not iterable</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> controller:</span><br><span class="line">    <span class="built_in">print</span>(item) <span class="comment"># 报错</span></span><br></pre></td></tr></table></figure><p>分析2：为解决上述StudentController类不可迭代的问题，由文章开头for原理可知，要想可迭代需要具有iter函数，因此修改StudentController类，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentController</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__students = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_student</span>(<span class="params">self, stu</span>):</span><br><span class="line">        self.__students.append(stu)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">controller = StudentController()</span><br><span class="line">controller.add_student(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">controller.add_student(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">controller.add_student(<span class="string">&quot;王五&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> controller:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>上述代码报错，iter() returned non-iterator of type ‘NoneType’</p><p>分析3：由文章开头原理可知，iter函数应当返回一个迭代器对象。因此创建另外一个类StudentIterator:即学生迭代器；学生迭代器应当有next函数，且调用next方法时，应当返回下一个元素，当取完所有元素后，发起异常，结束迭代。学生迭代器的要获取的元素应当由可迭代对象给予。因此修改代码如下：完成要求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StudentController</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__students = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_student</span>(<span class="params">self, stu</span>):</span><br><span class="line">        self.__students.append(stu)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> StudentIterator(self.__students)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StudentIterator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.__data = data</span><br><span class="line">        self.__index = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.__index == <span class="built_in">len</span>(self.__data) - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        self.__index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.__data[self.__index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">controller = StudentController()</span><br><span class="line">controller.add_student(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">controller.add_student(<span class="string">&quot;李四&quot;</span>)</span><br><span class="line">controller.add_student(<span class="string">&quot;王五&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> controller:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><h3 id="可迭代对象与迭代器为何分成两个类"><a href="#可迭代对象与迭代器为何分成两个类" class="headerlink" title="可迭代对象与迭代器为何分成两个类"></a>可迭代对象与迭代器为何分成两个类</h3><p>因为多个可迭代对象可以使用同一个迭代器</p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>生成器：能够动态(<strong>循环一次计算一次返回一次</strong>)提供数据的可迭代对象</p><p>作用：在循环过程中，按照某种算法推算数据，<strong>不必创建容器存储完整的结果</strong>，从而节省内存空间。数据量越大，优势越明显。</p><p>生成器函数=可迭代对象+迭代器 </p><p>生成器函数定义：含有<strong>yield语句</strong>的<strong>函数</strong>，返回值为<strong>生成器对象</strong></p><p>执行过程：</p><p>(1)  调用生成器函数会自动创建迭代器对象。</p><p>(2)  调用迭代器对象的next()方法时才<strong>执行生成器函数</strong>。</p><p>(3)  每次执行到yield语句时返回数据，暂时离开。</p><p>(4)  待下次调用next()方法时继续从离开处继续执行。</p><h3 id="引例"><a href="#引例" class="headerlink" title="引例"></a>引例</h3><h4 id="创建自定义Myrange类1-0版本"><a href="#创建自定义Myrange类1-0版本" class="headerlink" title="创建自定义Myrange类1.0版本"></a>创建自定义Myrange类1.0版本</h4><p>实现以下功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> Myrange(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(number) <span class="comment"># 输出 0 1 2 3 4</span></span><br></pre></td></tr></table></figure><p>代码如下，使用自定义迭代器实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyrangeIterator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, target=<span class="literal">None</span></span>):</span><br><span class="line">        self.__target = target</span><br><span class="line">        self.__index = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.__index == self.__target:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration()</span><br><span class="line">        <span class="keyword">return</span> self.__index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Myrange</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num=<span class="literal">None</span></span>):</span><br><span class="line">        self.__num = num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> MyrangeIterator(self.__num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环一次 计算一次 返回一次</span></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> Myrange(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(number) <span class="comment"># 输出 0 1 2 3 4</span></span><br></pre></td></tr></table></figure><h3 id="生成器函数yield"><a href="#生成器函数yield" class="headerlink" title="生成器函数yield"></a>生成器函数yield</h3><pre><code>生成代码的大致规则：1. 将yield关键字前面的代码作为__next__函数体2. 将yield关键字后面的数据作为__next__返回值</code></pre><h4 id="创建自定义Myrange类2-0版本"><a href="#创建自定义Myrange类2-0版本" class="headerlink" title="创建自定义Myrange类2.0版本"></a>创建自定义Myrange类2.0版本</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Myrange</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, num=<span class="literal">None</span></span>):</span><br><span class="line">        self.__num = num</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        number = <span class="number">0</span></span><br><span class="line">        <span class="keyword">yield</span> number</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> number</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> number</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mr = Myrange(<span class="number">3</span>)</span><br><span class="line">iterator = mr.__iter__()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        item = iterator.__next__()</span><br><span class="line">        <span class="built_in">print</span>(item)  <span class="comment"># 0  1   2</span></span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>分析：iterator = mr.iter()此处虽然调用的是iter函数，但是实际函数并不会进入iter函数体内部，而是直接进入while True，在执行item = iterator.next()时，进入iter()函数体内部，且将yield关键字前面的代码作为next函数体，将yield关键字后面的数据作为next返回值</p><p>优点：无需写迭代器类，但是iter内部代码不够灵活</p><h4 id="创建自定义Myrange类3-0版本"><a href="#创建自定义Myrange类3-0版本" class="headerlink" title="创建自定义Myrange类3.0版本"></a>创建自定义Myrange类3.0版本</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_range</span>(<span class="params">stop</span>):</span><br><span class="line">    number = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> number &lt; stop:</span><br><span class="line">        <span class="keyword">yield</span> number</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> my_range(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用for的原理</span></span><br><span class="line">mr = my_range(<span class="number">5</span>)  <span class="comment"># 调用但不执行函数体，而是返回生成器对象</span></span><br><span class="line">iterator = mr.__iter__()  <span class="comment"># 此处调用iter函数，返回仍然是生成器对象，因此mr与iterator是相同的</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        item = iterator.__next__()</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="找出列表中为偶数的元素"><a href="#找出列表中为偶数的元素" class="headerlink" title="找出列表中为偶数的元素"></a>找出列表中为偶数的元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list01 = [<span class="number">43</span>, <span class="number">43</span>, <span class="number">54</span>, <span class="number">56</span>, <span class="number">76</span>, <span class="number">87</span>, <span class="number">98</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_evens</span>(<span class="params">list_target</span>):</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> list_target:</span><br><span class="line">        <span class="keyword">if</span> item % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">yield</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = get_evens(list01)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><h3 id="内置生成器"><a href="#内置生成器" class="headerlink" title="内置生成器"></a>内置生成器</h3><h4 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h4><p>语法：读写数据时使用   快捷键：itere+回车</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> i, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(<span class="built_in">list</span>):</span><br><span class="line">    <span class="built_in">print</span>(i, item)</span><br></pre></td></tr></table></figure><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><p>语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list_name = [<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;王五&#x27;</span>]</span><br><span class="line">list_age = [<span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="built_in">zip</span>(list_name, list_age):</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;张三&#x27;, 18)</span><br><span class="line">(&#x27;李四&#x27;, 19)</span><br><span class="line">(&#x27;王五&#x27;, 20)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈Python装饰器</title>
      <link href="/posts/2767352298/"/>
      <url>/posts/2767352298/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h2><p>装饰器就是一个函数，而这个函数用来给其他函数添加额外的功能</p><h2 id="为何需要用装饰器"><a href="#为何需要用装饰器" class="headerlink" title="为何需要用装饰器"></a>为何需要用装饰器</h2><ul><li>能够在不改变原函数功能的基础上，添加其他功能</li><li>降低代码的冗余</li><li>无需修改原函数的调用方式</li></ul><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="无参装饰器的实现方法"><a href="#无参装饰器的实现方法" class="headerlink" title="无参装饰器的实现方法"></a>无参装饰器的实现方法</h3><p>为下面的代码添加计算运算执行时间的功能</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure><p>实现方法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    start=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">    end=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行时间为:%s&#x27;</span>%(end-start))</span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">index()</span><br></pre></td></tr></table></figure><p>这样不仅<strong>修改了原函数</strong>，且若其他函数也需要计算运行时间，也必须在<strong>函数体内部</strong>加这些代码，使得<strong>代码冗余</strong></p><p>实现方法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line">start = time.time()</span><br><span class="line">index()</span><br><span class="line">end = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;执行时间为:%s&#x27;</span> % (end - start))</span><br></pre></td></tr></table></figure><p>这样虽然没有修改原函数，但是若其他函数也需要计算运行时间，也需要在调用前后获取当前时间，使得<strong>代码冗余</strong></p><p>实现方法3：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">func</span>):</span><br><span class="line">    start=time.time()</span><br><span class="line">    func()</span><br><span class="line">    end=time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;执行时间为%s&#x27;</span>%(end-start))</span><br><span class="line">count_time(index)</span><br></pre></td></tr></table></figure><p>这样既没有修改原函数代码，也能够解决多个函数都需计算运行时间时会出现代码冗余的问题，但是该方法使得<strong>原函数的调用方式改变了</strong></p><p>实现方法4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        start=time.time()</span><br><span class="line">        func()</span><br><span class="line">        end=time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行时间为%s&#x27;</span>%(end-start))</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">index=count_time(index)</span><br><span class="line">index()</span><br></pre></td></tr></table></figure><p>这样解决了原函数调用方式被改变的问题，只不过实现需要进行一步index=count_time(index)操作</p><p>实现方法5：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>():</span><br><span class="line">        start = time.time()</span><br><span class="line">        func()</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行时间为%s&#x27;</span> % (end - start))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index()</span><br></pre></td></tr></table></figure><p>在python中有这样一个语法，在原函数前面加上[@函数名]，这个的意义在于执行了index=count_time(index)操作，因此再调用的时候直接执行index()即调用了该函数</p><h3 id="有参装饰器的实现方法"><a href="#有参装饰器的实现方法" class="headerlink" title="有参装饰器的实现方法"></a>有参装饰器的实现方法</h3><p>实现方法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">x,y</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        func(x,y)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行时间为%s&#x27;</span> % (end - start))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index(<span class="number">10</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>该方法中，将原函数的参数传递给wrapper函数；但是若是其他函数被装饰，例如另外一个函数happy(x)，内部只有一个参数，则上述代码存在局限性</p><p>实现方法2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        func(*args,**kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行时间为%s&#x27;</span> % (end - start))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">index(<span class="number">10</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p><em><a href="https://so.csdn.net/so/search?q=args&amp;spm=1001.2101.3001.7020">args</a>和*</em>kwargs 这两个是python中方法的可变参数，因此用这样的传参方式解决了被装饰函数即原函数的参数不统一问题</p><h3 id="原函数带有返回值的装饰器实现方法"><a href="#原函数带有返回值的装饰器实现方法" class="headerlink" title="原函数带有返回值的装饰器实现方法"></a>原函数带有返回值的装饰器实现方法</h3><p>在上文中我们使用的index函数并没有返回值，若index函数有返回值该如何处理，实现方法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_time</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args,**kwargs</span>):</span><br><span class="line">        start = time.time()</span><br><span class="line">        res=func(*args,**kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;执行时间为%s&#x27;</span> % (end - start))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@count_time</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a=index(<span class="number">10</span>,<span class="number">20</span>)</span><br></pre></td></tr></table></figure><h3 id="装饰器模板"><a href="#装饰器模板" class="headerlink" title="装饰器模板"></a>装饰器模板</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outter</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 新功能代码</span></span><br><span class="line">        res = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><p>例子：云笔记系统需登录才可获取笔记列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录验证</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checklogin</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">request, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.session <span class="keyword">or</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> request.session:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&#x27;请登录后操作&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@checklogin</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># 获取笔记列表</span></span><br><span class="line">    <span class="built_in">id</span> = request.session[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">    notes = Note.objects.<span class="built_in">filter</span>(user_id=<span class="built_in">id</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;note/index.html&#x27;</span>, <span class="built_in">locals</span>())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈python中的property属性演变过程</title>
      <link href="/posts/930534823/"/>
      <url>/posts/930534823/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>property属性可以用来给属性添加约束，保护数据在有效范围内；使用property属性，将来修改约束条件的时候也很方便，可以在代码的调用方式不变的情况下改变结果。</p><p>例子：对于学生类有两个实例变量，一个是姓名，一个是年龄；对学生的年龄加以约束，将学生的年龄控制在6-18岁之间，倘若创建的学生对象的年龄不在6-18岁之间，则不接收该学生；</p><p>实现上述要求的方法有如下这么几种。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&quot;&quot;</span>, age=<span class="number">0</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.__age = age</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age</span>(<span class="params">self</span>):<span class="comment"># 读取</span></span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">self,value</span>):<span class="comment"># 写入</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">6</span>&lt;=value&lt;=<span class="number">18</span>:</span><br><span class="line">            self.__age = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;年纪过大，不接收该学生&quot;</span>)</span><br><span class="line"></span><br><span class="line">zs = Student(<span class="string">&quot;张三&quot;</span>, <span class="number">800</span>)</span><br><span class="line">zs.set_age(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(zs.get_age())</span><br></pre></td></tr></table></figure><p>如上述代码所示：首先将年龄实例变量，私有化，即self.__age = age,类外部则无法访问该实例变量；其次创建两个函数，分别为读取和写入函数：其中读取函数，自动返回年龄的数据值；写入函数，若写入的值不在6-18之间，则不接收该学生，若在6-18之间，则将其数值赋值给年龄实例变量；注意事项：实例变量私有化后的读取和写入，无法通过对象.age或对象.age访问或修改，需通过函数get_age读取，set_age函数写入；<br>上述代码的缺陷：在创建对象初始化过程中，并不会对年龄进行判断，而是直接赋值；因此即使年龄不在接收范围内，该学生也会被接收；</p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&quot;&quot;</span>, age=<span class="number">0</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.set_age(age)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age</span>(<span class="params">self</span>):<span class="comment"># 读取</span></span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">self,value</span>):<span class="comment"># 写入</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">6</span>&lt;=value&lt;=<span class="number">18</span>:</span><br><span class="line">            self.__age = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;年纪过大，不接收该学生&quot;</span>)</span><br><span class="line"></span><br><span class="line">zs = Student(<span class="string">&quot;张三&quot;</span>, <span class="number">800</span>)</span><br><span class="line">zs.set_age(<span class="number">20</span>)</span><br><span class="line"><span class="built_in">print</span>(zs.get_age())</span><br></pre></td></tr></table></figure><p>为解决实现方法1中的缺陷，在类初始化过程中，直接让其进入写入年龄函数进行判断：self.set_age(age)；注意：此时age实例变量是私有化变量；且zs.age=15并不报错，但并不会将15写入年龄，只能用set_age函数进行写入操作；<br>上述代码缺陷：在初始化函数中，出现self.set_age(age)这种代码，显得不是那么整齐，但Java语言中是利用这种方法实现的；</p><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&quot;&quot;</span>, age=<span class="number">0</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_age</span>(<span class="params">self</span>):<span class="comment"># 读取</span></span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_age</span>(<span class="params">self,value</span>):<span class="comment"># 写入</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">6</span> &lt;= value &lt;= <span class="number">18</span>:</span><br><span class="line">            self.__age = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;年纪过大，不接收该学生&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建与实例变量名称相同的类变量</span></span><br><span class="line">    age = <span class="built_in">property</span>(get_age,set_age)</span><br><span class="line"></span><br><span class="line">zs= Student(<span class="string">&quot;张三&quot;</span>, <span class="number">15</span>)</span><br><span class="line">zs.age = <span class="number">10</span> <span class="comment"># zs.set_age(20)</span></span><br><span class="line"><span class="built_in">print</span>(zs.age)</span><br></pre></td></tr></table></figure><p>通过创建与实例变量名称相同的类变量实现此功能：age = property(get_age,set_age)；在初始化过程中执行该条self.age = age会自动跳至set_age函数进行写入操作，并且实际存储数据的是私有化变量age；但此时可以通过对象.age对age进行读写操作；</p><h3 id="方法4"><a href="#方法4" class="headerlink" title="方法4"></a>方法4</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name=<span class="string">&quot;&quot;</span>, age=<span class="number">0</span></span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property  </span><span class="comment"># age = property(age)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter  </span><span class="comment"># age = age.setter(age)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">6</span>&lt;=value&lt;=<span class="number">18</span>:</span><br><span class="line">            self.__age = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;年纪过大，不接收该学生&quot;</span>)</span><br><span class="line"></span><br><span class="line">zs = Student(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>)</span><br><span class="line">zs.age = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(zs.age)</span><br></pre></td></tr></table></figure><p>上述代码即常规使用办法，前三种是演变过程；该规范代码记住即可，或者使用快捷键props+回车即可调出框架；</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高数课程&amp;竞赛书籍推荐</title>
      <link href="/posts/278973011/"/>
      <url>/posts/278973011/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>理工科大学入学，就会开设高等数学这门课，说实话，是一门令人头疼的课程；但是，我十分有幸遇见一位特别好的老师，学习起来相对轻松很多，<mark class="hl-label blue">大学最自豪的事情便是对别人说我高数线代概率都是杨老师教的哦!</mark>  2022年杨老师在中国大学慕课上开设了经济数学-微积分及建模这门课，特别推荐给大家！</p><h2 id="课程推荐"><a href="#课程推荐" class="headerlink" title="课程推荐"></a>课程推荐</h2><p>打开下面链接加入学习即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.icourse163.org/course/XZIT-1467004173</span><br></pre></td></tr></table></figure><h2 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h2><h3 id="省赛"><a href="#省赛" class="headerlink" title="省赛"></a>省赛</h3><p>陈仲的《高等数学竞赛解析教程》，吉米多维奇高数版；</p><h3 id="国赛"><a href="#国赛" class="headerlink" title="国赛"></a>国赛</h3><p>大学生数学竞赛习题精讲 第3版 陈兆斗；蒲和平的大学生数学竞赛教程；蔡燧林的：高等数学竞赛培训教程、高等数学例题精选（第2版）；全国大学生高数竞赛指南（小金牌）；大学数数学竞赛辅导2014版（已经不卖了可以看电子版和二手的）；</p><h3 id="试题"><a href="#试题" class="headerlink" title="试题"></a>试题</h3><p>1-12届国赛试题：<a href="https://pan.zhouenpei0523.top/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%9B%BD%E8%B5%9B">https://pan.zhouenpei0523.top/%E9%98%BF%E9%87%8C%E4%BA%91/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6/%E5%9B%BD%E8%B5%9B</a></p><h2 id="微信公众号推荐"><a href="#微信公众号推荐" class="headerlink" title="微信公众号推荐"></a>微信公众号推荐</h2><p>考研竞赛数学</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>谢谢大家听我絮絮叨叨，因为真的十分有幸遇见杨老师，这是我大学最开心的事情之一；<mark class="hl-label red">吾遇吾师，三生有幸</mark>   。</p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iPad&amp;iPhone快截指令</title>
      <link href="/posts/758108623/"/>
      <url>/posts/758108623/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>快捷指令可以自动化完成各种任务，因此学会使用快捷指令的使用很有必有。</p><h2 id="如何获取快捷指令？"><a href="#如何获取快捷指令？" class="headerlink" title="如何获取快捷指令？"></a>如何获取快捷指令？</h2><ul><li>创建自己的快捷指令</li><li>从快捷指令APP的快捷指令中心添加快捷指令</li><li>第三方快捷指令</li></ul><p>其中最后一个获取第三方快捷指令中，有很多黑科技，下面说说如何获取第三方快捷指令。</p><h3 id="如何获取第三方快捷指令？"><a href="#如何获取第三方快捷指令？" class="headerlink" title="如何获取第三方快捷指令？"></a>如何获取第三方快捷指令？</h3><ul><li>如果你是第一次使用快捷指令，那么得先到快捷指令APP中新建一个快捷指令，并且运行一下这个快捷指令。例如你可以新建一个“录制新语音备忘录”的快捷指令，当你点击该快捷指令左上角运行时，会自动打开语音备忘录并开始录音。</li><li>新建并运行第一个快捷指令之后，打开设置-&gt;快捷指令-&gt;打开“允许不受信任的快捷指令”的开关。(如果在此之前你没有运行过快捷指令，那么该项图标是灰色的，无法打开，这就是为啥要新建并且运行第一个快捷指令的原因)</li><li>打开此项开关后，就可以添加第三方快捷指令啦，下面推荐下，我使用的一些快捷指令及链接(附带推荐的快捷指令的链接，点击链接添加即可)。大家也可以自行百度搜索一些快捷指令库，网站里会有很多第三方快截指令，添加即可。</li></ul><h4 id="推荐的第三方快捷指令"><a href="#推荐的第三方快捷指令" class="headerlink" title="推荐的第三方快捷指令"></a>推荐的第三方快捷指令</h4><ol><li><p>更改视频速度</p><p>视频网站都支持更改视频速度，然而某盘必须冲会员才能够在线更改观看视频速度。有了这个快捷指令后，我们只需在浏览器登录某盘账号，并在浏览器中观看视频，点击浏览器向上箭头，下拉便会看到更改视频速度的选项，目前支持(0.8,1.0,1.1,1.2,1.5,2.0速度)<br>附上链接：<a href="https://www.icloud.com/shortcuts/695aad3e316c4d648af17663f3334727">https://www.icloud.com/shortcuts/695aad3e316c4d648af17663f3334727</a>      </p></li><li><p>电池寿命</p><p>用于查看电池容量，iPhone的设置中可以查看电池容量，iPad上暂时还不支持。iPad上可以通过第三方的软件如爱思助手查看，也可以使用该快捷指令。<br>如何使用该快截指令？</p><p>首先安装该快捷指令，其次在设置-&gt;隐私-&gt;分析与改进-&gt;打开“共享ipad分析”按钮-&gt;分析数据：在分析数据中找到log开头的文件，会有不少log文件，可以通过后面的日期查看到最新的log文件，打开该文件，点击右上角下拉会看到电池寿命的字样，点击电池寿命，就会查看到iPad电池的充电次数、设计容量、实际容量、电池寿命。(如果是第一次使用“共享iPad分析”，可能在分析数据中没有log开头的文件，充一次电就会有log开头文件了)</p><p>附上链接：<a href="https://www.icloud.com/shortcuts/42f5e55c1eb541a69cf6e7bb2b2c8866">https://www.icloud.com/shortcuts/42f5e55c1eb541a69cf6e7bb2b2c8866</a></p></li><li><p>Sky电影</p><p>顾名思义是个看剧的快捷指令，运行快捷指令时，只需要输入想看的剧或电影的名称即可。</p><p>附上链接：<a href="https://www.icloud.com/shortcuts/e7c394f077214787aaff040913c2e51b">https://www.icloud.com/shortcuts/e7c394f077214787aaff040913c2e51b</a></p></li><li><p>截图加壳</p><p>顾名思义是给截图加上手机壳(自动识别手机型号，选择手机颜色)，首先截图，然后打开该快捷指令。</p><p>附上链接：<a href="https://www.icloud.com/shortcuts/cd07ab2e738f4c90b309fad43d071558">https://www.icloud.com/shortcuts/cd07ab2e738f4c90b309fad43d071558</a></p></li></ol><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>还有很多其他快捷指令，大家可以去网上搜索并安装。</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文章永久链接</title>
      <link href="/posts/3950345881/"/>
      <url>/posts/3950345881/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HEXO默认使用的文章永久链接格式是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">year/:month/:day/:title/</span><br></pre></td></tr></table></figure><p>如果文章title很长那么这个文章链接就会很长，而且如果修改文章或者修改文章标题，链接就会立马失效</p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>为解决上述问题，可以安装以下插件，在网站根目录即BLOG下右键Git Bash Here，输入指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>安装完成后，打开网站根目录即BLOG下的配置文件_config.yml，修改以下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#permalink: :year/:month/:day/:title/</span><br><span class="line">#permalink_defaults:</span><br><span class="line">permalink: posts/:abbrlink/</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32 #support crc16(default) and crc32</span><br><span class="line">  rep: dec   #support dec(default) and hex</span><br></pre></td></tr></table></figure><p>修改完成后，记得git push到远程仓库即可</p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换主题与文章发布</title>
      <link href="/posts/3580242409/"/>
      <url>/posts/3580242409/</url>
      
        <content type="html"><![CDATA[<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>在网站<a href="https://hexo.io/themes/">HEXO主题</a>上有很多主题，选择一个自己喜欢的，点击进去会跳转到主题所在的GitHub仓库，复制仓库地址；</p><p>在本地仓库BLOG根目录下找到themes文件夹，右键选择Git Bash Here，输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone 主题仓库地址</span><br></pre></td></tr></table></figure><p>clone完成后，打开该文件夹，将隐藏文件显示的设置打开，删除主题目录下的.git隐藏文件</p><h3 id="更换主题-1"><a href="#更换主题-1" class="headerlink" title="更换主题"></a>更换主题</h3><p>在本地仓库BLOG根目录下，打开_config.yml文件，将其中theme选项后面的landscape换成上文clone下来的文件夹的名称</p><p>在本地仓库BLOG根目录下，右键选择Git Bash Here，输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;主题更改&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>完成后，等待GitHub Action自动部署完成后，刷新网站界面，即可发现网站主题已更改</p><h3 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a>主题推荐</h3><p>这里推荐主题<a href="https://github.com/jerryc127/hexo-theme-butterfly.git">butterfly</a> ，如何修改主题可自行百度，如果替换完butterfly主题后，网页不显示，此时在在本地仓库BLOG根目录下，右键选择Git Bash Here，输入如下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>输入完成后，记得git push到远程仓库</p><h2 id="发布新文章"><a href="#发布新文章" class="headerlink" title="发布新文章"></a>发布新文章</h2><p>在本地仓库BLOG根目录下，右键选择Git Bash Here，输入以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章名称&quot;</span><br></pre></td></tr></table></figure><p>即可在本地仓库BLOG根目录下source文件夹下的_post文件夹下发现此文章，打开后使用markdown语法编写即可</p><p>在文章开头处有一段文字，即可修改文字的一些信息，例如：</p><div class="table-container"><table><thead><tr><th>配置项</th><th>含义</th></tr></thead><tbody><tr><td>title</td><td>网页文章标题</td></tr><tr><td>date</td><td>文章创建如期</td></tr><tr><td>comments</td><td>文章评论功能是否启动</td></tr><tr><td>tags</td><td>文章标签</td></tr><tr><td>categories</td><td>文章分类</td></tr><tr><td>keywords</td><td>文章关键字</td></tr></tbody></table></div><p>文字编辑好后，记得git push到远程代码仓库，实现更新</p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github Action实现HEXO自动部署</title>
      <link href="/posts/3667363123/"/>
      <url>/posts/3667363123/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自动化部署是什么意思？即把HEXO博客的源代码上传到GitHub仓库，当该仓库中的代码发生变动时，自动通过安装一系列环境和依赖，生成HTML文件与GitHub pages仓库。即无需在本地使用指令hexo clean,hexo g,hexo d；这种项目持续集成的方式有很多种，本文选择GitHub action，如选择其他方式可自行百度；</p><p>优点：</p><ul><li>随时随地增加或者修改博文，我只需登录GitHub存放源代码的仓库，在里面新建博客，编写播客即可，无需由于电脑上没有安装node.js，git等环境而发愁；</li><li>如果万一本地文件丢失，我也可以通过博客源代码仓库，git clone一份到本地</li></ul><h2 id="创建HEXO源代码仓库"><a href="#创建HEXO源代码仓库" class="headerlink" title="创建HEXO源代码仓库"></a>创建HEXO源代码仓库</h2><p>在GitHub上新建一个仓库，仓库名任意，类型选择private，防止上篇文章中获取的GitHub令牌暴露；</p><h2 id="本地仓库添加远程库"><a href="#本地仓库添加远程库" class="headerlink" title="本地仓库添加远程库"></a>本地仓库添加远程库</h2><p>在根目录下即BLOG文件夹下，右键打开Git Bash Here，输入以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git config --global user.name 你的用户名 </span><br><span class="line">git config --global user.email 你的邮箱</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/用户名/新建的私有仓库名.git（私有仓库的地址）</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>将私有仓库地址换成上文创建的HEXO源代码仓库地址即可，在提交的过程中，会要求输入GitHub用户名与密码，输入即可。上述步骤完成后，刷新私有仓库，即可看见本地仓库的一些文件被上传至私有仓库，并不是全部文件都上传，在根目录下有一个.gitignore文件，里面防止了无需上传到私有仓库的文件，保持该文件默认即可，无需修改</p><h2 id="配置GitHub-Action实现自动化部署"><a href="#配置GitHub-Action实现自动化部署" class="headerlink" title="配置GitHub Action实现自动化部署"></a>配置GitHub Action实现自动化部署</h2><h3 id="新建workflow"><a href="#新建workflow" class="headerlink" title="新建workflow"></a>新建workflow</h3><p>在新建的HEXO源代码私有仓库中，点击Action按钮，在提示的一行信息中有这样一行字set up a workflow yourself，点击这行文字；</p><h3 id="配置Action"><a href="#配置Action" class="headerlink" title="配置Action"></a>配置Action</h3><p>将自动生成的main.yml中的文件替换成如下代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="comment"># 部署</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">on:</span> <span class="comment"># 触发条件</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 推送到 main 分支（这里的分支名很重要，不要弄错了）</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span> <span class="comment"># 推送新版本号</span></span><br><span class="line"> </span><br><span class="line">  <span class="attr">workflow_dispatch:</span> <span class="comment"># 手动触发</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"> </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="comment"># Checkout 仓库</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">main</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Node</span> <span class="comment"># 安装 Node.js</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Hexo</span> <span class="comment"># 安装 Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Modules</span> <span class="comment"># 缓存 Node 插件</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache-modules</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span> <span class="comment"># 如果没有缓存或 插件有更新，则安装插件</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache-modules.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span> <span class="comment"># **如果仓库里没有 package-lock.json，上传一下，npm ci 必须要有 package-lock.json**</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">ci</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="comment"># 生成</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo generate</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="comment"># 部署</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        git config --global user.name &quot;MYAN1998&quot;</span></span><br><span class="line"><span class="string">        git config --global user.email &quot;1455316479@qq.com&quot;</span></span><br><span class="line"><span class="string">        git clone https://github.com/MYAN1998/MYAN1998.github.io.git</span></span><br><span class="line"><span class="string">        export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">        hexo deploy</span></span><br><span class="line"><span class="string"></span>    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署至服务器</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">easingthemes/ssh-deploy@main</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">ARGS:</span> <span class="string">&quot;-avz --delete&quot;</span></span><br><span class="line">        <span class="attr">SOURCE:</span> <span class="string">&quot;public/&quot;</span></span><br><span class="line">        <span class="attr">REMOTE_HOST:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">REMOTE_USER:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.REMOTE_USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">TARGET:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.TARGET</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>部署至GitHub-page</p><p>在git clone处换成自己在上篇文章中，新建的仓库（用户名.github.io）这个仓库的地址</p><p>git config —global user.name “GitHub用户名”与git config —global user.email “GitHub邮箱”，也替换成自己的</p></li><li><p>部署至服务器</p><p>在保存源码的仓库，settings-Secrets-Actions中New repository secret添加四个字段与对应的值；首先是字段ACCESS_TOKEN，值为:首先去你服务器的<code>~/.ssh</code>目录，此时目录下应该有4个文件，分别是<code>authorized_keys</code>、<code>id_rsa</code>、<code>id_rsa.pub</code>、<code>known_hosts</code>。如果没有<code>id_rsa</code>和<code>id_rsa.pub</code>的，可以使用<code>ssh-keygen</code>来生成，这两个文件就是安装Git时需要生成的私钥和公钥。这个时候你看看<code>authorized_keys</code>里面有没有内容，如果有内容说明你之前设置过，<code>ACCESS_TOKEN</code>的值就是<code>authorized_keys</code>所对应的私钥。如果没有内容的话，你可以直接设置为公钥<code>id_rsa.pub</code>的内容，如执行命令<code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code>，此时就会把<code>id_rsa.pub</code>的内容写入<code>authorized_keys</code>中，然后把<code>ACCESS_TOKEN</code>的值设置为私钥<code>id_rsa</code>中的内容；</p><p>其次是设置字段REMOTE_HOST，REMOTE_USER，TARGET，值分别是服务器IP地址，用户名(我这里直接使用的root)，目标路径(我这里是/www/wwwroot/blog.zhouenpei0523.top)</p><p>部署至服务器报错，使用命令查看要同步的文件或文件夹的所属，使用chown命令修改所属用户以及所属组，修改同步的文件夹权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown root:root blog.zhouenpei0523.top/</span><br><span class="line">sudo chmod -R 777 blog.zhouenpei0523.top/</span><br></pre></td></tr></table></figure></li></ul><p>设置完成后，点击右上角的start commit</p><h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><p>点击Action按钮，即可查看部署状态，成功后，打开用户名.github.io这个网址即可发现网站部署成功</p><h2 id="HOW-TO-USE"><a href="#HOW-TO-USE" class="headerlink" title="HOW TO USE"></a>HOW TO USE</h2><p>日后如何使用，打开根目录即BLOG目录，右键Git Bash Here，输入如下指令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;添加文章&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github部署HEXO站点</title>
      <link href="/posts/3850018954/"/>
      <url>/posts/3850018954/</url>
      
        <content type="html"><![CDATA[<h2 id="创建空的仓库"><a href="#创建空的仓库" class="headerlink" title="创建空的仓库"></a>创建空的仓库</h2><p>在GitHub创建新的仓库，仓库名为：用户名.github.io，此处用户名为你的GitHub用户名（例如我的用户名为MYAN1998，此处我新建的仓库名为MYAN1998github.io），仓库类型为public，且不创建任何文件，一个全新空仓库；</p><h2 id="获取Github令牌"><a href="#获取Github令牌" class="headerlink" title="获取Github令牌"></a>获取Github令牌</h2><p>获取Github令牌的目的是为了日后使用GitHub action实现自动部署的功能，且使用Github令牌部署的好处就是不用重复部署ssh密钥环境，换了电脑、电脑重装也不用重新配置。</p><p>点开头像，选择settings，选择最后的developer settings，选择Personal access tokens，新建一个tokens，选择无限期全权限，即Expiration选择no expiration，Select scopes全选；获取Github令牌后，记得复制好，一旦离开页面，将不发看见此GitHub令牌，只能重新创建。</p><h2 id="配置HEXO"><a href="#配置HEXO" class="headerlink" title="配置HEXO"></a>配置HEXO</h2><p>打开HEXO站点根目录即BLOG下的<code>_config.yml</code>文件，拉取到最后，在deploy处更新为如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:/上文创建的Github令牌/@github.com/你的用户名/你的用户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>将上述需要填写的部分，换成你的即可</p><h3 id="安装git部署插件"><a href="#安装git部署插件" class="headerlink" title="安装git部署插件"></a>安装git部署插件</h3><p>在站点根目录下打开Git Bash Here，输入以下指令安装git部署插件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO本地站点搭建</title>
      <link href="/posts/612992078/"/>
      <url>/posts/612992078/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装GIT"><a href="#安装GIT" class="headerlink" title="安装GIT"></a>安装GIT</h3><p>官网直接下载对应版本，默认安装即可；官网地址：<a href="https://git-scm.com/">git官网</a></p><h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>官网直接下载LTS长期维护版本，默认安装即可；官网地址：<a href="https://nodejs.org/zh-cn/">node.js官网</a></p><p>根据其他站长经验，可以在历史版本那里选择低版本下载，因为可能后面会出现各种不兼容的问题；</p><h3 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h3><p>打开命令提示符，分别输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br><span class="line">node --version</span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure><h2 id="安装HEXO"><a href="#安装HEXO" class="headerlink" title="安装HEXO"></a>安装HEXO</h2><p>打开命令提示符，输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure><h2 id="本地建立站点"><a href="#本地建立站点" class="headerlink" title="本地建立站点"></a>本地建立站点</h2><h3 id="初始化站点文件夹"><a href="#初始化站点文件夹" class="headerlink" title="初始化站点文件夹"></a>初始化站点文件夹</h3><p>在电脑磁盘任意位置，新建文件夹，例如新建文件夹-BLOG，进入BLOG文件夹，右键选择Git Bash Here，输入指令，如果失败直接删除BLOG文件重新建立文件夹输入下方指令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="安装HEXO依赖模块"><a href="#安装HEXO依赖模块" class="headerlink" title="安装HEXO依赖模块"></a>安装HEXO依赖模块</h3><p>在Git Bash Here中输入指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="启动本地站点"><a href="#启动本地站点" class="headerlink" title="启动本地站点"></a>启动本地站点</h3><p>在Git Bash Here中输入指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="访问本地站点"><a href="#访问本地站点" class="headerlink" title="访问本地站点"></a>访问本地站点</h3><p>使用浏览器打开网址<a href="http://localhost:4000">本地站点</a></p><h3 id="关闭本地站点"><a href="#关闭本地站点" class="headerlink" title="关闭本地站点"></a>关闭本地站点</h3><p>在Git Bash Here中按下control c</p><h2 id="修改站点相关信息"><a href="#修改站点相关信息" class="headerlink" title="修改站点相关信息"></a>修改站点相关信息</h2><p>打开站点配置信息_config.yml，即可修改相关信息；例如：</p><div class="table-container"><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>title</td><td>修改站点标题</td></tr><tr><td>description</td><td>修改站点描述信息</td></tr><tr><td>keywords</td><td>站点关键词</td></tr><tr><td>author</td><td>站点作者</td></tr><tr><td>language</td><td>站点语言，默认英文，若改为中文设置为zh-CN</td></tr></tbody></table></div><p>修改信息后，在Git Bash Here（注意此时所在目录应在BLOG目录下），输入下方指令，更新站点信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>成功后，使用浏览器打开网址<a href="http://localhost:4000">本地站点</a></p>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HEXO </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
